<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lc_love_myh</title>
  
  <subtitle>&lt;b style=&quot;background-color:white;&quot; &gt;往后余生 心底温柔是你，目光所至也是你。&lt;/b&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-01-26T13:35:11.874Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lc_love_myh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>算法训练板子</title>
    <link href="http://yoursite.com/2019/01/26/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E6%9D%BF%E5%AD%90/"/>
    <id>http://yoursite.com/2019/01/26/算法训练板子/</id>
    <published>2019-01-26T12:59:01.000Z</published>
    <updated>2019-01-26T13:35:11.874Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>经过了选号和漫长的等待，处女座终于拿到了给小姐姐定制的手环，小姐姐看到以后直呼666！</p><p>处女座其实也挺喜欢6这个数字的，实际上他做手环的时候选取的k=6。<br>所以他对于包含数码6的数字极其敏感。<br>每次看到像4567这样的数字的时候他的心就像触电了一样，想起了小姐姐。</p><p>现在你要给处女座展示一系列数字，你想知道他的内心会激动多少次。对于同一个数字，<br>他最多只会激动一次，即如果这个数是66666，他还是只会激动一次。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>一行包括两个数字l,r，表示你给处女座展示的数字范围为[l,r]。<br>输出描述:<br>一行一个整数，表示处女座内心激动的次数。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入<br>10 20<br>输出<br>1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL l,r;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">10</span>==<span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=x/<span class="number">10</span>*<span class="number">10</span>;i&lt;=x;i++)</span><br><span class="line">        <span class="keyword">if</span>(check(i)) cnt++;</span><br><span class="line">    <span class="keyword">return</span> solve(x/<span class="number">10</span><span class="number">-1</span>)*<span class="number">9</span>+cnt+x/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;solve(r)-solve(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><h2 id="正题-1"><a href="#正题-1" class="headerlink" title="正题"></a>正题</h2><p>处女座放完了”高利贷”，拿到了不少的资金，又可以和小姐姐约会啦！（之前不还是攒钱打比赛的吗）现在处女座拿到了一份宁波市旅游地图决定和小姐姐一起去玩耍。他们来到了动物园，去参观里面的动物。但是很不幸的是，他们在游玩的途中遇到了一只恶龙。</p><p>恶龙长有n个头，但经过了处女座的调教，恶龙变得善良了一些。它的n个头每个头要么仍是邪恶的头，用“1”表示，要么已经变得善良，用“0”表示，因而恶龙的n个头就可以用n位01串来表示。而此时处女座要发挥自己的勇士形象，要把所有的龙头都变成<br>0000<br>⋯<br>00<br>0000⋯00完全善良的龙头。每一次，他可以砍掉龙最右侧的一个头，同时龙会在最左侧长出新的一个头，以保证龙头数量不变。如果他砍掉的是一个1，即邪恶的头，他可以决定龙在最左侧会长出什么样的头；但如果他砍掉了一个善良的头，那么玻璃心的恶龙将会在左侧不受控制的长出一个随机的头，既可能是善良的头，也可能是邪恶的头，而且它总会与处女座作对，尽力的破坏他的计划。</p><p>现在给你一个恶龙头的初始状态，即一个01串，请帮助处女座判断一下，能否在有限步之内让全部的龙头都变成善良的龙头。<br>输入描述:<br>输入第一行T，表示用例组数。</p><p>之后T行，每行一个01串S表示龙头的初始状态，“0”表示善良的头，“1”表示邪恶的头。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>对于每组数据，处女座能否将全部的龙头变成善良的头，可以的话输出“cnznb”，不可以则输出“ljcnz”（不含引号）。<br>示例1<br>输入<br>1<br>1111<br>输出<br>cnznb  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"cnznb"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><h2 id="正题-2"><a href="#正题-2" class="headerlink" title="正题"></a>正题</h2><p>处女座靠着自己的家教本领赚够了去比赛的钱，于是开启了疯狂训练。在每个夜深人静第二天不收作业的夜晚，他都会开始刷题。</p><p>“今日又是一个刷题的夜晚。”他挑选了n道题开始刷，而题太多，刷不掉，理还乱（呜呜）、自己没有解决的题目每分钟都会给他带来<br>b<br>i<br>bi的疲倦值，而解决每一道题目都需要花费<br>a<br>i<br>ai分钟的时间。</p><p>当然，处女座一般都是考虑清楚了再写题的，所以他在写题的时候都会精神抖擞，也就是说，当前正在写的那一题并不会给他带来任何疲劳。</p><p>为了迎接后天要收的作业和明天要遇到的小姐姐，他想让今晚的刷题尽可能的轻松，那请你帮他找出最小所需要的疲倦值吧。</p><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>输入数据共包括n+1行，第一行包括一个n表示处女座今晚打算训练的题的数量。</p><p>接下来n行，每行包括两个整数ai,bi，分别表示处女座刷掉本题要花费的时间和本题每分钟会带来的疲倦值。<br>输出描述:<br>一行包括一个整数，表示处女座今晚训练会产生的最小疲倦值。<br>示例1<br>输入<br>6<br>6 1<br>4 5<br>4 3<br>6 2<br>8 1<br>2 6<br>输出<br>86   </p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>先做第6个题，增加（1+5+3+2+1）*2= 24 点疲倦值，再做第2个题，增加28点疲倦值，随后依次是第3,4,1,5道题，增加16,12,6点疲倦值。总共的疲倦值是24 + 28 + 16 + 12 + 6 = 86点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line">ll c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    ll a,b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(A t)&#123;</span><br><span class="line">        <span class="keyword">return</span> a*t.b&lt;b*t.a;</span><br><span class="line">    &#125;</span><br><span class="line">    A()&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;c+=b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    c=<span class="number">0</span>;</span><br><span class="line">    ll n,m=<span class="number">0</span>;<span class="built_in">cin</span>&gt;&gt;n;A da[n];</span><br><span class="line">    sort(da,da+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        m+=(c-da[i].b)*da[i].a;</span><br><span class="line">        c-=da[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目1&quot;&gt;&lt;a href=&quot;#题目1&quot; class=&quot;headerlink&quot; title=&quot;题目1&quot;&gt;&lt;/a&gt;题目1&lt;/h1&gt;&lt;h2 id=&quot;正题&quot;&gt;&lt;a href=&quot;#正题&quot; class=&quot;headerlink&quot; title=&quot;正题&quot;&gt;&lt;/a&gt;正题&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lua学习</title>
    <link href="http://yoursite.com/2018/12/24/Lua/"/>
    <id>http://yoursite.com/2018/12/24/Lua/</id>
    <published>2018-12-24T11:13:24.000Z</published>
    <updated>2019-01-09T15:30:13.759Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Lua是脚本型语言<ul><li>动态编译</li><li>动态执行<ul><li>每次修改不需要重新编译链接执行</li></ul></li><li>运行时编译而并非运行前编译</li></ul></li><li>是C语言编写的</li><li>速度比C语言快</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="Lua的Hello-World"><a href="#Lua的Hello-World" class="headerlink" title="Lua的Hello World"></a>Lua的Hello World</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello world"</span>)</span><br></pre></td></tr></table></figure><p><strong>Lua行末不要分号</strong></p><h3 id="Lua的括号"><a href="#Lua的括号" class="headerlink" title="Lua的括号"></a>Lua的括号</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    ……</span><br><span class="line">    ……</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>Lua语言几乎用不到大括号，取而代之的是do…end</strong></p><h3 id="Lua的注释"><a href="#Lua的注释" class="headerlink" title="Lua的注释"></a>Lua的注释</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--这是一个注释</span></span><br><span class="line">// 双斜杠不是注释了哦</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">这是一个多行注释哦</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">/*</span><br><span class="line"> 这不是多行注释了哦</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><strong>小心不要变成纯文本了</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--如果上面的多行注释没有写 双横线的话，就变成的纯文本赋值语句哦</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">[[&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个时候的 a 就是一个纯文本</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>Lua是动态类型，不需要定义就可以直接使用</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"I'm a"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a is "</span>..a)</span><br></pre></td></tr></table></figure><ul><li><p>Lua的数据类型是动态可变的</p></li><li><p>Lua的数据类型</p><ul><li>数字类型<ul><li>整型</li><li>浮点型</li><li>long double 等 都是 数字类型，并没有明确划分</li></ul></li><li>字符串类型</li><li>thread类型<ul><li>线程也算是一个数据类型</li></ul></li><li>function类型<ul><li>函数方法的数据类型</li></ul></li><li>table<ul><li>数组，融合的链表和键值对等</li></ul></li><li>其他类型</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"user input is "</span>..x)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a(<span class="string">"test"</span>)</span><br><span class="line"><span class="comment">-- 这就相当于调用了function(x) 那个函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一一个使用了 大括号的地方</span></span><br><span class="line">myTable = &#123;<span class="number">12</span>,<span class="number">13</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(myTable) <span class="comment">-- 会输出table的地址</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出了序列号和对应的值（序号从1开始）</span></span><br></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">"123"</span></span><br><span class="line"><span class="keyword">local</span> c = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">myfuntion1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"i'm lua"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">myfuntion2</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> a = <span class="string">"hello"</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>其他lua文件引用该lua文件的时候，将无法访问到<code>local</code>标记的变量</li><li>相当于 是一个 private 的变量</li><li>反之 如果不加 <code>local</code>标识符，那么Lua默认的是全局变量<code>global</code>类型</li></ul><p><strong>如果一个function函数中创建的变量不是local的，就意味着它是一个global变量</strong></p><h3 id="if语句-没有switch语句"><a href="#if语句-没有switch语句" class="headerlink" title="if语句(没有switch语句)"></a>if语句(没有switch语句)</h3><ul><li>单独一个if</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">12</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a\'s value is 12"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>if..else 语句</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is 12"</span>)</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is not 12"</span>)    </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>if…else if…语句</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">12</span> <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is 12"</span>)</span><br><span class="line">    <span class="keyword">elseif</span> a ~= <span class="number">11</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is not 11"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>这里不等于符号是 <code>~=</code> 注意注意！！！！！</strong></p><h3 id="函数-方法"><a href="#函数-方法" class="headerlink" title="函数/方法"></a>函数/方法</h3><h4 id="无参无返回值"><a href="#无参无返回值" class="headerlink" title="无参无返回值"></a>无参无返回值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="有参无返回值"><a href="#有参无返回值" class="headerlink" title="有参无返回值"></a>有参无返回值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="有参有返回值"><a href="#有参有返回值" class="headerlink" title="有参有返回值"></a>有参有返回值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f3</span><span class="params">(a)</span></span></span><br><span class="line">    a += <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line">a = f3(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h4 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f4</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">local</span> a,b = f4()</span><br></pre></td></tr></table></figure><h4 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f5</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> myTable = &#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(k,v)    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line">f5(<span class="string">"12"</span>,<span class="number">123</span>,<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure><h4 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h4><ul><li>print() 就是一个很明显的print()，因为我们没有定义它</li><li>有些函数是Lua自带的</li></ul><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">or</span> <span class="keyword">not</span></span><br></pre></td></tr></table></figure><ul><li>表示假<ul><li>false</li><li>nil</li></ul></li><li>表示真<ul><li>0</li><li>其他数值</li></ul></li></ul><blockquote><p>and 和 or 就类似于 C语言中的 &amp;&amp; 和 ||</p></blockquote><ul><li>and<ul><li>如果我们第一个需要去计算的操作数，如果操作数是假，则返回第一个操作数</li><li>反之则返回第二个操作数</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>)</span><br><span class="line"><span class="comment">-- 输出的 2 哦</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">false</span> <span class="keyword">and</span> <span class="number">5</span>)</span><br><span class="line"><span class="comment">-- 输出 false 哦</span></span><br></pre></td></tr></table></figure><ul><li>or<ul><li>如果第一个我们需要去计算你的操作数为真，返回第一个值</li><li>反之返回第二个值</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">or</span> <span class="number">5</span>)</span><br><span class="line"><span class="comment">-- 返回 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">false</span> <span class="keyword">or</span> <span class="number">5</span>)</span><br><span class="line"><span class="comment">-- 返回 5</span></span><br></pre></td></tr></table></figure><blockquote><p>not 类似于 C语言的 ! 取反</p></blockquote><ul><li>not <ul><li>永远返回的是 true或false</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">-- 返回 true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> <span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 返回 false</span></span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> index = <span class="number">1</span></span><br><span class="line"><span class="keyword">local</span> mytable = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">while</span> mytable[index] <span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">print</span>(mytable[index])</span><br><span class="line">    index = index+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="do……while换成了-repeat"><a href="#do……while换成了-repeat" class="headerlink" title="do……while换成了 repeat"></a>do……while换成了 repeat</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    line = <span class="built_in">io</span>.<span class="built_in">read</span>() <span class="comment">-- 从命令行获取输入</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line"><span class="keyword">until</span> line ~= <span class="string">""</span></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(i)    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出 1 2 3 4 5 想想为什么</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(i)    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出 1 3 5 7 9 想想为什么</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">20</span>, <span class="number">10</span>, <span class="number">-2</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(i)    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出 20 18 16 14 12 想想为什么</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span> = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, #<span class="built_in">table</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">table</span>[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- #table 相当于取 table的长度，然后遍历</span></span><br></pre></td></tr></table></figure><p><strong>上述可见，for 后面有三个参数 一个是初始化i，一个是结束判断，一个是加减i(默认为1)</strong></p><h3 id="Table的使用"><a href="#Table的使用" class="headerlink" title="Table的使用"></a>Table的使用</h3><ul><li>Table类似于Java的list和map的结合体</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立一个有数值的table</span></span><br><span class="line"><span class="keyword">local</span> MyTable = &#123;</span><br><span class="line">    <span class="number">1</span>, <span class="comment">-- 索引为1</span></span><br><span class="line">    <span class="number">2</span>,<span class="comment">-- 索引为2</span></span><br><span class="line">    <span class="number">3</span>,<span class="comment">-- 索引为3</span></span><br><span class="line">    <span class="number">4</span>,<span class="comment">-- 索引为4</span></span><br><span class="line">    <span class="number">5</span>,<span class="comment">-- 索引为5</span></span><br><span class="line">    table2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, <span class="comment">-- 索引不为6</span></span><br><span class="line">    <span class="string">"ok"</span><span class="comment">-- 索引为6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么上面的table2的索引部位6呢？</strong></p><h4 id="Table的遍历方式"><a href="#Table的遍历方式" class="headerlink" title="Table的遍历方式"></a>Table的遍历方式</h4><ul><li>Table的复杂性导致其有三种遍历方式</li><li>因为Table既是链表类型又是键值对类型</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">myTable = &#123;</span><br><span class="line">    k = <span class="string">"x"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(myTable[k])</span><br><span class="line"><span class="comment">-- 输出 nil</span></span><br><span class="line"><span class="built_in">print</span>(myTable[<span class="string">"k"</span>])</span><br><span class="line"><span class="comment">-- 输出 x</span></span><br><span class="line"><span class="built_in">print</span>(myTable.k)</span><br><span class="line"><span class="comment">-- 输出 x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 又或者直接</span></span><br><span class="line">s = <span class="string">"ok"</span></span><br><span class="line">myTable[s] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(myTable[s])</span><br><span class="line"><span class="comment">-- 直接通过键去设置值</span></span><br></pre></td></tr></table></figure><p><strong>myTable.k 与 myTable[“k”]有所不同</strong></p><ul><li>myTable.k 等价于 myTable[“k”]，索引的键就变成了字符串</li><li>myTable[k] 表示用变量k的值来索引table，索引的键可以是其他</li></ul><h4 id="普通遍历方式"><a href="#普通遍历方式" class="headerlink" title="普通遍历方式"></a>普通遍历方式</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myTable=&#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,k = <span class="string">"ok"</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, #myTable <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is "</span>..myTable[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 只输出1,2,3,4,5 哦， 因为 "ok" 的键为 "k"</span></span><br></pre></td></tr></table></figure><h4 id="for-ipairs-迭代器"><a href="#for-ipairs-迭代器" class="headerlink" title="for ipairs(迭代器)"></a>for ipairs(迭代器)</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>与第一种for循环方式一样，都是按照当前索引的隐式索引来迭代并显示值的</strong></p><h4 id="for-pairs-迭代器"><a href="#for-pairs-迭代器" class="headerlink" title="for pairs(迭代器)"></a>for pairs(迭代器)</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>按照键值对来输出</strong></p><p><strong>如果值为一个table，则会输出该table的地址</strong></p><h4 id="Table的作用"><a href="#Table的作用" class="headerlink" title="Table的作用"></a>Table的作用</h4><ol><li>你可以作为第三方插件集成到项目中，为项目提供一个支持功能</li><li>完全使用table进行开发</li><li>当做一种数据的配置集（就是阵列）</li></ol><ul><li>整体游戏的配置集（例子）</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 使用lua，当做一种配置信息</span></span><br><span class="line">application_config = &#123;</span><br><span class="line">    game_config = &#123;</span><br><span class="line">        ifDebugModel = <span class="literal">false</span>, <span class="comment">-- 调试模式</span></span><br><span class="line">        isCheatModel = <span class="literal">true</span> <span class="comment">-- 作弊模式</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    sound_config = &#123;</span><br><span class="line">        isBackgroundMusicOpen = <span class="literal">true</span>,</span><br><span class="line">        isEffectOpen = <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    textrure_config = &#123;</span><br><span class="line">        Plist_Dictionary = <span class="string">"res/plist/"</span>,</span><br><span class="line">        PACKE_TEXTURE_DIR = <span class="string">"res/images/"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小怪阵列</span></span><br><span class="line">enemy_waves = &#123;</span><br><span class="line">    &#123;enterId = <span class="number">1</span>, infoid = <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;enterId = <span class="number">2</span>, infoid = <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;enterId = <span class="number">2</span>, infoid = <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;enterId = <span class="number">1</span>, infoid = <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;enterId = <span class="number">1</span>, infoid = <span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment">--[[</span></span><br><span class="line"><span class="comment">        很典型的小怪阵列</span></span><br><span class="line"><span class="comment">        enterId 指的是 出兵口</span></span><br><span class="line"><span class="comment">        infoid 有一些具体信息</span></span><br><span class="line"><span class="comment">    ]]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enemy_datas = &#123;</span><br><span class="line">    &#123; maxHp = <span class="number">100</span>, damage = <span class="number">70</span>, isHaveSpecialEffect = <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; maxHp = <span class="number">50</span>, damage = <span class="number">20</span>, isHaveSpecialEffect = <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; maxHp = <span class="number">75</span>, damage = <span class="number">50</span>, isHaveSpecialEffect = <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; maxHp = <span class="number">125</span>, damage = <span class="number">80</span>, isHaveSpecialEffect = <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="comment">-- 这里的参数 maxHp 指的是最高血量，damage 指的是攻击伤害， isHavaSpecialEffect 指的是是否有攻击特效</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">pairs</span>(enemy_datas) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(value) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> ik,iv <span class="keyword">in</span> <span class="built_in">pairs</span>(value) <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">print</span>(ik, iv)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"__________"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>使用Lua可以很快的给角色赋予属性</strong><br><strong>使用Lua可以很快的设置调试属性</strong></p><h3 id="读写数据文件"><a href="#读写数据文件" class="headerlink" title="读写数据文件"></a>读写数据文件</h3><ul><li>以万能的txt文件作为例子</li><li>这里使用IO库</li></ul><h4 id="一种写法"><a href="#一种写法" class="headerlink" title="一种写法"></a>一种写法</h4><ul><li>读<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"123.txt"</span>,<span class="string">'r'</span>))</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    返回一个文件流指针</span></span><br><span class="line"><span class="comment">    assert 是一个断言，当读写输入报错的时候会报错</span></span><br><span class="line"><span class="comment">    这里的io其实是一个table，正如同上面的table所讲的使用 '.' 来获取键的值</span></span><br><span class="line"><span class="comment">    这里的open就是io的一个键</span></span><br><span class="line"><span class="comment">    open 函数 有两个参数 一个是 路径名字 一个是 操作名字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">r 以只读方式打开文件，该文件必须存在。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">w 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a 以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF符保留）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">r+ 以可读写方式打开文件，该文件必须存在。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">w+ 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a+ 与a类似，但此文件可读可写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">b 二进制模式，如果文件是二进制文件，可以加上b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">+ 号表示对文件既可以读也可以写</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">string</span> = f:<span class="built_in">read</span>(<span class="string">"*all"</span>);</span><br><span class="line"><span class="comment">-- *all 表示读取文件的所有内容</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">*line 表示读取一行</span></span><br><span class="line"><span class="comment">*number 表示读取一个数字</span></span><br><span class="line"><span class="comment">&lt;num&gt;读取一个不超过num长度的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">f:<span class="built_in">close</span>() <span class="comment">-- 关闭流</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>需要强调的是，f后面的’:’相当于面向对象的封装方式</strong></p><p>-写</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Write_txt</span><span class="params">(filename, inData)</span></span></span><br><span class="line">    <span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename, <span class="string">'a'</span>))</span><br><span class="line">    f:<span class="built_in">write</span>(inData);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Write_txt(<span class="string">"123.txt"</span>, <span class="string">"\nthis is a function"</span>);</span><br></pre></td></tr></table></figure><h4 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">------------------简单模型-----------------</span></span><br><span class="line"><span class="comment">--读</span></span><br><span class="line"><span class="keyword">local</span> file1=<span class="built_in">io</span>.<span class="built_in">input</span>(<span class="string">"1.txt"</span>)  <span class="comment">--当前目录"1.txt"要存在，不然出错</span></span><br><span class="line"><span class="keyword">local</span> str=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*a"</span>)</span><br><span class="line"><span class="built_in">print</span>(str)</span><br><span class="line"><span class="comment">--写</span></span><br><span class="line"><span class="keyword">local</span> file2=<span class="built_in">io</span>.<span class="built_in">output</span>(<span class="string">"2.txt"</span>) <span class="comment">--当前目录"2.txt"不需要存在</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(str)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">flush</span>()</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">--利用这几个函数可以做一个文件复制的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span><span class="params">(fileA,fileB)</span></span></span><br><span class="line">  <span class="keyword">local</span> file1=<span class="built_in">io</span>.<span class="built_in">input</span>(fileA) </span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> file1 <span class="keyword">then</span> <span class="built_in">print</span>(fileA..<span class="string">"不存在"</span>) <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> str=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*a"</span>)</span><br><span class="line">  <span class="keyword">local</span> file2=<span class="built_in">io</span>.<span class="built_in">output</span>(fileB)</span><br><span class="line">  <span class="built_in">io</span>.<span class="built_in">write</span>(str)</span><br><span class="line">  <span class="built_in">io</span>.<span class="built_in">flush</span>()</span><br><span class="line">  <span class="built_in">io</span>.<span class="built_in">close</span>()  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>(<span class="string">"1.txt"</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(line)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">------------------完整模型-----------------</span></span><br><span class="line"><span class="keyword">local</span> f=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"3.txt"</span>,<span class="string">"a+"</span>)</span><br><span class="line">f:<span class="built_in">write</span>(<span class="string">"Happy New Year!"</span>)</span><br><span class="line">f:<span class="built_in">flush</span>()</span><br><span class="line"></span><br><span class="line">f:seek(<span class="string">"end"</span>,<span class="number">-1</span>) <span class="comment">--定位到文件末尾前一个字节</span></span><br><span class="line"><span class="keyword">local</span> str=f:<span class="built_in">read</span>(<span class="number">1</span>) <span class="comment">--读取一个字符</span></span><br><span class="line"><span class="built_in">print</span>(str) <span class="comment">--输出"!"</span></span><br><span class="line">f:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><h3 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h3><ul><li>当一个对象没用被用到后就会从内存中delete掉，但是有的时候我们又想在之后恢复该对象到当时的状态</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">( o )</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(o) == <span class="string">"number"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>( o )</span><br><span class="line">    <span class="keyword">elseif</span> <span class="built_in">type</span>(o) == <span class="string">"string"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%q"</span>, o))</span><br><span class="line">    <span class="keyword">elseif</span> <span class="built_in">type</span>(o) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"&#123;\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(o) <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"  "</span>, k, <span class="string">" = "</span>)</span><br><span class="line">            serialize( v )</span><br><span class="line">            <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">",\n"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"&#125;\n"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">output</span>(<span class="string">"123.txt"</span>)</span><br><span class="line"><span class="built_in">table</span> = &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">serialize(<span class="built_in">table</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">flush</span>()</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p><strong>上述代码将一个table对象保存到txt文件中</strong></p><h3 id="模块化-module"><a href="#模块化-module" class="headerlink" title="模块化 module"></a>模块化 module</h3><ul><li>Java有 package包 来封装类</li><li>C++有 namespace 名空间 来封住类</li></ul><h2 id="Lua与C-的交互"><a href="#Lua与C-的交互" class="headerlink" title="Lua与C++的交互"></a>Lua与C++的交互</h2><ul><li>Lua底层实现是 C/C++</li></ul><h3 id="Lua与C-交互的中间件栈"><a href="#Lua与C-交互的中间件栈" class="headerlink" title="Lua与C++交互的中间件栈"></a>Lua与C++交互的中间件栈</h3><ul><li>Lua与C++又部分不同，Lua有内部垃圾回收机制</li><li>Lua无需声明直接使用，而C++需要声明变量</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lua&quot;&gt;&lt;a href=&quot;#Lua&quot; class=&quot;headerlink&quot; title=&quot;Lua&quot;&gt;&lt;/a&gt;Lua&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;u
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java基础学习</title>
    <link href="http://yoursite.com/2018/12/23/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2018/12/23/Java基础学习/</id>
    <published>2018-12-23T15:03:02.000Z</published>
    <updated>2018-12-16T16:27:26.280Z</updated>
    
    <content type="html"><![CDATA[<h1 id="真～Java基础"><a href="#真～Java基础" class="headerlink" title="真～Java基础"></a>真～Java基础</h1><ul><li><p>Java SE：Java Platform， Standard Edition</p><ul><li>标准版：各应用平台的基础，桌面开发和低端商务应用的解决方案</li></ul></li><li><p>Java EE：Java Platform，Enterprise Edition</p><ul><li>企业版：以企业为环境而开发应用程序的解决方案</li></ul></li><li><p>Java ME：Java Platform，Micro Edition</p><ul><li>微型版：致力于消费产品和嵌入式设备的最佳解决方案</li></ul></li></ul><h2 id="体系特点"><a href="#体系特点" class="headerlink" title="体系特点"></a>体系特点</h2><ul><li>一种纯面向对象的编程语言</li><li>一种与平台无关（跨平台）的语言<ul><li>它提供了在不同平台下运行的解释环境</li></ul></li><li>一种健壮的语言，吸收了C/C++语言的优点</li><li>有较高的安全性<ul><li>自动垃圾回收</li><li>强制类型检查</li><li>取消指针</li></ul></li></ul><h2 id="Java跨平台"><a href="#Java跨平台" class="headerlink" title="Java跨平台"></a>Java跨平台</h2><p><img src="https://img-blog.csdnimg.cn/20181216204618646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzQxNjcxNDcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>对于不同的运行平台，有不同的JVM（Java Virtual M×××）<ul><li>JVM屏蔽了底层运行平台的差别，实现了“ 一次编译，随处运行”</li></ul></li><li>垃圾回收（GC）<ul><li>不再使用的内存空间应当进行回收</li><li>垃圾回收在Java程序运行过程中自动启用，用于检查并释放那些可以被释放的空间</li></ul></li></ul><h2 id="程序开发的步骤"><a href="#程序开发的步骤" class="headerlink" title="程序开发的步骤"></a>程序开发的步骤</h2><ul><li>程序：是为了实现特定目标或解决特定问题而用计算机语言编写的命令序列的集合</li></ul><p><img src="https://img-blog.csdnimg.cn/20181216210837407.png" alt="在这里插入图片描述"></p><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *public：共有的</span></span><br><span class="line"><span class="comment"> *class：类</span></span><br><span class="line"><span class="comment"> *Hello：类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">        <span class="comment">// static 静态关键字</span></span><br><span class="line">        <span class="comment">// main 主函数，程序入口方法</span></span><br><span class="line">        <span class="comment">// void 没有返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码格式："><a href="#代码格式：" class="headerlink" title="代码格式："></a>代码格式：</h3><ul><li>java 代码的位置</li><li>java 严格区分大小写</li><li>java 是一种自由格式的语言</li><li>代码分为结构定义语句和功能执行语句</li><li>功能执行语句的最后必须用分号结束</li></ul><h2 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><code>变量</code>就是系统为程序分配的一块内存单元，用来存储各种类型的数据</li><li>根据所存储的数据类型的不同，有各种不同类型的变量</li><li>变量名代表这块内存中的数据</li></ul><h4 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h4><ul><li>变量的分类：<ol><li>按所属的数据类型划分<ol><li>基本数据类型</li><li>引用数据类型</li></ol></li><li>按被声明的位置划分<ol><li>局部变量：方法或语句块内部定义的变量</li><li>成员变量：方法外部，类的内部定义的变量</li></ol></li></ol></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">关键字</th><th style="text-align:center">占用字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">布尔型</td><td style="text-align:center">boolean</td><td style="text-align:center">1</td><td style="text-align:center">true、false</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">字节型</td><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128～127</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">短整型</td><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-2^15～2^15-1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">整型</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2^31～2^31-1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">长整形</td><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-2^63～2^63-1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">字符型</td><td style="text-align:center">char</td><td style="text-align:center">2</td><td style="text-align:center">0～2^16-1</td><td style="text-align:center">‘\u0000’</td></tr><tr><td style="text-align:center">单精度浮点型</td><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">1.4013E-45～3.4028E+38</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">双精度浮点型</td><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">4.9E-324～1.7977E+308</td><td style="text-align:center">0.0F</td></tr></tbody></table><h3 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h3><ul><li>自动类型转换：<ul><li>容量下的类型自动转换成容量大的数据类型</li><li>byte,short,int-&gt;float-&gt;long-&gt;double</li><li>byte,short,int不会相互转换，他们三者在计算时会转换成int类型</li></ul></li><li>强制类型转换：<ul><li>容量大的类型转换成容量小的数据类型时，要加上强制转换符</li><li>long n = 100L;</li><li>int i = (int)n;</li></ul></li><li><code>boolean 类型不能转换成任何其他数据类型</code></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table><thead><tr><th style="text-align:center">abstract</th><th style="text-align:center">assert</th><th style="text-align:center">boolean</th><th style="text-align:center">break</th><th style="text-align:center">byte</th></tr></thead><tbody><tr><td style="text-align:center">case</td><td style="text-align:center">catch</td><td style="text-align:center">char</td><td style="text-align:center">class</td><td style="text-align:center">const</td></tr><tr><td style="text-align:center">continue</td><td style="text-align:center">default</td><td style="text-align:center">do</td><td style="text-align:center">double</td><td style="text-align:center">else</td></tr><tr><td style="text-align:center">enum</td><td style="text-align:center">extends</td><td style="text-align:center">final</td><td style="text-align:center">finally</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">for</td><td style="text-align:center">goto</td><td style="text-align:center">if</td><td style="text-align:center">implement</td><td style="text-align:center">import</td></tr><tr><td style="text-align:center">instanceof</td><td style="text-align:center">int</td><td style="text-align:center">interface</td><td style="text-align:center">long</td><td style="text-align:center">native</td></tr><tr><td style="text-align:center">new</td><td style="text-align:center">package</td><td style="text-align:center">private</td><td style="text-align:center">protected</td><td style="text-align:center">public</td></tr><tr><td style="text-align:center">return</td><td style="text-align:center">strictfp</td><td style="text-align:center">short</td><td style="text-align:center">static</td><td style="text-align:center">super</td></tr><tr><td style="text-align:center">switch</td><td style="text-align:center">synchronized</td><td style="text-align:center">this</td><td style="text-align:center">throw</td><td style="text-align:center">throws</td></tr><tr><td style="text-align:center">transient</td><td style="text-align:center">try</td><td style="text-align:center">void</td><td style="text-align:center">volatile</td><td style="text-align:center">while</td></tr></tbody></table><p><strong>键盘输入：Scanner input = new Scanner(System.in)</strong></p><h1 id="Java面向对象编程"><a href="#Java面向对象编程" class="headerlink" title="Java面向对象编程"></a>Java面向对象编程</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ol><li>类表示一个共性的产物，是一个综合的特征，而对象是一个个性的产物，是一个个性的特征</li><li>类由属性和方法组成<ul><li>属性：相当于特征，人的名字等</li><li>方法：相当于行为，人会吃饭等</li></ul></li></ol><h3 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名称</span>&#123;</span><br><span class="line">    属性名称;</span><br><span class="line">    返回值类型 方法名（）&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类的定义<ul><li>一个类要想真正的进行操作，则必须依靠对象，对象的定义格式如下</li><li>类名称 变量名 = new 类名称();</li></ul></li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ol><li>封装性是面向对象思想的三大特征之一</li><li>封装性就是隐藏实现细节，仅对外提供访问接口</li><li>封装有<ul><li>属性封装</li><li>方法封装</li><li>类的封装</li><li>组件封装</li><li>模块化封装</li></ul></li></ol><h4 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h4><ol><li>模块化</li><li>信息隐藏</li><li>代码重用</li><li>插件化易于调试</li><li>具有安全性</li></ol><h4 id="如何封装"><a href="#如何封装" class="headerlink" title="如何封装"></a>如何封装</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过使用方法来获取和设置类的属性，而不是让直接操作属性值</strong></p><p><strong>在set方法中，我们还可以格式化传入的参数，改变其为我们想要的类型</strong></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p>什么是构造方法？</p><ul><li>构造方法就是类构造对象时调用的方法，用于对象的初始化工作</li><li>构造方法是实例化一个类的对象时，也即是new的时候，最先调用的方法</li></ul></li><li><p>构造方法的定义</p><ul><li>构造方法是在类中定义的，构造方法的定义格式：方法名与类名相同，无返回参数类型</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    Dog()&#123;</span><br><span class="line">        <span class="keyword">this</span>(Name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 带参构造函数</span></span><br><span class="line">    Dog(String Name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(Name);</span><br><span class="line">        <span class="keyword">this</span>.setage(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>每个类默认会有一个无参构造函数</li><li>方法名与类名相同，无返回值</li><li>构造方法可以用来初始化属性</li><li>如果类中又带参的构造方法，那么需要默认的无参构造方法时必须显示的写出来</li><li>在构造方法中调用其他的构造方法使用 this(参数) 而且必须在第一句</li></ol><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><ul><li>实例一，值传递</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line">        method(x);</span><br><span class="line">        System.out.println(<span class="string">"x="</span> + x);</span><br><span class="line">        <span class="comment">// 最后 x 等于 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> mx)</span></span>&#123;</span><br><span class="line">        mx  = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例二，引用传递</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Weapon w = <span class="keyword">new</span> Weapon();</span><br><span class="line">        method(w);</span><br><span class="line">        System.out.println(<span class="string">"weapon age = "</span> + w.age);</span><br><span class="line">        <span class="comment">// 最后 w.age 等于 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Weapon w)</span></span>&#123;</span><br><span class="line">        w.age = <span class="number">5l</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">2</span>;<span class="comment">// </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果是自定义的类，那么绝对是引用传递；如果是java自己封装的类，大多是值传递</strong></p><p><strong>正确的解释是，如果值在 栈 中，那么是值传递；如果值 在 堆中，那么是引用传递</strong></p><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><ul><li>static关键字的作用：<ul><li>使用static关键字修饰一个属性<ul><li>声明为static的变量实质上就是一个全局变量</li></ul></li><li>使用static关键字修饰的一个方法<ul><li>通常是 无需实例化对象就可以调用的方法 类名().方法名()</li></ul></li><li>使用static关键字修饰一个类<ul><li>普通类不能定义为static，内部类可以</li></ul></li></ul></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>静态变量或方法属于类，而不是对象</li><li>所以调用静态变量或方法时直接使用类名调用，而不要用对象调用</li><li>静态变量在内存中只会保存一份，由这个类的所有对象共享</li><li>静态数据（变量和方法）在第一次使用时即载入内存，知道程序退出</li><li>静态方法不能调用非静态属性，反之可以使用（因为静态方法先于非静态属性，方法）</li></ol><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ul><li>声明为static的方法有以下几个限制<ul><li>他们仅能调用其他的static方法</li><li>他们只能访问static数据</li><li>他们不能以任何方式引用this或super</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20181217002007661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzQxNjcxNDcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="JDBC编程"><a href="#JDBC编程" class="headerlink" title="JDBC编程"></a>JDBC编程</h1><p>目前市面上数据库管理系统已经非常多，mysql，Oracle，SQLserver等等<br>在ODBC出现之前，对这些数据库的访问是一件非常麻烦的事情，因为这些数据库虽然都支持sql，但他们针对自己数据库的访问方法，所以当用户访问不同个的数据库时，就必须使用不同API来编写相应的数据库访问程序</p><ul><li>ODBC（Open Database Connectivity）<br>通过ODBC访问不同的数据库，无需对数据库访问程序进行修改，这样ODBC的应用越来越广泛</li><li>JDBC（java data base connectivity）<br>按照ODBC的模式来制定的，它是一个通用的底层的支持sql功能的Java API</li></ul><h2 id="JDBC的组成"><a href="#JDBC的组成" class="headerlink" title="JDBC的组成"></a>JDBC的组成</h2><p>JDBC提供了两种接口</p><ol><li>JDBC API<ul><li>面向开发人员的API</li></ul></li><li>JDBC Driver API<ul><li>面向底层驱动程序开发商的API</li></ul></li></ol><h3 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h3><p> JDBC API 是一系列的应用编程接口，可以用来进行数据库连接，访问数据等</p><p> <code>JDBC API</code>的主要编程接口：</p><ol><li>DriverManager</li></ol><ul><li>驱动程序管理类</li><li>用来装载驱动程序，并为创建数据库链接提供支持</li></ul><ol><li>Connection</li></ol><ul><li>是一个接口</li><li>用来连接某一个指定的数据库</li></ul><ol><li>Statement</li></ol><ul><li>是一个接口</li><li>提供了执行SQL语句，获取查询结果的方法</li></ul><ol><li>PreparedStatement</li></ol><ul><li>用于执行预编译的SQL语句</li></ul><ol><li>ResultSet</li></ol><ul><li>提供了对接口集进行处理的方法</li></ul><h3 id="JDBC-Driver-API"><a href="#JDBC-Driver-API" class="headerlink" title="JDBC Driver API"></a>JDBC Driver API</h3><p>主要有四种类型</p><ol><li>JDBC-ODBC bridge<ul><li>通过将JDBC的调用全部委托给其他编程接口来实现    </li></ul></li><li>部分java技术的本地API驱动程序<ul><li>驱动程序部分实现通过JAVA语言</li><li>其他的部分则委托给本地的数据库的客户段代码来实现</li></ul></li><li>全部基于java技术的本地API程序<ul><li>这种驱动程序的实现全部通过Java语言</li><li>通常由某个中间件服务器提供</li><li>客户端程序可以使用数据库无关的协议和中间件服务器进行通信</li><li>中间件服务器再讲客户端的调用转发给服务器进行处理</li></ul></li><li>全部基于java技术的本地协议驱动程序<ul><li>全部基于java语言</li><li>包含了特定数据库的访问协议，使得客户端可以直接同服务器进行通信</li></ul></li></ol><h2 id="使用JDBC进行增删改"><a href="#使用JDBC进行增删改" class="headerlink" title="使用JDBC进行增删改"></a>使用JDBC进行增删改</h2><h3 id="首先建表"><a href="#首先建表" class="headerlink" title="首先建表"></a>首先建表</h3><ul><li>修改Mysql-WorkBench快捷键<ul><li>自动补全 ctrl+space<ul><li>但是和Ubuntu的输入法切换冲突</li><li>修改/usr/share/mysql-workbench/data/main_menu.xml文件</li><li>modifier + Space 就是 Ctrl+space的意思，修改为不冲突的快捷键例如F2</li><li>或者 直接 菜单栏 edit-&gt;auto complete 启动自动补全</li></ul></li></ul></li><li>创建用户表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use jsp_db;</span><br><span class="line">create table tbl_user(</span><br><span class="line">  id int(11) unsigned not null auto_increment,</span><br><span class="line">  name varchar(50) not null default &apos;&apos;,</span><br><span class="line">  password varchar(50) not null default &apos;&apos;,</span><br><span class="line">  email varchar(50) default &apos;&apos;,</span><br><span class="line">  primary key(id)</span><br><span class="line">  )engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><ul><li>创建地址表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tbl_address (</span><br><span class="line">  id INT(11) UNSIGNED not null auto_increment,</span><br><span class="line">  city varchar(20) default null,</span><br><span class="line">  country varchar(20) default null,</span><br><span class="line">  user_id int(11) unsigned not null,</span><br><span class="line">  primary key(id)</span><br><span class="line">) engine=InnoDB default charset = utf8;</span><br></pre></td></tr></table></figure><ul><li>表中插入记录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert into tbl_user(id,name,password,email)</span><br><span class="line">values</span><br><span class="line">(1, &apos;xiaoming&apos;, &apos;123456&apos;,&apos;xiaoming@qq.com&apos;),</span><br><span class="line">(2, &apos;xiaozhang&apos;, &apos;123456&apos;, &apos;xiaozhang@qq.com&apos;);</span><br><span class="line"></span><br><span class="line">insert into tbl_address(city, country, user_id)</span><br><span class="line">values</span><br><span class="line">(&apos;beijing&apos;, &apos;china&apos;, 1),</span><br><span class="line">(&apos;tianjin&apos;, &apos;china&apos;, 2);</span><br></pre></td></tr></table></figure><h3 id="查询初体验"><a href="#查询初体验" class="headerlink" title="查询初体验"></a>查询初体验</h3><ul><li>JDBC执行流程</li></ul><p><img src="https://i.imgur.com/4GC8UgG.png" alt=""></p><ul><li>Eclise中<ul><li>Alt+ ‘/‘ 可以进行生成函数</li></ul></li><li>数据库查询</li></ul><p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.JDBC.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">import com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line">public class JDBCTest &#123;</span><br><span class="line">​public static void main(String[] args) &#123;</span><br><span class="line">​String sql = &quot;select * from tbl_user&quot;;</span><br><span class="line">​Connection connection = null;</span><br><span class="line">​Statement statement = null;</span><br><span class="line">​ResultSet resultSet = null;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><pre><code>try {    // 用于注册Mysql JDBC的驱动程序    // forName 方法用于初始化参数指定的类，并创建一个对应的实例对象    Class.forName(&quot;com.mysql.jdbc.Driver&quot;);    // 这里url 指定了 数据库的 地址 端口 以及具体访问的库名    String url = &quot;jdbc:mysql://localhost:3306/jsp_db&quot;;    String user = &quot;root&quot;;    String password = &quot;root&quot;;    // 获取Mysql 数据库的连接 这里使用的是 DriverManage 的 getConnection 方法    connection = DriverManager.getConnection(url, user, password);    // 创建一个Statement对象    statement = connection.createStatement();    // 使用Statement对象的executeQuery方法来发送Sql语句    // executeQuery 方法返回一个 ResultSet对象    resultSet = statement.executeQuery(sql);    // 遍历ResultSet对象    while (resultSet.next()) {        System.out.println(resultSet.getInt(&quot;id&quot;));        System.out.println(resultSet.getString(&quot;name&quot;));        System.out.println(resultSet.getString(&quot;password&quot;));        System.out.println(resultSet.getString(&quot;email&quot;));    }} catch (Exception e) {    // TODO: handle exception    e.printStackTrace();} finally {    try {        // 关闭ResultSet对象的结果集        resultSet.close();    } catch (Exception e2) {    }    try {        // 关闭Statement对象        statement.close();    } catch (Exception e2) {    }    try {        // 关闭数据库连接        connection.close();    } catch (Exception e2) {    }}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul><li>首先写一个Connection的函数，这样执行就不用每次都写 那几条固定语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static Connection getConnection() &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">// 这里url 制定了 访问数据库的 地址 端口 以及 具体 库的名字</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/jsp_db&quot;;</span><br><span class="line">String user = &quot;root&quot;;</span><br><span class="line">String password = &quot;root&quot;;</span><br><span class="line">// 获取Mysql 数据库的连接 这里使用的是 DriverManage 的 getConnection 方法</span><br><span class="line">conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">&#125;</span><br><span class="line">return conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>然后就是增删改的函数了</code></li><li>增</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void insert() &#123;</span><br><span class="line">Connection conn = getConnection();</span><br><span class="line">try &#123;</span><br><span class="line">// 存储sql语句，用来向用户表中插入记录</span><br><span class="line">String sql = &quot;insert into tbl_user(name,password,email)&quot; </span><br><span class="line">+ &quot;values&quot; </span><br><span class="line">+&quot;(&apos;Tom&apos;, &apos;123456&apos;,&apos;Tom@qq.com&apos;),(&apos;Anny&apos;, &apos;123456&apos;, &apos;Anny@qq.com&apos;)&quot;;</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line">// Statement中的executeUpdate方法，可以执行DML语句，包括insert update 以及 delete</span><br><span class="line">// 也可以执行没有返回结果的语句 例如：DDL语句 </span><br><span class="line">// 参数是一个字符串形式的sql语句，如果执行的是DML语句，那么返回影响的记录条数，如果是DDL语句则返回0</span><br><span class="line">// 会抛出sqlExcuption 以及 sqlTimeOut 的异常</span><br><span class="line">int count = st.executeUpdate(sql);</span><br><span class="line">System.out.println(&quot;向表中插入了&quot; + count + &quot;条语句&quot;);</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void update() &#123;</span><br><span class="line">Connection conn = getConnection();</span><br><span class="line">try &#123;</span><br><span class="line">// 存储sql语句，用来向用户表中插入记录</span><br><span class="line">String sql = &quot;update tbl_user set email=&apos;Tomm@163.com&apos; where name = &apos;Tom&apos;&quot;;</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line">// Statement中的executeUpdate方法，可以执行DML语句，包括insert update 以及 delete</span><br><span class="line">// 也可以执行没有返回结果的语句 例如：DDL语句 </span><br><span class="line">// 参数是一个字符串形式的sql语句，如果执行的是DML语句，那么返回影响的记录条数，如果是DDL语句则返回0</span><br><span class="line">// 会抛出sqlExcuption 以及 sqlTimeOut 的异常</span><br><span class="line">int count = st.executeUpdate(sql);</span><br><span class="line">System.out.println(&quot;向表中更新了&quot; + count + &quot;条语句&quot;);</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void delete_db() &#123;</span><br><span class="line">Connection conn = getConnection();</span><br><span class="line">try &#123;</span><br><span class="line">// 存储sql语句，用来向用户表中插入记录</span><br><span class="line">String sql = &quot;delete from tbl_user where name=&apos;Tom&apos;&quot;;</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line">// Statement中的executeUpdate方法，可以执行DML语句，包括insert update 以及 delete</span><br><span class="line">// 也可以执行没有返回结果的语句 例如：DDL语句 </span><br><span class="line">// 参数是一个字符串形式的sql语句，如果执行的是DML语句，那么返回影响的记录条数，如果是DDL语句则返回0</span><br><span class="line">// 会抛出sqlExcuption 以及 sqlTimeOut 的异常</span><br><span class="line">int count = st.executeUpdate(sql);</span><br><span class="line">System.out.println(&quot;向表中删除了&quot; + count + &quot;条语句&quot;);</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之后只需要在 main 函数中 调用inset 等 方法就 能插入 修改 删除了</li><li>需要注意的是，不要把sql语句写错</li><li>执行之后，控制台会输出修改的语句的个数</li><li>main方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//insert();</span><br><span class="line">//update();</span><br><span class="line">delete_db();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC事务处理"><a href="#JDBC事务处理" class="headerlink" title="JDBC事务处理"></a>JDBC事务处理</h2><p>数据库是一个多用户使用的共享资源<br>当多个用户使用数据库存取资源的时候，就会产生不同用户存取同一数据的情况<br>因此需要控制并发</p><ul><li>原子性<ul><li>事务中包含的操作都被看做是一个逻辑单元</li><li>这个逻辑单元的操作 要么全部成功 要么全部失败</li><li>事务中所有元素作为一个整体，提交或回滚</li><li>事务的所有元素是不可分割的，是一个完整的操作</li></ul></li><li>一致性<ul><li>事务开始之前和事务结束以后，数据库都处于一致性状态</li><li>数据库的完整性约束，没有被破坏</li></ul></li><li>隔离性<ul><li>对数据库进行修改的多个事务，是彼此隔离的</li><li>事务必须是独立的，不应该以任何形式影响其他事务</li></ul></li><li>持久性<ul><li>事务完成之后，对于系统的影响是永久的</li><li>该修改真实的修改了数据库，即使系统出现故障也会一直保留</li></ul></li></ul><h3 id="事务语句"><a href="#事务语句" class="headerlink" title="事务语句"></a>事务语句</h3><ul><li>开始事务<ul><li>Begin transaction</li></ul></li><li>提交事务<ul><li>Commit transaction</li></ul></li><li>回滚事务<ul><li>Rollback transaction</li></ul></li></ul><p>举个例子：<br>​    我们有 user 和 address 表<br>​    在 address 表中 插入 Tom 的地址信息<br>​    在 user 表中 插入 id 为 1 的 Tom的个人信息</p><ul><li>不难发现，由于user表中原来就有id 为 1 的信息，所以user表插入失败</li><li>但是，address 表却可以插入，因为没有主键冲突</li><li>这就是 <code>完整性 缺失</code></li></ul><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class TransAction &#123;</span><br></pre></td></tr></table></figure></p><p>public static Connection getConnection() {<br>    Connection conn = null;<br>    try {<br>        Class.forName(“com.mysql.jdbc.Driver”);<br>        String url = “jdbc:mysql://localhost:3306/jsp_db”;<br>        String user = “root”;<br>        String password = “root”;<br>        conn = DriverManager.getConnection(url, user, password);</p><pre><code>} catch (Exception e) {}return conn;</code></pre><p>}<br>// 使用 throws SQLException 来捕获异常，因为如果数据插入失败的时候会抛出异常<br>// 通过 这种方法 将异常传递给 上层函数 通过上层函数捕捉异常 进行回滚<br>public static void insertUser(Connection conn) throws SQLException {<br>    String sql = “insert into tbl_user(name,password,email)” </p><pre><code>        + &quot;values&quot;         +&quot;(&apos;Tom&apos;, &apos;123456&apos;,&apos;Tom@qq.com&apos;),(&apos;Anny&apos;, &apos;123456&apos;, &apos;Anny@qq.com&apos;)&quot;;Statement st = conn.createStatement();int count = st.executeUpdate(sql);System.out.println(&quot;向表中插入了&quot; + count + &quot;条语句&quot;);</code></pre><p>}</p><p>public static void insertAddress(Connection conn) throws SQLException {<br>    String sql = “insert into tbl_address(id,city,country)” </p><pre><code>        + &quot;values&quot;         +&quot;(1, &apos;beijing&apos;,&apos;china&apos;),(2, &apos;tianjing&apos;, &apos;china&apos;)&quot;;Statement st = conn.createStatement();int count = st.executeUpdate(sql);System.out.println(&quot;向表中插入了&quot; + count + &quot;条语句&quot;);</code></pre><p>}</p><p>public static void main(String[] args) {<br>    Connection conn = null;<br>    try {<br>        conn = getConnection();<br>        //关闭自动提交<br>        conn.setAutoCommit(false);<br>        insertAddress(conn);<br>        insertUser(conn);</p><pre><code>    conn.commit();} catch (SQLException e) {    System.out.println(&quot;=====偶哟，捕获到SQL异常了呢====&quot;);    e.printStackTrace();    try {        // 如果捕获到异常 那么说明数据插入失败，则要回滚到插入之前的状态        // 避免出现，部分插入，部分没插入 所导致的 完整性缺失问题        System.out.println(&quot;====现在开始数据回滚呢，请等会哦====&quot;);        conn.rollback();        System.out.println(&quot;====回滚成功呢，请再看看是哪里的代码有问题呢====&quot;);    } catch (Exception e2) {        e2.printStackTrace();    }} finally {    try {        // 如果 conn 连接 不为空的时候，最后要关闭连接        if (conn != null) {            conn.close();        }    } catch (Exception e3) {        e3.printStackTrace();    }}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><h2 id="JDBC-优化"><a href="#JDBC-优化" class="headerlink" title="JDBC 优化"></a>JDBC 优化</h2><p>前面的写法都是直接将 数据库链接，用户名，密码等直接内嵌到代码中<br>但是这样的写法其实重用性特别差，一旦修改了密码那么所有的文件都需要修改</p><p>这个时候最好的方法就是写一个 <code>配置文件</code>，然后所有的数据链接都用这个配置文件<br>这里 默认 <code>配置文件</code>的后缀是 <code>.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">dburl=jdbc\:mysql\://localhost\:3306/jsp_db</span><br><span class="line">user=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure><p>直接写上面的内容就行了 不需要上面花里胡哨的<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">​package com.JDBC.Test;</span><br><span class="line">​</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line">public class DataConnectFactory &#123;</span><br><span class="line">private static String driver;</span><br><span class="line">private static String dburl;</span><br><span class="line">private static String user;</span><br><span class="line">private static String password;</span><br><span class="line">private static final DataConnectFactory factory = new DataConnectFactory();</span><br><span class="line">private Connection connection;</span><br><span class="line">static &#123;</span><br><span class="line">Properties prop = new Properties();</span><br><span class="line">try &#123;</span><br><span class="line">InputStream in = DataConnectFactory.class.getResourceAsStream(&quot;dbconfig.properties&quot;);</span><br><span class="line">prop.load(in);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.out.println(&quot;==配置问价出错了呢==&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">driver = prop.getProperty(driver);</span><br><span class="line">dburl = prop.getProperty(dburl);</span><br><span class="line">password = prop.getProperty(password);</span><br><span class="line">user = prop.getProperty(user); </span><br><span class="line">&#125;</span><br><span class="line">//定义默认构造函数</span><br><span class="line">private DataConnectFactory()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 单例模式</span><br><span class="line">public static DataConnectFactory getInstance() &#123;</span><br><span class="line">return factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Connection makeConnection() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(driver);</span><br><span class="line">connection = DriverManager.getConnection(dburl, user, password);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return connection;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了静态代码块</p><h1 id="Java-上传下载-文件"><a href="#Java-上传下载-文件" class="headerlink" title="Java 上传下载 文件"></a>Java 上传下载 文件</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><ul><li>文件上传的作用<ul><li>上传照片</li><li>上传文档</li><li>上传简历</li><li>……</li></ul></li><li>文件上传对页面的要求<ul><li>必须使用表单，而不是超链接</li><li>表单的method 必须是 POST，而不能是GET</li><li>表单的enctype 必须是 multipart/form-data;</li><li>在表单中添加file表单字段，即&lt;input typt=”file” name=”file” …/&gt;</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"..."</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    照  片：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"picture"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上传对Servlet限制<ul><li>request.getParametere(“”)在表单为 enctype=”multipart/form-data”时作废，返回null<ul><li><code>整个表单都不能用</code></li></ul></li><li>调用 request.getInputStream(); 方法，返回 ServletInputStream，返回数据包含整个请求的体</li></ul></li><li>多部件表单的体<ul><li>每个分开的多个部件，即一个表单项一个部件</li><li>一个部件中有自己的请求头和空行，还有请求提</li><li>普通表单项：<ul><li>一个头：Content-Disposition：包含name=”xxx”，即表达项名称</li><li>一个体：表单项的值</li></ul></li><li>文件表单项：<ul><li>两个头：<ul><li>Content-Disposition：包含name=”xxx”，表单项名称，还有一个filename，即上传文件的名称</li><li>Content-Type：它是上传文件的MIME类型，例如：image/pjpeg，…..</li></ul></li></ul></li></ul></li></ul><h3 id="Servlet写法"><a href="#Servlet写法" class="headerlink" title="Servlet写法"></a>Servlet写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">ServletInputStream in = request.getInputStream();</span><br><span class="line">String s = IOUtils.toString(in);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里的 IOUtils 是 commons-io.jar 包，你需要手动导入到路径中<ul><li><code>这里的jar包，一定要放到lib 文件夹中，否则无效，我也不知道为啥</code></li></ul></li><li>使用 commons-fileupload.jar 和 commons-io.jar 工具包<ul><li>帮我们解析 request 中上传的数据</li><li>解析后的结果是一个表单项数据，封装到一个FileItem对象中</li><li>调用FileItem的方法即可获取数据</li></ul></li></ul><h3 id="上传三步"><a href="#上传三步" class="headerlink" title="上传三步"></a>上传三步</h3><ul><li>相关类<ol><li>工厂：DiskFileItemFactory    </li><li>解析器：ServletFileUpload</li><li>表单项：FileItem</li></ol></li><li>创建工厂<ul><li>DiskFileItemFactory factory = new DiskFileItemFactory();</li></ul></li><li>创建解析器<ul><li>ServletFileUpload sfu = new ServletFileUpload(factory);</li></ul></li><li>使用解析器来解析request，得到FileItem集合<ul><li>List&lt;FileItem&gt; fileItemList = sfu.parseRequest(request);</li></ul></li><li>FileItem 的 API<ul><li>boolean isFormField() 是否为普通表单项<ul><li>true 为普通表单项</li><li>false 文件表单项</li></ul></li><li>String getFileName()  返回当前表单项的名称</li><li>String getString(String charset) 返回表单项的值（不适用于文件表单项）</li><li>String getName() 返回上传的文件名称</li><li>long getSize() 返回上传文件的字节数</li><li>InputStream getInputStream() 返回对应文件的输入流</li><li>void write(File destFile) 将上传的文件内容保存到指定的文件中<ul><li>如果文件存在，则替换文件</li><li>如果文件不存在，则创建文件</li></ul></li></ul></li><li>Servlet文件，注意<code>这里导入的是 org.apache.commons.fileupload 包，并且io包和fileupload 包一定要放到WEB-INF 的lib中</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> up;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class upPic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/upPic"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">upPic</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">upPic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"get"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *上传三步</span></span><br><span class="line"><span class="comment"> *1. 得到工厂</span></span><br><span class="line"><span class="comment"> *2. 通过工厂创建解析器</span></span><br><span class="line"><span class="comment"> *3. 解析request，得到FileItem集合</span></span><br><span class="line"><span class="comment"> *4. 遍历FileItem集合，调用其API </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">ServletFileUpload sfu = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;FileItem&gt; fileItems = sfu.parseRequest(request);</span><br><span class="line"><span class="comment">// 我们这里明确知道只有两个表单项，所有就不便利数组了</span></span><br><span class="line"><span class="comment">//FileItem fil1 = fileItems.get(0);// 普通表单项</span></span><br><span class="line">FileItem fil2 = fileItems.get(<span class="number">1</span>);<span class="comment">// 上传的图片表单项</span></span><br><span class="line">System.out.println(<span class="string">"Content-Type : "</span> + fil2.getContentType());</span><br><span class="line">System.out.println(<span class="string">"size : "</span> + fil2.getSize());</span><br><span class="line">System.out.println(<span class="string">"filename : "</span> + fil2.getName());</span><br><span class="line">File picture = <span class="keyword">new</span> File(<span class="string">"/home/cong/picture.jpg"</span>);</span><br><span class="line">fil2.write(picture);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jsp文件</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"upPic"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;</span><br><span class="line">    照  片：&lt;input type=<span class="string">"file"</span> name=<span class="string">"picture"</span> /&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="上传的细节"><a href="#上传的细节" class="headerlink" title="上传的细节"></a>上传的细节</h3><ul><li>把上传的文件放到<code>WEB-INF</code>目录下<ul><li>如果没有把用户的文件存放到WEB-INF目录下，那么用户可以通过浏览器直接访问上传的文件，这个是非常危险的<ul><li>加入用户上传了一个a.jsp文件，再通过浏览器链接访问a.jsp，那么就会执行a.jsp，而如果jsp文件中有”shutdown -h now”，那么后果嘛</li></ul></li><li>通常我们会在WEB-INF目录下创建一个uploads目录，来存放上传的文件，而在Servlet中找到这个目录需要使用ServletContext 的 getRealPath(String) 方法<ul><li>ServletContext servletContext = this.getServletContext();</li><li>String savepath = servletContext.getRealPaht(“/WEB-INF/uploads”);</li></ul></li></ul></li><li>文件名称相关问题<ul><li>有点浏览器上传的文件名是绝对路径，这需要切割</li><li>乱码问题，文件名乱码<ul><li>request.serCharacterEncoding(“utf-8”)</li></ul></li><li>上传文件同名问题</li><li>目录打散问题<ul><li>一个目录不能存放过多文件</li><li>一般一个目录存放1000个文件就是上限</li><li>如果文件太多就会导致打开卡顿</li><li>打散方法很多：<ol><li>按 日期 生成 文件夹</li><li>按 首字母 分 文件夹</li></ol></li></ul></li><li>上传的单个文件的大小限制<ul><li>ServletFileUpload类的setFileSizeMax(long)就可以了</li><li>参数是上传文件的上限字节数</li><li>一旦文件超过上限就会抛出FileUploadBase.FileSizeLimitExceededException异常</li></ul></li><li>缓存大小与临时目录</li></ul></li></ul><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ul><li>下载就是向客户端响应字节数据<ul><li>原来响应的都是HTML字符数据</li><li>现在响应字节数据</li><li>把一个文件变成字节数组，使用response的流(outputstream)响应给浏览器</li></ul></li><li>下载的要求<ul><li>两个头，一个流<ul><li>头：响应头</li><li>流：字节流</li></ul></li><li>头1：Content-Type：<ul><li>你传递给客户端的文件是什么MIME类型</li><li>例如：image/pipeg</li></ul></li><li>头2：Content-Disposition：<ul><li>一般来说，如果不设置头，那么默认不弹出下载框</li><li>默认值为：inline，在浏览器窗口中打开，打不开就弹窗</li><li>修改为   “attachment;filename=***”    </li></ul></li><li>流：要下载的文件数据</li></ul></li></ul><h3 id="Servlet代码演示"><a href="#Servlet代码演示" class="headerlink" title="Servlet代码演示"></a>Servlet代码演示</h3><ul><li>Java代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.upload.pic;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.swing.filechooser.FileNameExtensionFilter;</span><br><span class="line"></span><br><span class="line">import org.apache.tomcat.util.http.fileupload.IOUtils;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class DownLoad</span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/DownLoad&quot;)</span><br><span class="line">public class DownLoad extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">       </span><br><span class="line">    /**</span><br><span class="line">     * @see HttpServlet#HttpServlet()</span><br><span class="line">     */</span><br><span class="line">    public DownLoad() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;get&quot;);</span><br><span class="line">/**</span><br><span class="line"> * 两个头一个流</span><br><span class="line"> * 1. content-type</span><br><span class="line"> * 2. content-dsidposition</span><br><span class="line"> * 3. 下载文件的数据流</span><br><span class="line"> */</span><br><span class="line">String wen_inf_path = getServletContext().getRealPath(&quot;/WEB-INF&quot;);</span><br><span class="line">String filename = &quot;3.Servlet获取到上传表单的数据.mp4&quot;;</span><br><span class="line">String filepath = wen_inf_path + &quot;/3.Servlet获取到上传表单的数据.mp4&quot;;</span><br><span class="line">filename = new String(filename.getBytes(&quot;GBK&quot;),&quot;ISO-8859-1&quot;);</span><br><span class="line">String contentType = this.getServletContext().getMimeType(filepath);//通过文件名称获取mime类型</span><br><span class="line">String contentDisposition = &quot;attachment;filename=&quot; + filename;//带中文则乱码，最好是英文</span><br><span class="line">System.out.println(filename);</span><br><span class="line">System.out.println(filepath);</span><br><span class="line">FileInputStream input = new FileInputStream(filepath);</span><br><span class="line"></span><br><span class="line">response.setHeader(&quot;Content-Type&quot;, contentType);</span><br><span class="line">response.setHeader(&quot;Content-Disposition&quot;, contentDisposition);</span><br><span class="line"></span><br><span class="line">// 获取绑定了客户端的流</span><br><span class="line">ServletOutputStream output = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">IOUtils.copy(input, output);</span><br><span class="line"></span><br><span class="line">input.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;post&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下载的细节"><a href="#下载的细节" class="headerlink" title="下载的细节"></a>下载的细节</h3><ul><li>显示在下载框中的中文名称会出现乱码<ul><li>IE浏览器会出乱码</li><li>火狐会出现乱码</li></ul></li><li>解决方案<ol><li>使用浏览器的编码<ul><li>Firefox 使用 Base64编码</li><li>其他大部分浏览器都是用 URL 编码</li></ul></li><li>通用方案<ul><li>filename = new String(filename.getBytes(“GBK”),”ISO-8859-1”);</li><li>虽然不懂为什么，但是就是有用</li><li>注意，上述代码中分 filepath 和 filename<ul><li>filepath 为 文件路径 不能 改变编码方式</li><li>filename 为 文件名称 可以 修改编码方式</li></ul></li></ul></li></ol></li></ul><h2 id="发送Mail"><a href="#发送Mail" class="headerlink" title="发送Mail"></a>发送Mail</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mail.send;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.AddressException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage.RecipientType;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMail</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendYourMail</span><span class="params">(String address)</span> <span class="keyword">throws</span> AddressException, MessagingException</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.setProperty(<span class="string">"mail.host"</span>, <span class="string">"smtp.163.com"</span>);</span><br><span class="line">properties.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);<span class="comment">// 制定验证为True 是否需要身份验证</span></span><br><span class="line">properties.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"SMTP"</span>);</span><br><span class="line"></span><br><span class="line">Authenticator auth = <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(<span class="string">"SZMT_TEAM"</span>, <span class="string">"szmt317"</span>);</span><br><span class="line">                <span class="comment">// 这个szmt317 不是我163的密码 而是我的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Session session = Session.getInstance(properties, auth);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑邮件</span></span><br><span class="line"></span><br><span class="line">MimeMessage msg = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">msg.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"SZMT_TEAM@163.com"</span>));<span class="comment">//设置发件人</span></span><br><span class="line">msg.setRecipients(RecipientType.TO, address);<span class="comment">//设置收件人，正常发送</span></span><br><span class="line">msg.setRecipients(RecipientType.CC, address);<span class="comment">//设置收件人，抄送（即再发送一份样的）</span></span><br><span class="line">msg.setRecipients(RecipientType.BCC, address);<span class="comment">//设置收件人，暗送</span></span><br><span class="line"></span><br><span class="line">msg.setSubject(<span class="string">"测试，测试，测试"</span>); <span class="comment">// 邮件的标题</span></span><br><span class="line">msg.setContent(<span class="string">"你的验证码是 ****"</span>, <span class="string">"text/html;charset=utf-8"</span>);<span class="comment">//邮件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送邮件</span></span><br><span class="line">Transport.send(msg);</span><br><span class="line">System.out.println(<span class="string">"发送成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里的问题就是 你的 163 邮箱需要开启服务<ul><li>设置 客户端授权密码 上述的 Authenticator 中并不是我的163账户密码，而是授权密码</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;真～Java基础&quot;&gt;&lt;a href=&quot;#真～Java基础&quot; class=&quot;headerlink&quot; title=&quot;真～Java基础&quot;&gt;&lt;/a&gt;真～Java基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java SE：Java Platform， Standard Editi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C#学习</title>
    <link href="http://yoursite.com/2018/12/22/C#/"/>
    <id>http://yoursite.com/2018/12/22/C#/</id>
    <published>2018-12-22T11:14:38.000Z</published>
    <updated>2018-12-19T14:33:49.676Z</updated>
    
    <content type="html"><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C"></a>C</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul><li><p>整型即整数</p></li><li><p>整型可以分为有符号和无符号整行</p><ul><li><p>有符号整型</p><ul><li>可以表示负数和正数</li></ul><ol><li>字节型    sbyte</li><li>短整型    short </li><li>整型        int</li><li>长整行    long</li></ol></li><li><p>无符号整型</p><ul><li>只能表示大于等于0的数</li></ul><ol><li>字节型    byte</li><li>短整型    ushort</li><li>整型    uint</li><li>长整型    ulong</li></ol></li></ul></li></ul><ul><li>有符号整型</li></ul><table><thead><tr><th style="text-align:center"><strong>整型</strong></th><th style="text-align:center"><strong>关键字</strong></th><th style="text-align:center"><strong>字节数</strong></th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">字节型</td><td style="text-align:center">sbyte</td><td style="text-align:center">1</td><td style="text-align:center">-128~127</td></tr><tr><td style="text-align:center">短整型</td><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-2^15~2^15-1</td></tr><tr><td style="text-align:center">整型</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2^31~2^31-1</td></tr><tr><td style="text-align:center">长整型</td><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-2^63~2^63-1</td></tr></tbody></table><ul><li>无符号整型<br>| <strong>整型</strong> | <strong>关键字</strong> | <strong>字节数</strong> | 取值范围 |<br>| :——: | :——–: | :——–: | :——: |<br>|  字节型  |    byte    |     1      |  0~255   |<br>|  短整型  |   ushort   |     2      | 0~2^16-1 |<br>|   整型   |    uint    |     4      | 0~2^32-1 |<br>|  长整型  |   ulong    |     8      | 0~2^64-1 |</li></ul><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul><li>单精度浮点型        float</li><li>双精度浮点型        double</li><li>高精度            decimal</li></ul><table><thead><tr><th style="text-align:center"><strong>浮点型</strong></th><th style="text-align:center"><strong>关键字</strong></th><th style="text-align:center"><strong>字节数</strong></th></tr></thead><tbody><tr><td style="text-align:center">单精度</td><td style="text-align:center">float</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">双精度</td><td style="text-align:center">double</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">高精度</td><td style="text-align:center">decimal</td><td style="text-align:center">16</td></tr></tbody></table><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><ul><li><p>布尔型    bool    1字节</p></li><li><p>只有两个值</p><ul><li>true</li><li>false</li></ul></li></ul><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><ul><li>字符型 char 两个字节</li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>用来表示内存中的一个数据</li><li>一个由字符数据下划线和@符号组成的一个有序列</li></ul><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>只能由数字字母下划线和@符号组成</li><li>不能已数字开头</li><li>如果包含@，那么@必须放在首位</li><li>不能与关键字重名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xiaoming符合</span><br><span class="line">xiao_ming符合</span><br><span class="line">xiaoming_9符合</span><br><span class="line">_xiaoming符合</span><br><span class="line">xiaoming@163符合</span><br><span class="line">1xiaoming符合</span><br><span class="line">INT符合</span><br></pre></td></tr></table></figure><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ol><li><p>望文知意</p><ul><li><p>username    用户名</p></li><li><p>password    密码</p></li><li><p>……这种</p></li></ul></li><li><p>遵循驼峰命名法</p><ol><li><p>如果一个标识符由多个单词组成，那么单词首字母都要大写</p><ul><li><p>UserName</p></li><li><p>UserID</p></li></ul></li><li><p>如果一个标识符由多个单词组成，那么从第二个单词开始，后面的单词首字母大写</p><ul><li>userName</li><li>userID</li></ul></li><li><p>默认使用小驼峰</p></li></ol></li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>标识符的组成部分也可以是汉字或者部分中文字符</li><li>不推荐使用汉字</li><li>少使用@来作为标识符的一部分</li></ul><h2 id="变量与常亮"><a href="#变量与常亮" class="headerlink" title="变量与常亮"></a>变量与常亮</h2><ul><li>如果一个标识符所表示的数据，在程序运行的过程中是可以被修改的，那么这个数据就是变量</li><li>程序运行中不能被修改的就是常亮 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace ConsolApplication&#123;</span><br><span class="line">    class Program&#123;</span><br><span class="line">        static void Main(String[] args)&#123;</span><br><span class="line">            Console.WriteLine(&quot;Hello World&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>using 表示应用命名空间</li><li>namespace 表示命名空间</li><li>class 代表一个类</li></ul><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 数据类型 标识符 </span><br><span class="line">int age;</span><br><span class="line">long time;</span><br><span class="line">bool flag = true;</span><br><span class="line">age = 10;</span><br><span class="line">time = 123412341234;</span><br><span class="line">// 数据类型 标识符 = 初始值</span><br><span class="line">int age = 10;</span><br><span class="line">double pi = 3.1315926535;</span><br><span class="line">// 声明多个变量</span><br><span class="line">int length, width, height;</span><br><span class="line">int length = 10, width = 10, height = 10;</span><br></pre></td></tr></table></figure><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li><code>必须声明的同时赋初值</code></li><li><code>一旦声明，未来的代码中不能更改</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// const关键字声明常量</span><br><span class="line">// 修饰的常量不能更改且必须赋初值</span><br><span class="line">const int PI = 3.1415926535;</span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ul><li>数据类型转换并不是把一个变量的类型直接转换成其他的类型</li><li>是生命一个要转型的变量，然后将变量的值给这个新的类型的变量赋值</li></ul><h3 id="自动类型转换（隐式类型转换）"><a href="#自动类型转换（隐式类型转换）" class="headerlink" title="自动类型转换（隐式类型转换）"></a>自动类型转换（隐式类型转换）</h3><ul><li>由数据范围小的数据类型转型为取值范围大的数据类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 自动类型转换的实例</span><br><span class="line">sbyte num0 = 10;</span><br><span class="line">int num1 = num0;</span><br><span class="line">// 自动完成不需要额外操作</span><br></pre></td></tr></table></figure><h3 id="强制类型转换（显式类型转换）"><a href="#强制类型转换（显式类型转换）" class="headerlink" title="强制类型转换（显式类型转换）"></a>强制类型转换（显式类型转换）</h3><ul><li>由数据范围大的数据类型转换为取值范围小的数据类型<ul><li>long -&gt; int</li><li>int -&gt; byte</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 强制类型转换</span><br><span class="line">int num2 = 1111;</span><br><span class="line">sbyte num3 = num2; // 此处会报错</span><br><span class="line">sbyte num3 = (sbyte)num2; // 加上要转换的类型，强制类型转换</span><br></pre></td></tr></table></figure><ul><li>sbyte 和 short 在参与运算的时候，会自动转成int型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sbyte n1 = 10, n2 = 20;</span><br><span class="line">sbyte result = n1+n2; // 报错，因为上述的 sbyte 在参与运算的时候返回的是int型</span><br><span class="line">sbyte result = (sbyte)(n1 + n2); // 对</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;C&quot;&gt;&lt;a href=&quot;#C&quot; class=&quot;headerlink&quot; title=&quot;C&quot;&gt;&lt;/a&gt;C&lt;/h1&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据类型&quot;&gt;&lt;/a&gt;数据类型&lt;/h2&gt;&lt;h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatis学习</title>
    <link href="http://yoursite.com/2018/11/22/MyBatis/"/>
    <id>http://yoursite.com/2018/11/22/MyBatis/</id>
    <published>2018-11-22T11:13:24.000Z</published>
    <updated>2018-12-01T05:33:08.690Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><ul><li>MyBatis 不同与 Hiberanat</li><li>MyBatis 比较轻 而 Hiberanat 比较重<br><code>这里的 轻 代表的是 方便学习，开发，维护，简单</code></li></ul><h2 id="初识MyBatis"><a href="#初识MyBatis" class="headerlink" title="初识MyBatis"></a>初识MyBatis</h2><h3 id="MyBatis介绍"><a href="#MyBatis介绍" class="headerlink" title="MyBatis介绍"></a>MyBatis介绍</h3><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p>iBATIS = “internet” + “abatis” 的组合<br>是Apache公司的一个开源项目，这个项目是做软件加密的<br>abatis 翻译过来是 路障，铁丝网的意思<br>后来转型成为一个基于Java的持久层框架</p><ul><li>持久层<ul><li>Java中对象有两种状态<ul><li>瞬态</li><li>持久态</li></ul></li><li>瞬态<ul><li>new 了一个对象 用完之后垃圾回收</li><li>对象中的属性状态没有保存</li></ul></li><li>持久态<ul><li>对象的状态属性保持住了</li><li>保存的方法又很多种 ：文件，数据库等</li></ul></li><li>如果保存在数据库中，我们可以用JDBC来访问，操作</li><li>但是JDBC不是很方便，这样就产生了一种框架，叫做持久层框架    </li></ul></li></ul><p>iBatis 后来改名为 MyBatis<br>因为跳槽，从Apache 跳槽到 Google 再到 Github</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>开源的优秀持久层框架</li><li>轻</li><li>SQL语句和代码分离</li><li>面向配置的编程（面向切片的编程）</li><li>增强程序的可维护性，可扩展性</li><li>良好支持复杂数据映射</li><li>使用JDBC我们会拼装SQL语句，这种语句并不安全，容易造成SQL注入</li><li>MyBatis 使用 动态SQL 技术，替换拼装SQL语句</li></ul><h3 id="MyBatis环境搭建"><a href="#MyBatis环境搭建" class="headerlink" title="MyBatis环境搭建"></a>MyBatis环境搭建</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">MyBatis下载地址</a> </p><ul><li><p>解压压缩文件</p><ul><li>其中mybatis-<em>.</em>.*.jar 是 MyBatis 的主jar包</li><li>lib/ 文件夹是他的部分依赖包，毕竟曾经是Apache的项目</li><li>mybatis-<em>.</em>.*.pdf 是 说明文档<h4 id="导入工程"><a href="#导入工程" class="headerlink" title="导入工程"></a>导入工程</h4></li></ul></li><li><p>导入 mybatis-<em>.</em>.*.jar 包</p></li><li>导入 lib 中相关的 jar</li><li>导入 mysql 数据库 针对于 JDBC 的jar包</li></ul><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><ul><li><p>为什么配置日志<br>  -当我调试或者观察程序的时候，是通过输出的SQL语句看一下程序的执行状况</p><ul><li>MyBatis 是通过 日志来完成的，所以要配置日志</li></ul></li><li><p>加入日志配置文件log4.properties</p></li><li>改写日志输出级别为debug级别<ul><li>MyBatis 在日志输出的时候，SQL语句一定实在debug级别才能输出</li><li>如果是inform级，则不输出</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">log4j.rootLogger=DEBUG, Console</span><br><span class="line"></span><br><span class="line">#Console</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.java.sql.ResultSet=INFO</span><br><span class="line">log4j.logger.org.apache=INFO</span><br><span class="line">log4j.logger.java.sql.Connection=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure><h3 id="MyBatis工作流程"><a href="#MyBatis工作流程" class="headerlink" title="MyBatis工作流程"></a>MyBatis工作流程</h3><h4 id="工作流程的步骤"><a href="#工作流程的步骤" class="headerlink" title="工作流程的步骤"></a>工作流程的步骤</h4><ol><li>读取配置文件<ul><li>读取的是基本配置文件</li><li>包含的是连数据库的相关信息</li></ul></li><li>生成SqlSessionFactory<ul><li>Sqlsession的工厂，用于建立与数据库之间的会话</li></ul></li><li>建立SqlSession<ul><li>用于执行Sql语句</li></ul></li><li>SqlSession 调用MyBatis提供的API</li><li>查询MAP配置<ul><li>Map配置文件里面存放的是sql语句</li></ul></li><li>返回结果<ul><li>不同的sql语句返回不同的结果</li></ul></li><li>关闭SqlSession</li></ol><h4 id="工作流程的配置文件"><a href="#工作流程的配置文件" class="headerlink" title="工作流程的配置文件"></a>工作流程的配置文件</h4><ul><li>基本配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span> # 一个environments 中有多个 environment </span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span> # 一个environment 代表连接的一个数据库 里面的是数据库的信息</span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span> #事务由谁来管理 这里是JDBC管理</span><br><span class="line">      <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span> #是否用连接池 或者 第三方child</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span> #驱动</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jikebook"</span>/&gt;</span> #链接路径</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span> # 用户名</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>/&gt;</span> # 密码</span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"jike/book/map/jikeUser.xml"</span>/&gt;</span>　＃　</span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>包含着连数据库的基本信息</p><ul><li>链接数据库的信息<ul><li><environments></environments></li><li>就是环境，封装的就是连数据库的信息</li></ul></li><li><p>map配置文件的数据位置</p><ul><li><mappers></mappers></li><li>映射map配置文件的路径信息</li></ul></li><li><p>map配置文件   </p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span>  <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"jike.book.pojo.JiKeUser"</span>&gt;</span></span><br><span class="line">    select * from jikeUser where id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SqlSessionFactory-SqlSession"><a href="#SqlSessionFactory-SqlSession" class="headerlink" title="SqlSessionFactory, SqlSession"></a>SqlSessionFactory, SqlSession</h4><ul><li>SqlSessionFactory代表着跟数据库之间的连接</li><li>连上去之后自然要进行各种各样的操作</li><li>各种各样的操作是由SqlSession去执行的</li><li><p>SqlSession是由SQLSessionFactory来建立的</p></li><li><p>生命周期</p><ul><li>SqlSessionFactory的生命周期是程序级的<ul><li>一般一个MyBatis程序只有一个SqlSessionFactory</li><li>程序开始的时候建立，结束的时候才会消亡</li></ul></li><li>SqlSession 是过程级的<ul><li>比如在一个方法当中会建立一个SqlSession，执行完后SqlSession就应该关闭了</li></ul></li></ul></li><li><p>建立的代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">SqlSessionFactory sqlMapper = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line"># reader 是一个输入流，是基本配置文件的路径的流</span><br><span class="line">SqlSession session = sqlMapper.openSession();</span><br></pre></td></tr></table></figure><h4 id="Map文件"><a href="#Map文件" class="headerlink" title="Map文件"></a>Map文件</h4><h5 id="基本配置文件引用map文件"><a href="#基本配置文件引用map文件" class="headerlink" title="基本配置文件引用map文件"></a>基本配置文件引用map文件</h5><ul><li>相对路径引用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"test/book/map/TestUser.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>绝对路径引用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/sqlmaps/AuthorMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>包路径引用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.Test.mybatis.mapperinterface"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="什么是map文件"><a href="#什么是map文件" class="headerlink" title="什么是map文件"></a>什么是map文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Test.book.pojo.TestUser"</span>&gt;</span></span><br><span class="line">select * from TestUser where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述标签中的id，这是找到这个sql语句的标示</li><li>上述标签中的parameterType是参数类型</li><li>上述标签中的resultType指的是返回类型</li><li>上述的sql语句中id = #{id}，’#’后面的内容代表一个参数</li></ul><h4 id="看实战，学操作，我有知识我自豪"><a href="#看实战，学操作，我有知识我自豪" class="headerlink" title="看实战，学操作，我有知识我自豪"></a>看实战，学操作，我有知识我自豪</h4><h5 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">create database jikebook;</span><br><span class="line"></span><br><span class="line">use jikebook;</span><br><span class="line"></span><br><span class="line"><span class="function">create table <span class="title">jikeUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">id <span class="keyword">int</span> not <span class="keyword">null</span> auto_increment,</span></span></span><br><span class="line"><span class="function"><span class="params">    userName varchar(<span class="number">20</span>)</span> ,</span></span><br><span class="line"><span class="function">    password <span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span> ,</span></span><br><span class="line"><span class="function">    primary <span class="title">key</span><span class="params">(id)</span></span></span><br><span class="line"><span class="function">)engine</span>=InnoDB <span class="keyword">default</span> charset=utf8;</span><br><span class="line"></span><br><span class="line"><span class="function">insert into <span class="title">jikeUser</span><span class="params">(id, userName, password)</span></span></span><br><span class="line"><span class="function">values</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">1</span>, <span class="string">'hello world'</span>, <span class="string">''</span>)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="查询代码"><a href="#查询代码" class="headerlink" title="查询代码"></a>查询代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TestUser temp = session.selectOne("findById", 1); # 第一个参数是map配置中的id，第二个参数是 mysql数据库中 的id</span><br><span class="line">System.out.println(<span class="string">"name = "</span> +  temp.getUseName());</span><br></pre></td></tr></table></figure><ul><li>jikeUser.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test.book.map"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"test.book.pojo.TestUser"</span>&gt;</span></span><br><span class="line">select * from jikeUser where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MyBatisConfig.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jikebook"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"test/book/map/jikeUser.xml"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>TestUser.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test.book.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MainTest.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test.book.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String reource = <span class="string">"test/book/map/MyBatisConfig.xml"</span>;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">SqlSession session;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = Resources.getResourceAsReader(reource);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"111"</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">System.out.println(<span class="string">"222"</span>);</span><br><span class="line">session =sqlSessionFactory.openSession();</span><br><span class="line">TestUser temp = session.selectOne(<span class="string">"findById"</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(temp.getUserName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis-基础操作"><a href="#MyBatis-基础操作" class="headerlink" title="MyBatis 基础操作"></a>MyBatis 基础操作</h2><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><ul><li>影响行数</li></ul><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"TestUser"</span> <span class="attr">statementType</span>=<span class="string">"PREPARED"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">insert into JikeUser (userName, password) values(#&#123;userName, jdbcType=VARCHAR&#125;, #&#123;password, jdbcType=VARCHAR&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述代码中<ul><li>StatementType=”PERPARED” 代表这是一个 预处理的SQL语句</li><li>parameterType=”TestUser” 代表传入的类<ul><li>这里传入的应该是一个全路径名称，即com.jike.book.JikeUser </li><li>这里使用了typeAliases 标记 来定义了别名 简化了代码的书写</li></ul></li><li>keyProperty 代表 哪一个 参数 是主键</li></ul></li></ul><p><code>上一个大类中完成的基本配置中加上</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"TestUser"</span> <span class="attr">type</span>=<span class="string">"test.book.pojo.TestUser"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>着重强调！！！<br>着重强调！！！<br>着重强调！！！  </p></blockquote><ul><li><p>Alias要写在environments前面，先定义别名，在配置环境，否则会报错  </p></li><li><p>切记 切记</p></li></ul><h5 id="下面介绍代码"><a href="#下面介绍代码" class="headerlink" title="下面介绍代码"></a>下面介绍代码</h5><ul><li><p>TestUser类依旧不变</p></li><li><p>MainTest类修改</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test.book.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String reource = <span class="string">"test/book/map/MyBatisConfig.xml"</span>;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">SqlSession session;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = Resources.getResourceAsReader(reource);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">session =sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestUser testUser = <span class="keyword">new</span> TestUser();</span><br><span class="line">testUser.setUserName(<span class="string">"laoziniubi"</span>);</span><br><span class="line">testUser.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">session.insert(<span class="string">"insertUser"</span>, testUser);</span><br><span class="line">session.commit();<span class="comment">//提交sql语句</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jikeUser.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test.book.map"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"test.book.pojo.TestUser"</span>&gt;</span></span><br><span class="line">select * from jikeUser where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"TestUser"</span> <span class="attr">statementType</span>=<span class="string">"PREPARED"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">insert into jikeUser (userName, password) values(#&#123;userName&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MyBatisConfig.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"TestUser"</span> <span class="attr">type</span>=<span class="string">"test.book.pojo.TestUser"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jikebook"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"test/book/map/jikeUser.xml"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"TestUser"</span>&gt;</span></span><br><span class="line">update jikeUser set userName=#&#123;userName, jdbcType=VARCHAR&#125;,password=#&#123;password,jdbcType=VARCHAR&#125; where id=#&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述代码中<ul><li>parameterType 仍然利用别名</li><li>jdbcType 是 MyBatis 中 自动类型转换的一种设定<ul><li>java当中的数据类型 和 数据库当中的数据类型需要一个转换</li><li>这种转换 往往是自动完成的，但当不能自动转换的时候，就需要进行手动转换</li></ul></li></ul></li></ul><h5 id="下面介绍代码-1"><a href="#下面介绍代码-1" class="headerlink" title="下面介绍代码"></a>下面介绍代码</h5><ul><li>就不介绍xml了，和之前一样，就加上 update 标签就行了</li><li>写一下调试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestUser testUser = <span class="keyword">new</span> TestUser();</span><br><span class="line">testUser.setUserName(<span class="string">"laoziniubi"</span>);</span><br><span class="line">testUser.setPassword(<span class="string">"666666"</span>);</span><br><span class="line">testUser.setId(<span class="number">2</span>);</span><br><span class="line">session.update(<span class="string">"updateUser"</span>, testUser);</span><br><span class="line">session.commit();<span class="comment">//提交sql语句</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delete-使用注解方式"><a href="#delete-使用注解方式" class="headerlink" title="delete(使用注解方式)"></a>delete(使用注解方式)</h4><ul><li>在map.xml的包中新建一个interface接口，名为JikeUserMapInterface</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test.book.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JikeUserMapInterface</span> </span>&#123;</span><br><span class="line"><span class="meta">@Delete</span>(<span class="string">"delete from jikeUser where id=#&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUder</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在基本配置文件的mapper 标签中添加  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"test/book/map/jikeUser.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"test.book.map.JikeUserMapInterface"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在TestMain调试文件中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">JikeUserMapInterface jkumi = session.getMapper(JikeUserMapInterface.class);</span><br><span class="line">jkumi.deleteUder(<span class="number">1</span>);<span class="comment">//删除id为1的记录</span></span><br><span class="line">session.commit();<span class="comment">//提交sql语句</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>返回集合</li></ul><h4 id="Select-参数-如何操作-如何得到结果集"><a href="#Select-参数-如何操作-如何得到结果集" class="headerlink" title="Select 参数 如何操作 如何得到结果集"></a>Select 参数 如何操作 如何得到结果集</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">parameterMap</span>=<span class="string">"hashmap"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span> <span class="attr">resultMap</span>=<span class="string">"personResultMap"</span> <span class="attr">flushCache</span>=<span class="string">"false"</span> <span class="attr">userCache</span>=<span class="string">"true"</span> <span class="attr">timeout</span>=<span class="string">"10000"</span> <span class="attr">fetchSize</span>=<span class="string">"256"</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>在命名空间中唯一的标识符，可以被用来引用这条语句</td></tr><tr><td>parameterType</td><td>将会传入这条语句的参数类的完全限定名或类名</td></tr><tr><td>parameterMap</td><td>这是引用外部parameterMap的已经被废弃的方法。使用内敛参数映射和parameterType属性</td></tr><tr><td>resultType</td><td>从这条语句中返回的期望类型的类和完全限定名或别名。注意集合情形，那应该是集合可以包含的类型，而不能是集合。使用resultType或resultMa，但不能同时使用</td></tr><tr><td>resultMap</td><td>命名引用外部的resultMap。返回map是MyBatis最具力量的特性，对其有一个很好的理解的话，许多复杂映射的清醒就能被解决了。</td></tr><tr><td>flushCache</td><td>将其设为true，不能语句什么时候被调用，都会导致缓存被清空。默认值为false</td></tr><tr><td>userCache</td><td>将其设置为true，将会导致本条语句的结果被缓存。默认值为false</td></tr><tr><td>timeout</td><td>设置驱动程序等待数据库返回请求结果，并抛出异常时间的最大值。默认值不设定，驱动自行处理</td></tr><tr><td>fetchSize</td><td>这是暗示驱动程序每次批量返回的结果函数。默认值不设置，程序自行控制</td></tr><tr><td>statementType</td><td>STATEMENT，PREPARED或CALLABLE的一种。这会让MyBatis选择使用Statement,PreparedStatement或Callable 的一种</td></tr><tr><td>resultSetType</td><td>FORWARD_ONLY，SCROLL_SENSITIVE,SCROLL_INSTENSITIVE中的一种。默认是不设置，驱动自行处理</td></tr></tbody></table><ul><li>parameterType封装：hashmap</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"loginSelect"</span> <span class="attr">resultType</span>=<span class="string">"TestUser"</span> <span class="attr">parameterType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">select * from jikeUser where userName=#&#123;userName&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 老样子 把上述代码放在map.xml文件中</p></blockquote><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap(String, String) hm = <span class="keyword">new</span> HashMap();</span><br><span class="line">hm.put(<span class="string">"userName"</span>, <span class="string">"laoziniubi"</span>);</span><br><span class="line">hm.put(<span class="string">"password"</span>, <span class="string">"666666"</span>);</span><br></pre></td></tr></table></figure><ul><li>上述的 “userName” 和 “password” 不仅是map的键，同时是 上述 select 标签中传入的参数名称</li><li><p>调用session 方法传入 hashmap</p><ul><li>TestUser ontemp = session.selectOne(“loginSelect”,     hm);</li></ul></li><li><p>调试代码 <code>(使用hashmap)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HashMap&lt;String, String&gt; hm = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">hm.put(<span class="string">"userName"</span>, <span class="string">"laoziniubi"</span>);</span><br><span class="line">hm.put(<span class="string">"password"</span>,<span class="string">"666666"</span>);</span><br><span class="line">TestUser testUser = session.selectOne(<span class="string">"loginSelect"</span>,hm);</span><br><span class="line"><span class="keyword">if</span> (testUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(testUser.getUserName() + <span class="string">" 欢迎回来"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>调试代码 <code>(使用对象)</code></p><ul><li>对象参数自动匹配属性</li><li>如果对象属性与列名不一样用别名</li></ul></li><li><p>这里 要修改xml文件的select标签</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"login2"</span> <span class="attr">resultType</span>=<span class="string">"TestUser"</span> <span class="attr">parameterType</span>=<span class="string">"TestUser"</span> &gt;</span></span><br><span class="line">select * from jikeUser where userName=#&#123;userName&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后是TestMain</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestUser testUser = <span class="keyword">new</span> TestUser();</span><br><span class="line">testUser.setUserName(<span class="string">"laoziniubi"</span>);</span><br><span class="line">testUser.setPassword(<span class="string">"666666"</span>);</span><br><span class="line">TestUser getone = session.selectOne(<span class="string">"login2"</span>, testUser);</span><br><span class="line"><span class="keyword">if</span> (getone != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(getone.getUserName() + <span class="string">" 欢迎回来"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回多个查询"><a href="#返回多个查询" class="headerlink" title="返回多个查询"></a>返回多个查询</h4><ul><li>上述只是返回一个对象的情况，如果是返回多个对象呢？<ul><li>MyBatis会返回一个list</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectTestUserList"</span> <span class="attr">resultType</span>=<span class="string">"TestUser"</span>&gt;</span></span><br><span class="line">select * from jikeUser </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试函数中调用List 来接受list<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;TestUser&gt; ap = session.selectList(<span class="string">"selectTestUserList"</span>);</span><br><span class="line"><span class="keyword">for</span> (TestUser testUser : ap) &#123;</span><br><span class="line">System.out.println(testUser.getUserName() + <span class="string">" 欢迎回来"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="resultType-与-resultMap"><a href="#resultType-与-resultMap" class="headerlink" title="resultType 与 resultMap"></a>resultType 与 resultMap</h4><ul><li><p>resultType 与 resultMap 一样用于返回结果操作</p><ul><li>但是，resultType 与 resultMap 只能用其中一个</li></ul></li><li><p>区别是 resultMap 中可以解决一些比较复杂的映射问题</p><ul><li>例如：一个对象含有另一个对象的引用</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span> = <span class="string">"TestUserMap"</span> <span class="attr">type</span>= <span class="string">"TestUser"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>上述中，如果类中的参数名与数据库中的参数名不一致的时候，可以使用resultMap来改变映射关系</p></li><li><p>使用resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultMap</span>=<span class="string">"TestUserMap"</span>&gt;</span></span><br><span class="line">select id,userName,password from jikeUser</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>上述代码中，resultMap 指明了使用 哪个resultMap</p></li><li><p>会按照resultMap的设定来返回对应的值</p></li><li><p>TestMain中的测试代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;TestUser&gt; ap = session.selectList(<span class="string">"selectUsers"</span>);</span><br><span class="line"><span class="keyword">for</span> (TestUser testUser : ap) &#123;</span><br><span class="line">System.out.println(testUser.getUserName() + <span class="string">" 欢迎回来"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###事物处理</p><h4 id="事务处理配置"><a href="#事务处理配置" class="headerlink" title="事务处理配置"></a>事务处理配置</h4><ul><li><p>MyBatis的事务处理又两个选项</p><ol><li>JDBC<ul><li>JDBC代表的事</li><li>务处理由JDBC完成</li></ul></li><li>MANAGED<ul><li>MANAGED代表的事务处理由第三方的一些插件完成，例如Spring</li></ul></li></ol></li><li><p>事务处理的配置写在<code>基本配置文件当中</code></p><blockquote><p>在基本配置文件当中（就是那个调用map.xml的xml文件啦）<br>有个 transactionManager 标签，tpye属性当中就是上述的JDBC或者MANAGED</p></blockquote></li></ul><h4 id="事务处理方法"><a href="#事务处理方法" class="headerlink" title="事务处理方法"></a>事务处理方法</h4><ul><li>MyBatis JDBC事务管理（典型代码）</li></ul><ol><li>关闭自动提交<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">session = sqlMapper.openSession(<span class="keyword">false</span>); <span class="comment">// 关闭自动提交</span></span><br><span class="line">操作 balabalbala.....</span><br><span class="line">session.commit();<span class="comment">// 提交事务 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">session.close(); <span class="comment">//关闭session</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;MyBatis 不同与 Hiberanat&lt;/li&gt;
&lt;li&gt;MyBatis 比较轻 而
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2018/11/20/Ajax/"/>
    <id>http://yoursite.com/2018/11/20/Ajax/</id>
    <published>2018-11-20T13:12:01.000Z</published>
    <updated>2018-12-02T03:17:35.648Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h2><pre><code>允许浏览器与服务器通信而无须刷新当前页面的技术都叫Ajax异步的Js和XML的通信</code></pre><h3 id="不用刷新整个页面就可以与服务器通讯的方法"><a href="#不用刷新整个页面就可以与服务器通讯的方法" class="headerlink" title="不用刷新整个页面就可以与服务器通讯的方法"></a>不用刷新整个页面就可以与服务器通讯的方法</h3><pre><code>1. Flash2. Java appleet3. 框架：如果使用一组框架构造了网页，可以只更新其中一个框架，而不用惊动整个页面4. 隐藏的iframe5. XMLHttpRequest:该对象是对JavaScript的一个扩展，可使网页与服务器进行通信。   是创建Ajax应用的最佳选择，实际上通常把Ajax当成XMLHttpRequest对象的代名词</code></pre><p><img src="https://i.imgur.com/1TQnuU0.png" alt=""></p><h3 id="Ajax工具包"><a href="#Ajax工具包" class="headerlink" title="Ajax工具包"></a>Ajax工具包</h3><pre><code>Ajax并不是一项新技术，它实际上是几种技术，每种技术各尽其职，以一种全新的方式聚合在一起：1. 服务器端语言：服务器必须具备向浏览器发送特定信息的能力。Ajax与服务器语言无关2. XMLL:Ajax程序需要某种格式化的格式来在服务器和客户端之间传递信息，XML是其中一种选择3. XHTML：使用扩展HTML和CSS标准化呈现4. DOM：实现动态交互和显示5. 使用Javascript绑定和处理所有数据6. 使用XMLHTTP组件XMLHttpRequests对象进行异步数据读取</code></pre><h3 id="Ajax的缺陷"><a href="#Ajax的缺陷" class="headerlink" title="Ajax的缺陷"></a>Ajax的缺陷</h3><pre><code>1. 由JavaScript和Ajax引擎会导致引擎的兼容性问题（现在少）2. 页面局部刷新，导致 后退功能不好用3. 对流媒体的支持没有Flash和JavaApple好4. 一些手持设备支持性差（现在少）</code></pre><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><pre><code>function getHTTPObject(){    var xhr = false;    if(window.XMLHttpRequest){        xhr = new XMLHttpRequest();    } else if(window.ActiveXObject()){        xhr = new ActiveXObject(&quot;Microsoft.XMLHttp&quot;);    }    return xhr;}</code></pre><ul><li>大多数浏览器都支持 <code>var xmlhttp = new XMLHttpRequest()</code></li><li>IE6.0： <code>var xmlhttp = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;)</code></li><li>IE5.5及更早版本的IE： <code>var xmlHttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</code></li><li>对window.XMLHttpRequest的调用会返回一个对象或null，如果XMLHttpRequest对象存在，啧把xhr的值设为该对象的新实例</li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="以下用于发送："><a href="#以下用于发送：" class="headerlink" title="以下用于发送："></a>以下用于发送：</h4><ol><li>abort()停止当前请求</li><li>getAllResponseHeader() 把HTTP请求的所有响应首部作为键值对返回</li><li>getResponseHeader(“header”); 返回指定首部的串值</li><li>open(“method”,”url”,bool);建立对服务器的调用，Method参数可以是put或post，url可以是相对url也可以是绝对url, 请求是否为异步请求</li><li>send(content) 向服务器发送请求，没有为null，最好send里面有东西（就算是null）</li><li>setRequestHeader(“header”,”value”);设置首部及其值，在设置任何首部之前必须先调用open()</li></ol><h4 id="以下用于请求："><a href="#以下用于请求：" class="headerlink" title="以下用于请求："></a>以下用于请求：</h4><ol><li>onreadystatechange    每个状态改变的是都会出发这个事件处理器，通常会条用一个JavaScript函数</li><li>readyState    请求的状态，有五个可取值：0=未初始化，1=正在加载，2=已经加载，3=交互中，4=完成</li><li>responseText    服务器的响应，表示为一个串</li><li>responseXML    服务器的响应，表示为XML，这个对象可以解析为Dom对象</li><li>status    服务器的HTTP状态码</li><li>statusText    HTTP状态码对应的文本（OK或NotFount等）</li></ol><h3 id="一个简单的案例"><a href="#一个简单的案例" class="headerlink" title="一个简单的案例"></a>一个简单的案例</h3><pre><code>目标，不刷新，不跳转界面，只alert 出 a.xml&lt;script&gt;    window.onload = funtion(){    //获取a节点    document.getElementByTagName(&quot;a&quot;)[0].onclick = function(){        // 创建一个XMLHttpRequest对象        var request = new XMLHttpRequest();        // 准备发送请求的数据：url加上时间戳        var url = this.href + &quot;?time=&quot;+new Date();        var method = &quot;GET&quot;;        // 调用XMLHttpRequest 对象的open方法        request.open(method, url);        // 调用XMLHttpRequest 对象的send方法        request.send(null);        // 为 XMLHttpRequest 对象添加onreadystatechange        // 判断响应是否完成：XMLHttpRequest对象的readyState属性为4的时候        // 再判断响应是否可用：XMLHttpReqeust对象status属性值为200        request.onreadystaechange = function(){            if(request.readyState == 4){                if(request.status == 200 || request.status == 304)                alert(request.responseText);            }        }        //返回false，取消原有功能，也就是说返回false后，不会跳转页面        return false;    }        }&lt;/script&gt;&lt;html&gt;    &lt;a href=&quot;a.xml&quot;&gt;跳转&lt;/a&gt;&lt;/html&gt;</code></pre><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><ul><li>利用XMLHttpRequest实例与服务器进行通信包含一下三个关键部分：</li></ul><ol><li>onreadystatechange 事件处理函数</li><li>open 方法</li><li>send 方法</li></ol><h4 id="onreadystatechange"><a href="#onreadystatechange" class="headerlink" title="onreadystatechange"></a>onreadystatechange</h4><pre><code>该事件处理函数由服务器出发，而不是用户在Ajax执行过程中，服务器会通知客户端当前的通信状态这依靠更新XMLhttpRequest对象的readyState来实现改变readyState属性是服务器对客户端连续操作的一种方式每次readyState属性的改变都会触发readystatechange事件</code></pre><h4 id="open-methdo-url-asynch"><a href="#open-methdo-url-asynch" class="headerlink" title="open(methdo, url, asynch)"></a>open(methdo, url, asynch)</h4><ul><li><p>XMlHttpRequest对象的open方法允许程序员用一个Ajax调用向服务器发送请求</p></li><li><p>method：请求类型，类似“GET”或“POST”的字符串。</p></li><li><p>在某些情况下，有些浏览器会把多个XMLHttpRequest请求的结果缓存到用一个URL，</p></li><li><p>如果每个请求的相应不同，但是得到的结果却会一样。所以此时加一个 时间戳 到url最后，以确保url的唯一性</p></li><li><p>url：路径字符串，指向你所请求的服务器上的那个文件，可以是绝对路径，也可以是相对路径</p></li><li><p>asynch：表示是否要异步传输，默认是true</p></li></ul><h4 id="send-data"><a href="#send-data" class="headerlink" title="send(data)"></a>send(data)</h4><ol><li>open方法定义了Ajax请求的一些细节，send方法可以为已经待命的请求发送指令</li><li>data：将要发送给服务器的字符串</li><li>若用”GET”请求，则不用发任何数据，即request.send(null);</li><li>当向send()方法提供参数时，要确保open()中指定的方法是”POST”,如果没有数据发送，则使用null</li></ol><h4 id="setRequestHeader-header-value"><a href="#setRequestHeader-header-value" class="headerlink" title="setRequestHeader(header, value)"></a>setRequestHeader(header, value)</h4><ol><li>当浏览器向服务器请求页面时，它会伴随这个请求发送一组首部信息，当这些首部信息是一系列描述请求的元数据（metadata）。首部信息来声明一个请求时get还是post</li><li>Ajax请求中，发送首部信息的工作可以是由setRequestHeader完成</li><li>参数header:首部的名字；参数value:首部的值</li><li>如果用POST请求向服务器发送数据，需要将 “Content-type”的首部设置为 “application/x-www-form-urlencoded”。<ul><li>他会告知服务器正在发送数据，并且数据已经符合url编码了</li></ul></li><li>该方法必须在open()之后才能调用</li></ol><h5 id="post示例"><a href="#post示例" class="headerlink" title="post示例"></a>post示例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var url = "../jsp/forumServlet";</span><br><span class="line">var nameValue = trim(document.forumiddform.name.value);</span><br><span class="line">xhr.open("POST", url);</span><br><span class="line">xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');</span><br><span class="line">xhr.send("method=name_isExist" + "&amp;name" + nameValue);</span><br></pre></td></tr></table></figure><h3 id="接收响应"><a href="#接收响应" class="headerlink" title="接收响应"></a>接收响应</h3><h4 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h4><ol><li>readyState 属性表示Ajax请求的当前状态<ol start="0"><li>0代表未初始化，没调用open方法</li><li>1代表正在加载，open()调用了而send()没有调用</li><li>2代表send()调用了，请求开始</li><li>3代表交互中，服务器正在发送响应</li><li>4代表完成</li></ol></li><li>readyState值的变化会出发 readystatechange 事件，如果把onreadystaechange事件赋给函数，则每次变换调用函数</li><li>readyState的值因浏览器不同有所差异，但是请求结束时，每个浏览器都会把 readyState 的值设为 4</li></ol><h4 id="status"><a href="#status" class="headerlink" title="status"></a>status</h4><pre><code>服务器发送的每一个响应也都有首部信息常用的状态码及其意义：1. 404 没有页面2. 403 禁止访问3. 500 内部服务器错误4. 200 一切正常5. 304 没有被修改在 XMLHttpRequest 对象中，服务器发送的状态码都保存在status属性中。</code></pre><h4 id="responseText"><a href="#responseText" class="headerlink" title="responseText"></a>responseText</h4><pre><code>XMLHttpRequest 的 responseText 属性包含了从服务器发送的数据。它是一个HTML，xml或普通文本当 readyState 属性值变成 4 时，responseText 属性才可以用，表明Ajax请求已经结束</code></pre><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><pre><code>在服务器端Ajax时一门与语言无关的技术，在业务逻辑层使用何种服务器端语言都可以从服务器端接收数据的时候，那些数据必须以浏览器能够理解的格式来发送。服务器端的编程语言只能以如下三种格式返回数据：    1. XML    2. JSON    3. HTML</code></pre><h3 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h3><pre><code>HTML由一些普通文本组成，如果服务器通过XMLHttpRequest发送HTML，文本将存储在responseText属性中不必从responseText属性中读取数据。他已经是希望的格式，可以直接将它插入到页面中插入HTML代码最简单的方法是更新这个元素的innerHTML属性</code></pre><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;id&quot;).innerHTML = request.responseText;</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><pre><code>1. 从服务器端发送的HTML代码在浏览器端不需要用Javascript解析2. HTML的可读性好3. HTML代码块与innerHTML 属性搭配，效率高</code></pre><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. 如需要通过Ajax更新一篇文档的多个部分，HTML不合适2. innnerHTML并非DOM标准（问题不大，现在浏览器大都兼容）</code></pre><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><pre><code>1. 需要进行解析，之后再插入到HTML中2. 获得的 responseHTML 不能直接使用，必须先创建对应的节点作为容器    result = request.responseXML;3. xml可以使用DOM的方式进行解析    var name = result.getElementsByTagName(&quot;key&quot;)[0].firstChild.nodeValue;    var aNode = document.createElement(&quot;a&quot;);//创建a标签    aNode.appendChild(document.createTextNode(name));    aNode.href = &quot;url&quot;;</code></pre><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><pre><code>1. XMl是一种通用的数据格式2. 不必把数据强加到以定义好的格式中，而是要为数据自定义合适的标记3. 利用DOM可以完全掌控文档</code></pre><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. 当浏览器接收到长的XML文件后，DOM解析可能会很复杂2. 如果文档来于服务器，就必须得到保证文档含有正确的首部信息。若文档类型不正确，那么responseXML的值将是空的</code></pre><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li><p>一种简单那的数据格式，比XML更轻巧。</p><ul><li>SON是JavaScript原生格式，这意味着JavaScript中处理JSON数据必须要任何特殊的API 或 工具包</li></ul></li><li><p>JSON的规则很简单：对象是一个无序的” ‘名称/值’对 “的集合。</p><ul><li>一个对象以”{“ 开始， “}”结束。每个“名称” 后跟一个 “:”冒号；“’名称/值’对”之间使用 “,” 逗号分隔</li></ul></li><li><p>Json用冒号来赋值</p></li><li>赋值语句用逗号分开</li><li>整个对象用大括号封装</li><li>可用大括号分装嵌套数据</li><li>对象描述中存储的数据可以是字符串，数字，布尔值，甚至函数方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObjec = &#123;</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"test"</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">12</span>,</span><br><span class="line"><span class="string">"address"</span>:&#123;<span class="string">"city"</span>:<span class="string">"wuhan"</span>, <span class="string">"contury"</span>:<span class="string">"chind"</span>&#125;</span><br><span class="line"><span class="string">"teaching"</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"this is a funtion"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(jsonObjec.name);</span><br><span class="line">jsonObjec.teaching();</span><br></pre></td></tr></table></figure><ul><li>其实嘛，json可以用jar包打包，不用自己写</li></ul><h4 id="字符串转为json对象"><a href="#字符串转为json对象" class="headerlink" title="字符串转为json对象"></a>字符串转为json对象</h4><ul><li>Json保存在responseText中</li><li><p>需要借助JavaScript的eval语句</p><ul><li>函数eval会把一个字符串当做它的参数，然后这个字符串会被当做JavaScript代码来执行</li><li>var JsonResponse = xmlHttp.responseText;</li><li>var personJson = eval(“(“ + JsonResponse + “)”);</li><li>上述的 左括号和右括号 一定要加</li></ul></li><li><p>Json 提供了json.js 包，下载<a href="http://www.json.org/json.js" target="_blank" rel="noopener">http://www.json.org/json.js</a> 后，使用parseJSON()方法将字符串解析</p><ul><li>var JsonResponse = xmlHttp.responseText;</li><li>personJson = JsonResponse.parseJSON();</li></ul></li></ul><h2 id="看实战学操作"><a href="#看实战学操作" class="headerlink" title="看实战学操作"></a>看实战学操作</h2><h3 id="发送post请求，判断账户名是否存在"><a href="#发送post请求，判断账户名是否存在" class="headerlink" title="发送post请求，判断账户名是否存在"></a>发送post请求，判断账户名是否存在</h3><p><code>如果发送请求时带有参数，一般都用post请求</code></p><ul><li>请求头有个 <code>默认值</code> 是 Content-Type: application/x-www-form-urlencoded</li><li><p>open : xmlHttp.open(“post”, …..);</p></li><li><p>添加一步：设置Content-Type请求头：</p><blockquote><p>xmlHttp.setRequeestHeader(“Conten-Type”,”application/x-www-form-urlencoded”);</p></blockquote></li><li><p>send : xmlHttp.send(“username=zhanshan&amp;password=123”);</p></li></ul><h4 id="JSP的写法"><a href="#JSP的写法" class="headerlink" title="JSP的写法"></a>JSP的写法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">cong</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">18-11-22</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> 下午<span class="attr">3:48</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.1.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"can1"</span> <span class="attr">style</span>=<span class="string">"color: red"</span> &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>密 码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">createXMLHttpRequest</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxm12.XMLHTTP"</span>);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">"浏览器太几把差了"</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">throw</span> e;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        username.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 当失去焦点的时候 触发函数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取异步对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xmlHttp = createXMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 打开链接</span></span></span><br><span class="line"><span class="javascript">            xmlHttp.open(<span class="string">"post"</span>, <span class="string">"Exist"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="javascript">            xmlHttp.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送请求 给出请求体</span></span></span><br><span class="line"><span class="javascript">            xmlHttp.send(<span class="string">"username="</span> + username.value);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 给xmlHttp的onreadystatechange事件注册监听</span></span></span><br><span class="line"><span class="javascript">            xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xmlHttp.readyState === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (xmlHttp.status === <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 4 代表 运行完成  200 代表状态码</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> text = xmlHttp.responseText;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> can1 = <span class="built_in">document</span>.getElementById(<span class="string">"can1"</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (text == <span class="string">"1"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            can1.innerHTML = <span class="string">"用户名已存在"</span></span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            can1.innerHTML = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">"false"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Servlet写法"><a href="#Servlet写法" class="headerlink" title="Servlet写法"></a>Servlet写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ajax.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class Exist</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Exist"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exist</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// response.getWriter().append("Served at: ").append(request.getContextPath());</span></span><br><span class="line">System.out.println(<span class="string">"get"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// doGet(request, response);</span></span><br><span class="line">System.out.println(<span class="string">"post"</span>);</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charaset=utf-8"</span>);</span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line"><span class="keyword">if</span>(username.equalsIgnoreCase(<span class="string">"lc"</span>)) &#123;</span><br><span class="line">response.getWriter().print(<span class="string">"1"</span>);</span><br><span class="line">System.out.println(<span class="string">"1"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">response.getWriter().print(<span class="string">"0"</span>);</span><br><span class="line">System.out.println(<span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应内容为XML"><a href="#响应内容为XML" class="headerlink" title="响应内容为XML"></a>响应内容为XML</h3><ul><li>首先就要设置响应头</li><li>服务器端：<ul><li>Contentype 设置为 text/xml;charset=utf-8</li></ul></li><li>客户端：<ul><li>var doc = xmlHttp.responseXML; //得到的是Documented对象</li><li>获取服务器的响应结果</li><li>使用dom运用</li></ul></li></ul><h2 id="JQuery的Ajax"><a href="#JQuery的Ajax" class="headerlink" title="JQuery的Ajax"></a>JQuery的Ajax</h2><ul><li>jQuery对Ajax操作进行了封装<ul><li>在jQuery中最底层的方式是 $.ajax()</li><li>第二层是load()，$.get() 和 $.post()</li><li>第三层是$.getScript()和$.getJSON()</li></ul></li></ul><h3 id="ajax-方法（底层接口）"><a href="#ajax-方法（底层接口）" class="headerlink" title="ajax 方法（底层接口）"></a>ajax 方法（底层接口）</h3><ul><li>$.ajax(url,setttring)<ul><li>url 参数地址</li><li>setttring 例如下面（包括大括号都是）<ul><li>{type:’post’, data : {id : 1, name : “test”} ,beforeSend:function(xhr){},success:function (data){},error(xhr){},conplete:function(){}}</li><li>data 为 服务端的响应体</li><li>success 为 响应成功的时候的回调函数<ul><li>其中 data 的数据类型 会通过 服务端的 设置 自动转换</li></ul></li><li>data 为 传递参数<ul><li>post 通过请求体传递</li><li>get 通过 url 传递</li></ul></li><li>通过设置dataType 设置 返回的参数类型</li><li>error 请求不正常(状态码不为200)的时候执行的函数</li><li>complete 请求完成(readystatus 到达 4 )时执行的回调函数</li><li>beforeSend 在 执行 xmlHtpp.open 之前调用的回调函数</li></ul></li><li>setting 还有其他参数 放在下面的链接里面咯<ul><li><a href="https://www.jquery123.com/jQuery.ajax/" target="_blank" rel="noopener">jQuery.Ajax</a> </li></ul></li><li>其实嘛 你也可以吧 url 放入 setting 里面 </li></ul></li></ul><h4 id="为什么使用jQuery呢"><a href="#为什么使用jQuery呢" class="headerlink" title="为什么使用jQuery呢"></a>为什么使用jQuery呢</h4><p><code>在访问一个不存在的页面时 会返回一个404页面</code></p><ul><li>如果用原生js<ul><li>返回的是一个404页面代码 </li><li>即 一串 html 代码</li></ul></li><li>如果是jQuery<ul><li>返回空 </li></ul></li></ul><h3 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h3><ul><li>load()<ul><li><code>载入远程HTML文件代码并插入至DOM中</code></li><li>load(url,[data],[callback]);</li><li>url 待装入HTML网页的网址，必须是JSON格式，一旦url不为空，那么请求方式就默认改为POST</li><li>data（可选） 发送至服务器的 key/value 数据，在jQuery1.3中也可以接受一个字符串</li><li>callback（可选）载入成功时回调函数 </li><li>如果只需要加载目标HTML网页内的某些元素，则可以通过load()方法的URL参数来达到目的<ul><li>通过URL参数制定选择符就可以方便的从加载过来的HTML文档中挑选内容</li><li>语法结构是 “url selector”(注意：url 和 选择器 中间有个空格)</li><li>如果返回的是&lt;h2&gt;文本1&lt;/h2&gt;&lt;h3&gt;文本2&lt;/h3&gt;</li><li>如果url  后面 加上 “ h2” ，那么就只会得到 h2 部分</li></ul></li><li>传递方式： load()方法的传递参数根据参数data来自动自定<ul><li>如果没有参数传递，采用GET方式传递，否则POST</li></ul></li><li>对于必须在加载完才能继续的操作，load()方法提供了回调函数<ul><li>该回调函数有三个参数<ul><li>data 代表请求返回内容</li><li>textStatus 代表请求状态</li><li>XMLHttpRequest 代表请求状态</li></ul></li></ul></li><li>任何一个节点都可以使用load()方法来加载Ajax，结果直接插入到html节点中</li></ul></li></ul><h3 id="get和post-方法"><a href="#get和post-方法" class="headerlink" title="get和post 方法"></a>get和post 方法</h3><ul><li><p>$.get() （或$.post()）方法</p></li><li><p>$.get() 方法使用GET方式来进行异步请求</p><ul><li>它的结构是 $.get(url, [data], [callback], [type]);</li><li>url，String类型，请求HTML页面的URL地址</li><li>data，Object类型，发送到服务器的key/value数据会作为Query/String附加到URL中</li><li>callback， function类型，载入成功时的回调函数</li><li>type，String类型，服务器返回内容的格式，包括xml,html,script,json等 </li></ul></li><li><p>$.get()方法的回调函数只有两个参数</p><ul><li>data， 代表返回的内容，可以是一个XML文档，JSON文件，HTMl片段等</li><li>textstatus代表请求状态，其值可能是<ol><li>succuss</li><li>error</li><li>notmodify</li><li>timeout</li></ol></li></ul></li><li>$.get()和$.post()方法是jQuery中的全局函数，而find()等方法都是对jQuery对象进行操作的方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="keyword">this</span>.href;</span><br><span class="line"><span class="keyword">var</span> args= &#123;<span class="string">"time"</span> : <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">$.post(url, args, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> name = $(data).find(<span class="string">"name"</span>).text();</span><br><span class="line"><span class="keyword">var</span> email = $(data).find(<span class="string">"email"</span>).text();</span><br><span class="line"><span class="keyword">var</span> website = $(data).find(<span class="string">"website"</span>).text();</span><br><span class="line">&#125;, <span class="string">"JSON"</span>);</span><br><span class="line"></span><br><span class="line">$.getJSON(url, args, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; <span class="comment">// 这里直接通过getJSON 将 data 转为JSON格式</span></span><br><span class="line"><span class="keyword">var</span> name = data.person.name;</span><br><span class="line"><span class="keyword">var</span> email = data.person.email;</span><br><span class="line"><span class="keyword">var</span> website = data.person.website;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Ajax的全局事件"><a href="#Ajax的全局事件" class="headerlink" title="Ajax的全局事件"></a>Ajax的全局事件</h3><ul><li><p>所谓全局事件，就是在所有ajax调用的时候，都会执行的事件</p><ul><li>例如：我有一个请求开始的动画，我整个页面写了100个Ajax</li><li>有一天 我想把所有的动画全部改了 我要改100个</li><li>全局事件就是用在这个地方的</li></ul></li><li><p>.ajaxComplete()</p><ul><li>当Ajax请求完成后注册一个回调函数。这是一个 AjaxEvent。</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxError()</p><ul><li>Ajax请求出错时注册一个回调处理函数，这是一个 Ajax Event。</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxSend()</p><ul><li>在Ajax请求发送之前绑定一个要执行的函数，这是一个 Ajax Event.</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxStart()</p><ul><li>在AJAX 请求刚开始时执行一个处理函数。 这是一个 Ajax Event.</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxStop()</p><ul><li>在AJAX 请求完成时执行一个处理函数。 这是一个 Ajax Event。</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxSuccess()</p><ul><li>绑定一个函数当 Ajax 请求成功完成时执行。 这是一个Ajax Event.</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxComplete(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> $( <span class="string">".log"</span> ).text( <span class="string">"Triggered ajaxComplete handler."</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery-Servlet实现-验证用户名是否存在"><a href="#jQuery-Servlet实现-验证用户名是否存在" class="headerlink" title="jQuery + Servlet实现 验证用户名是否存在"></a>jQuery + Servlet实现 验证用户名是否存在</h3><ul><li>HTML 写法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>检查用户名是否注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/JS/jquery-1.12.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#usernmae"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//当value值改变时触发函数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> val = $(<span class="keyword">this</span>).val();<span class="comment">//获取值</span></span></span><br><span class="line"><span class="javascript">val = $.trim(val);<span class="comment">//去除前后的空格</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(val != <span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url = <span class="string">"$&#123;pageContext.request.contextPath&#125;/Exist"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> args = &#123;<span class="string">"username"</span> : val, <span class="string">"time"</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span></span><br><span class="line"><span class="javascript">$.post(url, args, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#message"</span>).html(data);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">UserName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"usernmae"</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Servlet写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.ajax.test;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class Exist</span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/Exist&quot;)</span><br><span class="line">public class Exist extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">       </span><br><span class="line">    /**</span><br><span class="line">     * @see HttpServlet#HttpServlet()</span><br><span class="line">     */</span><br><span class="line">    public Exist() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;get&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;post&quot;);</span><br><span class="line">String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">List&lt;String&gt; userNames = Arrays.asList(&quot;AAA&quot;,&quot;BBB&quot;,&quot;CCC&quot;);</span><br><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">response.setContentType(&quot;text/html;charaset=utf-8&quot;);</span><br><span class="line">if (userNames.contains(username)) &#123;</span><br><span class="line">response.getWriter().print(&quot;改用户名以存在&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">response.getWriter().print(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;请求已发送&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用jackson包去生成json"><a href="#使用jackson包去生成json" class="headerlink" title="使用jackson包去生成json"></a>使用jackson包去生成json</h2><ol><li>导入jar包</li><li>创建ObjectMappter 对象<ul><li>ObjectMapper mapper = new ObjectMapper();</li></ul></li><li>调用 mapper 的 writerValueAsString() 方法 把一个对象转为一个 Json 字符串</li></ol><h3 id="先写好一个class"><a href="#先写好一个class" class="headerlink" title="先写好一个class"></a>先写好一个class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, Stirng id)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBrithday</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"2018.12.01"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hubei-wuhan"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写一个main类去调用上述Customer"><a href="#写一个main类去调用上述Customer" class="headerlink" title="写一个main类去调用上述Customer"></a>写一个main类去调用上述Customer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonGenerationException, JsonMappingException, IOE......</span>&#123;</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer(<span class="string">"Name"</span>, <span class="string">"1001"</span>);</span><br><span class="line">String jsonStr = mapper.writeValueAsStirng(customer);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>注意</code></p><ul><li>JackSon 使用 getter 方法来定位Json 对象的属性</li><li>自行尝试上述的代码，你会发现 没有定义为 string 的 address 和 birthday 也会出现在最后的json中</li><li>因为 addrss 和 birthday 都 定义了 get 方法</li><li>即 只要是定义了 get 方法的，其返回值都会被放入json对象中</li><li>如果 getName() 修改 为 getCustName()，那么最后放入json的键的名字就是 “csunstName”</li></ul></li><li><p>可以通过在CLASS中添加注解来使某些get方法不放入json对象中</p><ul><li>@JsonIgnore 放在 get 函数前面</li></ul></li></ul><h2 id="jQuery-block-ui"><a href="#jQuery-block-ui" class="headerlink" title="jQuery block ui"></a>jQuery block ui</h2><p>jQuery BlockUI 插件可以在不同锁定浏览器的同时，模拟同步模式下发起Ajax请求的行为<br>该插件激活时，会阻止用户在页面进行的操作，直到插件被关闭<br>BlockUI通过向DOM中添加元素实现其外观和组织用户交互的行为。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://malsup.github.io/min/jquery.blockUI.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阻止页面交互"><a href="#阻止页面交互" class="headerlink" title="阻止页面交互"></a>阻止页面交互</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.blockUI();</span><br></pre></td></tr></table></figure><h3 id="自定义消息阻塞UI"><a href="#自定义消息阻塞UI" class="headerlink" title="自定义消息阻塞UI"></a>自定义消息阻塞UI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.blockUI(&#123;message:&apos;&lt;h1&gt;&lt;img src=&quot;busy.gif&quot; /&gt;Just a moment...&lt;/h1&gt;&apos;&#125;);</span><br></pre></td></tr></table></figure><h3 id="自定义样式阻塞UI"><a href="#自定义样式阻塞UI" class="headerlink" title="自定义样式阻塞UI"></a>自定义样式阻塞UI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.blockUI(&#123;css:&#123;backgroundColor: &apos;red&apos;; color:&apos;#fff&apos;&#125;&#125;);</span><br></pre></td></tr></table></figure><h3 id="解除对页面的遮罩"><a href="#解除对页面的遮罩" class="headerlink" title="解除对页面的遮罩"></a>解除对页面的遮罩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.unblockUI();</span><br></pre></td></tr></table></figure><h3 id="使用缺省设置对所有的ajax请求都使用UI遮罩"><a href="#使用缺省设置对所有的ajax请求都使用UI遮罩" class="headerlink" title="使用缺省设置对所有的ajax请求都使用UI遮罩"></a>使用缺省设置对所有的ajax请求都使用UI遮罩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(document).ajaxStart($.blockUI).ajaxStop($.unblockUI);</span><br></pre></td></tr></table></figure><h3 id="学习学习"><a href="#学习学习" class="headerlink" title="学习学习"></a>学习学习</h3><p><a href="好东西">http://bookshadow.com/weblog/2014/09/26/jquery-blockui-js-introduction/</a> </p><h4 id="全局覆盖"><a href="#全局覆盖" class="headerlink" title="全局覆盖"></a>全局覆盖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// change message border</span><br><span class="line">$.blockUI.defaults.css.border = &apos;5px solid red&apos;;</span><br><span class="line"></span><br><span class="line">// make fadeOut effect shorter</span><br><span class="line">$.blockUI.defaults.fadeOut = 200;</span><br></pre></td></tr></table></figure><h4 id="局部覆盖"><a href="#局部覆盖" class="headerlink" title="局部覆盖"></a>局部覆盖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// change message border</span><br><span class="line">$.blockUI(&#123; css: &#123; border = &apos;5px solid red&apos;&#125; &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// make fadeOut effect shorter</span><br><span class="line">$.unblockUI(&#123; fadeOut: 200 &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// use a different message</span><br><span class="line">$.blockUI(&#123; message: &apos;Hold on!&apos; &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// use a different message</span><br><span class="line">$(&apos;#myDiv&apos;).block(&#123; message: &apos;Processing...&apos; &#125;);</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>xmlHttp.response 和 xmlHttp.responseText 都是获取响应<ul><li>responseText 获取的永远是以文本格式，字符串形式的响应体</li><li>response 会 根据 responseType的变化而变化<ul><li>xmlHttp.responseType = “json” 则 response 则为 json 格式</li><li>通过代码告诉请求代理对象服务器端响应的是JSON对象 </li></ul></li></ul></li></ul><h3 id="模板引擎的使用（这里用的是art-template）"><a href="#模板引擎的使用（这里用的是art-template）" class="headerlink" title="模板引擎的使用（这里用的是art-template）"></a>模板引擎的使用（这里用的是art-template）</h3><ul><li>首先我们要选择模板引擎<ul><li>市面上的模板引擎很多<ul><li>art-template（国产）</li><li>Handlebars（最火）</li><li>ejs</li><li>doT</li><li>swig（不维护了）</li><li>……</li></ul></li></ul></li><li>下载模板引擎JS文件</li><li>引入到页面中<ul><li>&lt;script src=”js/template-web.js”&gt;&lt;/script&gt;</li></ul></li><li>准备一个模板</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script id = <span class="string">"tmple"</span> type=<span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 如果 type 不为 text/javascript 那么 标签内部的内容不会作为 js语句 执行</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ul><li>准备一个数据</li><li>通过模板引擎的JS文件提供的一个函数/方法 将模板和数据整合的到渲染结果HTML</li><li>将渲染结果的HTML设置到某个元素的innderHTML中</li></ul><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><ul><li>跨域可以说Ajax没有一点关系，也可以说与Ajax有着绝对的联系</li></ul><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><pre><code>同源策略是浏览器的一种安全策略所谓同源是指：域名，协议，端口 完全相同只有同源的地址才可以通过Ajax的方式请求不同源地址之间，默认不能相互进行Ajax请求不同源地址之间的请求我们称之为跨域请求</code></pre><p>不同源则报错：<font style="color:red">No ‘Access-Control-Allow-Origin’ header is present on the requested resource</font></p><ul><li>翻译过来就是 目标地址 不允许不同源的地址对其进行Ajax操作<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Ajax&quot;&gt;&lt;a href=&quot;#什么是Ajax&quot; class=&quot;headerlink&quot; title=&quot;什么是Ajax&quot;&gt;&lt;/a&gt;什么是Ajax&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;允许浏览器与服务器通信而无须刷新当前页面的技术都叫Ajax
异步的Js和XML的通信
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cocos2dx基础</title>
    <link href="http://yoursite.com/2018/11/04/Cocos2dx%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/11/04/Cocos2dx基础/</id>
    <published>2018-11-04T11:43:40.000Z</published>
    <updated>2018-12-24T04:55:31.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cocos2dx-网络通信"><a href="#Cocos2dx-网络通信" class="headerlink" title="Cocos2dx-网络通信"></a>Cocos2dx-网络通信</h1><ol><li>Socket通讯</li><li>http协议</li><li>WebSocket协议     </li></ol><ul><li>Cocos2d-x封装了3个类来处理HTTP请求<ul><li>HttpRequest</li><li>HttpClient</li><li>HttpResponse</li></ul></li><li>他们在命名空间cocos2d::network中定义</li><li>WebSocket protocol是HTML5一种新的协议<ul><li>实现了浏览器和服务器全双工通信</li><li>实现浏览器和服务器的即时通讯</li></ul></li></ul><h2 id="使用Http协议进行网络通信"><a href="#使用Http协议进行网络通信" class="headerlink" title="使用Http协议进行网络通信"></a>使用Http协议进行网络通信</h2><ol><li>HttpRequest</li><li>HttpClient</li><li>HttpRespose</li></ol><ul><li>在使用上述三个类的时候，必须遵守一定的流程<ol><li>创建HttpRequest实例</li><li>设置请求方式-Get/Post等</li><li>设置请求地址和发送数据</li><li>设置响应回调函数，在回调函数中处理获取的数据</li><li>创建HttpClient实例，发送请求</li><li>释放连接</li></ol></li></ul><h3 id="HttpRequest"><a href="#HttpRequest" class="headerlink" title="HttpRequest"></a>HttpRequest</h3><ul><li>是一种数据类型</li><li><p>提供了一些定义或获取HTTP请求的参数的方法</p></li><li><p>常用方法</p><ul><li>设置请求连接<ul><li>void setUrl(const char *url)</li></ul></li><li>设置请求类型<ul><li>void setRequestType(Type type)</li><li>Type是一个枚举类型</li><li>enum class Type{<ul><li>GET,</li><li>POST,</li><li>PUT,</li><li>DELETE,</li><li>UNKOW,</li></ul></li><li>};</li></ul></li><li>设置回调函数<ul><li>void setResponseCallback(Ref *pTarget, SEL_HttpResponse pSelector)</li></ul></li><li>设置请求的数据，参数buffer是提交的数据，len是请求数据的长度<ul><li>void serRequestData(const char *buffer, unsigned int len)</li></ul></li></ul></li></ul><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><ul><li>在创建完HttpRequest之后，就需要创建HttpClient对象</li><li>HttpClient对象控制请求相关的参数<ul><li>发送请求</li><li>设置请求超时时间</li><li>……</li></ul></li><li>使用单例模式，是唯一实例</li><li>常用方法<ul><li>发送请求<ul><li>send(Http Request* request)</li></ul></li><li>设置连接超时时间<ul><li>setTimeoutForConnect(int value)</li></ul></li></ul></li></ul><h3 id="HttpRespose"><a href="#HttpRespose" class="headerlink" title="HttpRespose"></a>HttpRespose</h3><ul><li>包含服务器返回的数据等信息</li><li>使用HTTPResponse提供的方法可获取这些数据<ul><li>获取请求返回的数据<ul><li>std::vector<char>* getResponseData();</char></li></ul></li><li>获取返回状态（200,300,404,500…）<ul><li>getResponseState()</li></ul></li><li>判断是否返回成功<ul><li>issucced()</li></ul></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"network/HttpRequest.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"network/HttpClient.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"network/HttpResponse.h"</span></span></span><br><span class="line"><span class="comment">// 引入名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d::network;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取HttpRequest对象</span></span><br><span class="line"><span class="keyword">auto</span> request = <span class="keyword">new</span> HttpRequest();</span><br><span class="line"><span class="comment">// 设置请求连接</span></span><br><span class="line">request-&gt;setUrl(<span class="string">"http://httpbin.org/ip"</span>);</span><br><span class="line"><span class="comment">// 设置请求方式</span></span><br><span class="line">request-&gt;setRequestType(HttpRequest::Type::GET);</span><br><span class="line"><span class="comment">// 设置发送数据</span></span><br><span class="line"><span class="keyword">char</span> data[<span class="number">50</span>] = <span class="string">"data"</span>;</span><br><span class="line">request-&gt;setRequestData(data, <span class="built_in">strlen</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line">request-&gt;setResponseCallback(CC_CALLBACK_2(HelloWorld::ConnetIntnet,<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取唯一的clien实例</span></span><br><span class="line"><span class="keyword">auto</span> client = HttpClient::getInstance();</span><br><span class="line"><span class="comment">// 设置超时时间</span></span><br><span class="line">client-&gt;setTimeoutForConnect(<span class="number">60</span>);</span><br><span class="line"><span class="comment">// 设置读取时间</span></span><br><span class="line">client-&gt;setTimeoutForRead(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">client-&gt;send(request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HelloWorld::ConnetIntnet(HttpClient * client, HttpResponse * response)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"response code = %d"</span>, response-&gt;getResponseCode());</span><br><span class="line"><span class="keyword">if</span> (response-&gt;isSucceed())&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; *data = response-&gt;getResponseData();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stringstream</span> oss;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data-&gt;size(); i++) &#123;</span><br><span class="line">oss &lt;&lt; (*data)[i];</span><br><span class="line">&#125;</span><br><span class="line">CCLOG(<span class="string">" response data is %s"</span>, oss.str().c_str());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">CCLOG(<span class="string">"error msg is : %s"</span>, response-&gt;getErrorBuffer());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><ul><li>很简单</li><li>修改上述的部分代码即可</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">request-&gt;setUrl(<span class="string">"http://httpbin.org/post"</span>);</span><br><span class="line"><span class="comment">// 设置请求方式</span></span><br><span class="line">request-&gt;setRequestType(HttpRequest::Type::POST);</span><br><span class="line"><span class="comment">// 设置发送数据</span></span><br><span class="line"><span class="keyword">char</span> data[<span class="number">50</span>] = <span class="string">"controller=cocos2d&amp;username=test"</span>;</span><br><span class="line">request-&gt;setRequestData(data, <span class="built_in">strlen</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后加上</span></span><br><span class="line">request-&gt;release();</span><br></pre></td></tr></table></figure><ul><li>观察输出结构<ul><li>form 表单中 controller 就是 cocos2d，username 是 test</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">response code = 200</span><br><span class="line"> response data is &#123;</span><br><span class="line">  "args": &#123;&#125;, </span><br><span class="line">  "data": "", </span><br><span class="line">  "files": &#123;&#125;, </span><br><span class="line">  "form": &#123;</span><br><span class="line">    "controller": "cocos2d", </span><br><span class="line">    "username": "test"</span><br><span class="line">  &#125;, </span><br><span class="line">  "headers": &#123;</span><br><span class="line">    "Accept": "*/*", </span><br><span class="line">    "Accept-Encoding": "identity", </span><br><span class="line">    "Connection": "close", </span><br><span class="line">    "Content-Length": "32", </span><br><span class="line">    "Content-Type": "application/x-www-form-urlencoded", </span><br><span class="line">    "Host": "httpbin.org"</span><br><span class="line">  &#125;, </span><br><span class="line">  "json": null, </span><br><span class="line">  "origin": "61.136.151.254", </span><br><span class="line">  "url": "http://httpbin.org/post"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置Content-Type"><a href="#设置Content-Type" class="headerlink" title="设置Content-Type"></a>设置Content-Type</h4><ul><li><p>POST请求需要设置 Content-type的格式</p><ul><li>application/html 或者 xml 或 json</li><li>默认为text/html</li></ul></li><li><p>一般来说 Content-Type:application/html;charset=uft-8</p></li></ul><h4 id="设置请求头信息"><a href="#设置请求头信息" class="headerlink" title="设置请求头信息"></a>设置请求头信息</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">set</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; header;</span><br><span class="line">header.push_back(<span class="string">"Content-Type:application/html;charset=utf-8"</span>);</span><br><span class="line">request-&gt;setHeaders(header);</span><br><span class="line"><span class="comment">// 具体情况具体分析吧，有的服务器使用的是XML，有的是HTML，有的是Json</span></span><br></pre></td></tr></table></figure><h2 id="使用WebSocket发送请求"><a href="#使用WebSocket发送请求" class="headerlink" title="使用WebSocket发送请求"></a>使用WebSocket发送请求</h2><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><ul><li>WebSocket类了跟websocket相关操作的方法。他的作用包括<ol><li>创建socket对象<ul><li>new 方法</li></ul></li><li>向服务器发送数据，可以是文本数据，也可以是二进制数据<ul><li>send方法</li></ul></li><li>半段连接状态</li><li>等等</li></ol></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorCode</span>&#123;</span></span><br><span class="line">TIME_OUT,<span class="comment">// 连接超时</span></span><br><span class="line">CONNECTION_FAILURE, <span class="comment">// 连接失败</span></span><br><span class="line">UNKNOW, <span class="comment">// 为止错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cocos2d::network::WebSocket* wsSendText = <span class="keyword">new</span> network::WebSocket();</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"></span><br><span class="line">wsSendText-&gt;init(*<span class="keyword">this</span>, <span class="string">"ws://echo.websocket.org"</span>);</span><br><span class="line"><span class="comment">// 初始化请求地址</span></span><br><span class="line"></span><br><span class="line">weSendText-&gt;send(<span class="string">"hello WebSocket, I'm a text message"</span>);</span><br><span class="line"><span class="comment">// 发送数据</span></span><br></pre></td></tr></table></figure><h3 id="WebSocket-Delegete"><a href="#WebSocket-Delegete" class="headerlink" title="WebSocket::Delegete"></a>WebSocket::Delegete</h3><ul><li>类似Socket</li><li>WebSocket::Delegete提供了四个纯虚函数</li><li>在使用WebSocket时，要先继承Delegete类，实现四个纯虚函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(WebSocket* ws)</span></span>;</span><br><span class="line"><span class="comment">// 当打开websocket连接时调用</span></span><br><span class="line"><span class="comment">// 即WebSocket new 出来的时候调用的函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(WebSocket* ws, <span class="keyword">const</span> Data&amp; data)</span></span>;</span><br><span class="line"><span class="comment">// 当接收到数据时调用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(WebSocket* ws)</span></span>;</span><br><span class="line"><span class="comment">// 当关闭连接时调用</span></span><br><span class="line"></span><br><span class="line"><span class="function">voirtual <span class="keyword">void</span> <span class="title">onError</span><span class="params">(WebSocket* ws, <span class="keyword">const</span> ErrorCode&amp; error)</span></span>;</span><br><span class="line"><span class="comment">// 当发送数据但没有建立连接，或者收到断开连接信号时调用</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wstest = <span class="keyword">new</span> WebSocket();</span><br><span class="line">wstest-&gt;init(*<span class="keyword">this</span>,<span class="string">"ws://echo.websocket.org"</span>);</span><br><span class="line">wstest-&gt;send(<span class="string">"hello world"</span>);</span><br><span class="line">wstest-&gt;close();</span><br></pre></td></tr></table></figure><h1 id="Box2D物理引擎在Cocos的应用"><a href="#Box2D物理引擎在Cocos的应用" class="headerlink" title="Box2D物理引擎在Cocos的应用"></a>Box2D物理引擎在Cocos的应用</h1><ul><li>为了能够使用BOX2D，所以需要在vs中配置<ul><li>右键工程名，选择属性</li><li>在常规中 设置 附加包含目录（第一个）<ul><li>修改 $(EngineRoot)external\chipmunk\include\chipmunk </li><li>为 $(EngineRoot)external\Box2D\include\</li></ul></li><li>在 预处理 器中 设置 预处理器定义<ul><li>修改 CC_ENABLE_CHIPMUNK_INTEGRATION= 1</li><li>为 CC_ENABLE_BOX2D_INTEGRATION= 1</li></ul></li></ul></li></ul><h2 id="创建世界，设置边界"><a href="#创建世界，设置边界" class="headerlink" title="创建世界，设置边界"></a>创建世界，设置边界</h2><ul><li>HelloWorld.cpp文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HelloWorldScene.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SimpleAudioEngine.h"</span></span></span><br><span class="line"></span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line">Scene* HelloWorld::createScene()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> HelloWorld::create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelloWorld::~HelloWorld()</span><br><span class="line">&#123;</span><br><span class="line">CC_SAFE_DELETE(world);<span class="comment">//删除对象 并指向一个NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">problemLoading</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Error while loading: %s\n"</span>, filename);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Depending on how you compiled you might have to add 'Resources/' in front of filenames in HelloWorldScene.cpp\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> HelloWorld::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !Scene::init() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;initpjysics();</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;scheduleUpdate();</span><br><span class="line"></span><br><span class="line">EventListenerTouchOneByOne *listener = EventListenerTouchOneByOne::create();</span><br><span class="line">listener-&gt;onTouchBegan = CC_CALLBACK_2(HelloWorld::onTouchBegan, <span class="keyword">this</span>);</span><br><span class="line">_eventDispatcher-&gt;addEventListenerWithSceneGraphPriority(listener, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> visibleSize = Director::getInstance()-&gt;getVisibleSize();</span><br><span class="line">    Vec2 origin = Director::getInstance()-&gt;getVisibleOrigin();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HelloWorld::update(<span class="keyword">float</span> dt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 同步精灵与物体</span></span><br><span class="line"><span class="keyword">float</span> timeStep = <span class="number">0.03f</span>;</span><br><span class="line">int32 velocityIterations = <span class="number">8</span>;</span><br><span class="line">int32 positionIterations = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置刷新时间</span></span><br><span class="line">world-&gt;Step(timeStep, velocityIterations, positionIterations);</span><br><span class="line"><span class="keyword">for</span> (b2Body *b = world-&gt;GetBodyList(); b; b = b-&gt;GetNext()) &#123;</span><br><span class="line"><span class="keyword">if</span> (b-&gt;GetUserData() != <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="comment">// 运动只有两种运动 一个旋转 一个位移，因此只需要将物体角度，位置与精灵角度，位置同步</span></span><br><span class="line">Sprite* sprite = (Sprite *)b-&gt;GetUserData();</span><br><span class="line"><span class="comment">// 物体的单位是 m ， 精灵的单位是 像素</span></span><br><span class="line">sprite-&gt;setPosition(Vec2(b-&gt;GetPosition().x * PTM_PATIO, b-&gt;GetPosition().y * PTM_PATIO));</span><br><span class="line">sprite-&gt;setRotation(<span class="number">-1</span> * CC_RADIANS_TO_DEGREES(b-&gt;GetAngle()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HelloWorld::menuCloseCallback(Ref* pSender)</span><br><span class="line">&#123;</span><br><span class="line">    Director::getInstance()-&gt;end();</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建世界，引入世界边界</span></span><br><span class="line"><span class="keyword">void</span> HelloWorld::initpjysics()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> visibleSize = Director::getInstance()-&gt;getVisibleSize();</span><br><span class="line">Vec2 origin = Director::getInstance()-&gt;getVisibleOrigin();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置重力</span></span><br><span class="line">b2Vec2 gravity;</span><br><span class="line">gravity.Set(<span class="number">0.0f</span>, <span class="number">-10.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建世界</span></span><br><span class="line">world = <span class="keyword">new</span> b2World(gravity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许物体休眠</span></span><br><span class="line">world-&gt;SetAllowSleeping(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 开启连续物理测试</span></span><br><span class="line"><span class="comment">// 防止 物体 间 出现 物体穿透</span></span><br><span class="line">world-&gt;SetContinuousPhysics(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物理世界的边界</span></span><br><span class="line">b2BodyDef groundBody;</span><br><span class="line">groundBody.position.Set(<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//左下角</span></span><br><span class="line"></span><br><span class="line">b2Body *ground = world-&gt;CreateBody(&amp;groundBody);</span><br><span class="line"></span><br><span class="line">b2EdgeShape groundBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义底部</span></span><br><span class="line">groundBox.Set(b2Vec2(<span class="number">0</span>,<span class="number">0</span>), b2Vec2(visibleSize.width/PTM_PATIO,<span class="number">0</span>)); <span class="comment">// / PTM_PATIO 是 把像素换成 米</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用夹具 固定 形状到物体</span></span><br><span class="line"><span class="comment">// 参数是 形状指针， 密度</span></span><br><span class="line">ground-&gt;CreateFixture(&amp;groundBox, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义顶部</span></span><br><span class="line">groundBox.Set(b2Vec2(<span class="number">0</span>, visibleSize.height/PTM_PATIO), b2Vec2(visibleSize.width / PTM_PATIO, visibleSize.height/PTM_PATIO)); <span class="comment">// / PTM_PATIO 是 把像素换成 米</span></span><br><span class="line">ground-&gt;CreateFixture(&amp;groundBox, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义左侧</span></span><br><span class="line">groundBox.Set(b2Vec2(<span class="number">0</span>, <span class="number">0</span>), b2Vec2(<span class="number">0</span>, visibleSize.height/PTM_PATIO)); <span class="comment">// / PTM_PATIO 是 把像素换成 米</span></span><br><span class="line">ground-&gt;CreateFixture(&amp;groundBox, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义右侧</span></span><br><span class="line">groundBox.Set(b2Vec2(visibleSize.width/PTM_PATIO, <span class="number">0</span>), b2Vec2(visibleSize.width / PTM_PATIO, visibleSize.height/PTM_PATIO)); <span class="comment">// / PTM_PATIO 是 把像素换成 米</span></span><br><span class="line">ground-&gt;CreateFixture(&amp;groundBox, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HelloWorld::addNewSprite(Touch * touch, Event * unused_event)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> p = touch-&gt;getLocation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建物理相关精灵</span></span><br><span class="line"><span class="keyword">auto</span> sprite = Sprite::create(<span class="string">""</span>);</span><br><span class="line">sprite-&gt;setPosition(touch-&gt;getLocation());</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(sprite);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义物体</span></span><br><span class="line">b2BodyDef bodyDef;</span><br><span class="line">bodyDef.type = b2_dynamicBody;<span class="comment">//动态物体</span></span><br><span class="line">bodyDef.position.Set(p.x/PTM_PATIO, p.y/PTM_PATIO);</span><br><span class="line"></span><br><span class="line">b2Body *body = world-&gt;CreateBody(&amp;bodyDef);<span class="comment">//从物理世界创建body</span></span><br><span class="line"></span><br><span class="line">body-&gt;SetUserData(sprite); <span class="comment">//将 物体 与 body 关联</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义形状</span></span><br><span class="line">    <span class="keyword">auto</span> contenSize = sprite.getContentSize();</span><br><span class="line">b2PolygonShape dynamicBox;<span class="comment">//这是个结构体</span></span><br><span class="line">dynamicBox.SetAsBox(contenSize.width/PTM_RATIO/<span class="number">2</span>,contenSeiz.width/PTM_PATIO/<span class="number">2</span>); <span class="comment">//设置形状大小，中心点到左边距，右边距</span></span><br><span class="line">    <span class="comment">// 这里自动适配图片大小，又因为 是 中心点到左右两边的距离，所以要 除以 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义夹具</span></span><br><span class="line">b2FixtureDef fixtrue;</span><br><span class="line">fixtrue.shape = &amp;dynamicBox;</span><br><span class="line">fixtrue.density = <span class="number">1.0f</span>;<span class="comment">//密度</span></span><br><span class="line">fixtrue.friction = <span class="number">0.3f</span>;<span class="comment">// 摩擦系数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将夹具 与 body 连接</span></span><br><span class="line">body-&gt;CreateFixture(&amp;fixtrue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是物体并不会动，需要在update函数中设置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> HelloWorld::onTouchBegan(Touch * touch, Event * event)</span><br><span class="line">&#123;</span><br><span class="line">addNewSprite(touch, event);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HelloWorld.h文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HELLOWORLD_SCENE_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HELLOWORLD_SCENE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Box2D\Box2D.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ContactListener.h"</span></span></span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PTM_PATIO 32</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> :</span> <span class="keyword">public</span> cocos2d::Scene</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> cocos2d::<span class="function">Scene* <span class="title">createScene</span><span class="params">()</span></span>;</span><br><span class="line">~HelloWorld();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> dt)</span></span>;</span><br><span class="line">    <span class="comment">// a selector callback</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">menuCloseCallback</span><span class="params">(cocos2d::Ref* pSender)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initpjysics</span><span class="params">()</span></span>;<span class="comment">//初始化物理引擎</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNewSprite</span><span class="params">(Touch* touch, Event* unused_event)</span></span>;</span><br><span class="line">b2World *world;</span><br><span class="line">ContactListener* contactListener;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">onTouchBegan</span><span class="params">(Touch* touch, Event *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// implement the "static create()" method manually</span></span><br><span class="line">    CREATE_FUNC(HelloWorld);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __HELLOWORLD_SCENE_H__</span></span></span><br></pre></td></tr></table></figure><h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><ul><li>ContactListener.h</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Box2D\Box2D.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactListener</span> :</span> <span class="keyword">public</span> b2ContactListener &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BeginContact</span><span class="params">(b2Contact* contact)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">EndContact</span><span class="params">(b2Contact* contact)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PreSolve</span><span class="params">(b2Contact* contact, <span class="keyword">const</span> b2Manifold* oldManifold)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PostSolve</span><span class="params">(b2Contact* contact, <span class="keyword">const</span> b2ContactImpulse* impulse)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>ContactListener.cpp 文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ContactListener.h"</span></span></span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ContactListener::BeginContact(b2Contact * contact)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"begin"</span>);</span><br><span class="line">b2Body* bodyA = contact-&gt;GetFixtureA()-&gt;GetBody();<span class="comment">// 通过夹具获得物体A的body</span></span><br><span class="line">b2Body* bodyB = contact-&gt;GetFixtureB()-&gt;GetBody();<span class="comment">// 通过夹具获得物体A的body</span></span><br><span class="line"><span class="keyword">auto</span> spriteA = (Sprite *)bodyA-&gt;GetUserData(); <span class="comment">// 通过body获取精灵，强转一下</span></span><br><span class="line"><span class="keyword">auto</span> spriteB = (Sprite *)bodyB-&gt;GetUserData(); <span class="comment">// 通过body获取精灵，强转一下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (spriteA != <span class="literal">nullptr</span> &amp;&amp; spriteB != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">spriteA-&gt;setColor(Color3B::YELLOW);</span><br><span class="line">spriteB-&gt;setColor(Color3B::YELLOW);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ContactListener::EndContact(b2Contact * contact)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"end"</span>);</span><br><span class="line">b2Body* bodyA = contact-&gt;GetFixtureA()-&gt;GetBody();<span class="comment">// 通过夹具获得物体A的body</span></span><br><span class="line">b2Body* bodyB = contact-&gt;GetFixtureB()-&gt;GetBody();<span class="comment">// 通过夹具获得物体A的body</span></span><br><span class="line"><span class="keyword">auto</span> spriteA = (Sprite *)bodyA-&gt;GetUserData(); <span class="comment">// 通过body获取精灵，强转一下</span></span><br><span class="line"><span class="keyword">auto</span> spriteB = (Sprite *)bodyB-&gt;GetUserData(); <span class="comment">// 通过body获取精灵，强转一下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (spriteA != <span class="literal">nullptr</span> &amp;&amp; spriteB != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">spriteA-&gt;setColor(Color3B::WHITE);</span><br><span class="line">spriteB-&gt;setColor(Color3B::WHITE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ContactListener::PreSolve(b2Contact * contact, <span class="keyword">const</span> b2Manifold * oldManifold)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"PreSolve"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ContactListener::PostSolve(b2Contact * contact, <span class="keyword">const</span> b2ContactImpulse * impulse)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"PostSolve"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关节"><a href="#关节" class="headerlink" title="关节"></a>关节</h2><ol><li>距离关节<ul><li>两个物体之间保持固定的距离，每个物体上的点称为锚点。</li><li>关节定义是b2DistanceJoinDef</li></ul></li><li>旋转关节<ul><li>允许物体围绕公共点旋转。</li><li>关节定义是 b2RevoluteJoiDef</li></ul></li><li>平移关节<ul><li>两个物体之间的相对旋转是固定的，他们可以沿着一个坐标轴进行平移。</li><li>关节定义是 b2PrismaticJointDef</li></ul></li><li>焊接关节<ul><li>可以吧物体固定在相同方向上。</li><li>关节定义是 b2WeldJointDef</li></ul></li><li>轮滑关节<ul><li>轮滑关节用于创建理想的轮滑，两个物体唯一绳子两端，绳子通过某个固定点（轮滑的位置）将两个物体连接起来</li><li>当一个物体升起，另一个物体就会下降</li><li>关节定义是 b2PulleyJointDef</li></ul></li><li>摩擦关节<ul><li>降低两个物体之间的相对运动</li><li>关节定义是 b2FrictionJointDef</li></ul></li><li>齿轮关节<ul><li>控制其他两个关节（旋转关节或者平移关节），其中一个的愚弄的那个会影响另一个</li><li>关节定义是 b2GearJointDef</li></ul></li><li>鼠标关节<ul><li>点击物体上任意一个点可以在世界范围内进行拖动</li><li>关节定义是 b2MouseJointDef</li></ul></li></ol><h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Sprite * sp= Sprite::create(<span class="string">"Icon.png"</span>);</span><br><span class="line">sp-&gt;setPosition(Vec2(<span class="number">150</span>, <span class="number">150</span>));</span><br><span class="line">addChild(sp,<span class="number">0</span>,<span class="number">922</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    Action动作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MoveBy  创建一个移动的动作   参数1：移动到目标坐标所需的时间 参数2：目标坐标    </span></span><br><span class="line"><span class="comment">// 支持reverse 可以获取其反向动作</span></span><br><span class="line"><span class="comment">//     MoveTo  一样的</span></span><br><span class="line">ActionInterval * moveBy = MoveBy::create(<span class="number">5</span>,Vec2(<span class="number">300</span>, <span class="number">100</span>));</span><br><span class="line">ActionInterval * actionmoveback= moveBy-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(actionmoveback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     ScaleTo   作用：创建一个缩放的动作</span></span><br><span class="line"><span class="comment">//    参数1：达到缩放大小所需的时间</span></span><br><span class="line"><span class="comment">//    参数2 ：缩放的比例</span></span><br><span class="line">ActionInterval * scaleto = ScaleTo ::create(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">sp-&gt;runAction(scaleto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     ScaleBy  作用:创建一个缩放的动作</span></span><br><span class="line"><span class="comment">//    参数1：达到缩放大小的所需时间  参数2：缩放比例</span></span><br><span class="line">ActionInterval * scaleby = ScaleBy::create(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">ActionInterval * actionbyback = scaleby-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(actionbyback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     RotateTo</span></span><br><span class="line"><span class="comment">//    作用创建一个旋转的动作</span></span><br><span class="line"><span class="comment">//    参数1：旋转的时间  参数2：旋转饿角度  0 - 360</span></span><br><span class="line">ActionInterval * rotateto = RotateTo::create(<span class="number">2</span>, <span class="number">90</span>);</span><br><span class="line">sp-&gt;runAction(rotateto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//   SkewTo</span></span><br><span class="line"><span class="comment">//   作用创建一个倾斜的动作</span></span><br><span class="line"><span class="comment">//    参数1：倾斜到特定角度所需的时间</span></span><br><span class="line"><span class="comment">//    参数2：x轴的倾斜角度</span></span><br><span class="line"><span class="comment">//    参数3：y轴的倾斜角度</span></span><br><span class="line">ActionInterval * skewto = SkewTo::create(<span class="number">2</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">sp-&gt;runAction(skewto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     JumpTo</span></span><br><span class="line"><span class="comment">//    作用：创建一个跳的动作</span></span><br><span class="line"><span class="comment">//    参数1：跳到目标动作位子的所需时间</span></span><br><span class="line"><span class="comment">//    参数2：目标位置</span></span><br><span class="line"><span class="comment">//    参数3：跳的高度</span></span><br><span class="line"><span class="comment">//    参数4跳到目标位置的次数</span></span><br><span class="line">ActionInterval* jumpto = JumpTo ::create(<span class="number">2</span>, Vec2(<span class="number">300</span>, <span class="number">200</span>), <span class="number">50</span>, <span class="number">4</span> );</span><br><span class="line">sp-&gt;runAction(jumpto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     JumpBy</span></span><br><span class="line"><span class="comment">//    作用：创建一个跳的动作</span></span><br><span class="line"><span class="comment">//    参数1：跳到目标动作位子的所需时间</span></span><br><span class="line"><span class="comment">//    参数2：目标位置</span></span><br><span class="line"><span class="comment">//    参数3：跳的高度</span></span><br><span class="line"><span class="comment">//    参数4跳到目标位置的次数</span></span><br><span class="line"><span class="comment">//    这个支持方向动作reverse</span></span><br><span class="line">ActionInterval * jumpby = JumpBy ::create(<span class="number">3</span>, Vec2(<span class="number">300</span>, <span class="number">200</span>), <span class="number">50</span>, <span class="number">4</span>);</span><br><span class="line">ActionInterval * ac= jumpby-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(ac);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//         Bezier</span></span><br><span class="line"><span class="comment">//     BezierConfig结构体</span></span><br><span class="line"> BezierConfig bezierCon;</span><br><span class="line">bezierCon.controlPoint_1=Vec2(<span class="number">200</span>, <span class="number">150</span>);<span class="comment">//控制点1</span></span><br><span class="line">bezierCon.controlPoint_2=Vec2(<span class="number">200</span>, <span class="number">160</span>);<span class="comment">//控制点2</span></span><br><span class="line">bezierCon.endPosition =Vec2(<span class="number">340</span>, <span class="number">100</span>);<span class="comment">// 结束位置</span></span><br><span class="line"><span class="comment">//BezierTo</span></span><br><span class="line"><span class="comment">//        创建一个贝塞尔曲线运动的动作</span></span><br><span class="line"><span class="comment">//        参数1：贝塞尔曲线运动的时间</span></span><br><span class="line"><span class="comment">//        参数2 ： BezierConfig结构体</span></span><br><span class="line">ActionInterval * action = BezierTo::create(<span class="number">2</span>, bezierCon);</span><br><span class="line">ActionInterval * action1 = BezierBy::create(<span class="number">3</span>, bezierCon);<span class="comment">//支持反向</span></span><br><span class="line">ActionInterval * action2 = action-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(action1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//FadeIn</span></span><br><span class="line"><span class="comment">//作用：创建一个渐变出现的动作</span></span><br><span class="line"><span class="comment">//参数是时间</span></span><br><span class="line">ActionInterval * fadein = FadeIn::create(<span class="number">2</span>);</span><br><span class="line">sp-&gt;runAction(fadein);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     FadeOut</span></span><br><span class="line"><span class="comment">//    作用：创建一个渐变消失的动作</span></span><br><span class="line"><span class="comment">//    参数是时间</span></span><br><span class="line">ActionInterval * fadeout = FadeOut::create(<span class="number">2</span>);</span><br><span class="line">sp-&gt;runAction(fadeout);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// TintTo</span></span><br><span class="line"><span class="comment">//    作用：创建一个色彩变化的消失动作</span></span><br><span class="line"><span class="comment">//    参数1：色彩变化的动作</span></span><br><span class="line"><span class="comment">//    参数2 ：红色分量</span></span><br><span class="line"><span class="comment">//    参数3：蓝色分量</span></span><br><span class="line">ActionInterval * tinto = TintTo ::create(<span class="number">3</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">sp-&gt;runAction(tinto);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     TintBy</span></span><br><span class="line"><span class="comment">//    作用：创建一个色彩变化的出现动作</span></span><br><span class="line"><span class="comment">//    参数1：色彩变化的动作</span></span><br><span class="line"><span class="comment">//    参数2 ：红色分量</span></span><br><span class="line"><span class="comment">//    参数3：蓝色分量   但是家了reverse就是 反向的</span></span><br><span class="line">ActionInterval * tintby = TintBy::create(<span class="number">3</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">ActionInterval * tintby1 = tintby-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(tintby1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     Blink</span></span><br><span class="line"><span class="comment">//    作用 :创建一额闪烁的动作</span></span><br><span class="line"><span class="comment">//    参数1：闪烁完成的时间</span></span><br><span class="line"><span class="comment">//    参数2:闪烁的次数</span></span><br><span class="line"></span><br><span class="line">ActionInterval * blink = Blink ::create(<span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">sp-&gt;runAction(blink);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     DelayTime</span></span><br><span class="line"><span class="comment">//    创建一个延迟的动作</span></span><br><span class="line"><span class="comment">//    参数  延迟的时间</span></span><br><span class="line">ActionInterval * delaytime = DelayTime::create(<span class="number">3</span>);</span><br><span class="line">sp-&gt;runAction(delaytime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     OrbitCamera</span></span><br><span class="line"><span class="comment">//    作用：创建一个球面坐标轨迹进行旋转的动作</span></span><br><span class="line"><span class="comment">//    参数1 ： 旋转轨迹的时间</span></span><br><span class="line"><span class="comment">//    参数2 ：起始半径</span></span><br><span class="line"><span class="comment">//    参数3：半径差</span></span><br><span class="line"><span class="comment">//    参数4：起始z角</span></span><br><span class="line"><span class="comment">//    参数5：旋转z角的差</span></span><br><span class="line"><span class="comment">//    参数6：起始x角</span></span><br><span class="line"><span class="comment">//    参数7：旋转x角的差</span></span><br><span class="line">ActionInterval * orbitcameraa = OrbitCamera::create(<span class="number">3</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">180</span>, <span class="number">90</span>, <span class="number">0</span>);</span><br><span class="line">sp-&gt;runAction(orbitcameraa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     CardinalSpline</span></span><br><span class="line"><span class="comment">//    作用：创建数组  点的数组</span></span><br><span class="line">PointArray * <span class="built_in">array</span> = PointArray::create(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">210</span>,<span class="number">0</span>));</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">210</span>,<span class="number">240</span>));</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">0</span>,<span class="number">160</span>));</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="comment">//    CardinalSplineTo</span></span><br><span class="line"><span class="comment">//    作用：创建一个样条曲线轨迹的动作</span></span><br><span class="line"><span class="comment">//    参数1：完成轨迹所需的时间</span></span><br><span class="line"><span class="comment">//    参数2：控制点的坐标数组</span></span><br><span class="line"><span class="comment">//    拟合度  其值= 0 路径最柔和</span></span><br><span class="line">ActionInterval  * CardinalSplineTo=CardinalSplineTo::create(<span class="number">3</span>, <span class="built_in">array</span>, <span class="number">0</span>);</span><br><span class="line">sp-&gt;runAction(CardinalSplineTo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    CardinalSplineBy</span></span><br><span class="line"><span class="comment">//    作用：创建一个样条曲线轨迹的动作</span></span><br><span class="line"><span class="comment">//    参数1：完成轨迹所需的时间</span></span><br><span class="line"><span class="comment">//    参数2：控制点的坐标数组</span></span><br><span class="line"><span class="comment">//    拟合度  其值= 0 路径最柔和</span></span><br><span class="line">ActionInterval * CardinalSplineBy = CardinalSplineBy::create(<span class="number">3</span>, <span class="built_in">array</span>, <span class="number">0</span>);</span><br><span class="line">sp-&gt;runAction(CardinalSplineBy);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    CatmullRomTo   CatmullRomBY</span></span><br><span class="line"><span class="comment">//    作用：创建一个样条插值轨迹</span></span><br><span class="line"><span class="comment">//    参数1：完成轨迹的时间</span></span><br><span class="line"><span class="comment">//    参数2：控制点的数组坐标</span></span><br><span class="line">ActionInterval * catmullRomTo = CatmullRomTo::create(<span class="number">3</span>, <span class="built_in">array</span>);</span><br><span class="line">sp-&gt;runAction(catmullRomTo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    Follow</span></span><br><span class="line"><span class="comment">//    作用：创建一个跟随动作</span></span><br><span class="line"><span class="comment">//    参数1：跟随的目标对象</span></span><br><span class="line"><span class="comment">//    跟随范围，离开范围就不再跟随</span></span><br><span class="line"><span class="comment">//创建一个参照物spT</span></span><br><span class="line">Sprite * spt = Sprite::create(<span class="string">"Icon.png"</span>);</span><br><span class="line">spt-&gt;setPosition(Vec2(<span class="number">420</span>,<span class="number">40</span>));</span><br><span class="line">addChild(spt);</span><br><span class="line">sp-&gt;runAction(MoveTo::create(<span class="number">3</span>, Vec2(<span class="number">940</span>,sp-&gt;getPositionY())));</span><br><span class="line"></span><br><span class="line">Follow * follow = Follow::create(sp,Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">960</span>, <span class="number">320</span>));</span><br><span class="line"><span class="keyword">this</span>-&gt; runAction(follow);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseBounceIn</span></span><br><span class="line"><span class="comment">//    目标动作</span></span><br><span class="line">ActionInterval* move = MoveTo::create(<span class="number">3</span>, Vec2(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"><span class="comment">////    让目标动作缓慢开始</span></span><br><span class="line"><span class="comment">////    参数：目标动作</span></span><br><span class="line">ActionInterval * EaseBounceIn = EaseBounceIn::create(move);</span><br><span class="line">sp-&gt;runAction(EaseBounceIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    EaseBounceOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予反弹力，且以目标动作结束位子开始反弹</span></span><br><span class="line"><span class="comment">//    参数目标动作</span></span><br><span class="line">ActionInterval * easeBounceOut = EaseBounceOut ::create(move);</span><br><span class="line">sp-&gt;runAction(easeBounceOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    EaseBounceInOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予反弹力，且以目标动作起始与结束位子开始反弹</span></span><br><span class="line">ActionInterval * easeBounceInOut= EaseBounceInOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeBounceInOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//   EaseBackIn</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予回力 ， 且以目标动作起点位置作为回力点</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line">ActionInterval * easeBackIn = EaseBackIn::create(move);</span><br><span class="line">sp-&gt;runAction(easeBackIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    EaseBackOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予回力 ， 且以目标动作终点位置作为回力点</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line">ActionInterval *easeBackOut = EaseBackOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeBackOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseBackInOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予回力 ， 且以目标动作起点和终点位置作为回力点</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line"> ActionInterval * easeBackInOut =  EaseBackInOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeBackInOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseElasticIn</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予弹性 ，且以目标动作起点位子赋予弹性</span></span><br><span class="line"><span class="comment">//     参数：目标动作</span></span><br><span class="line"> ActionInterval * easeElasticIn=  EaseElasticIn::create(move);</span><br><span class="line">sp-&gt;runAction(easeElasticIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      EaseElasticOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予弹性 ，且以目标动作终点位子赋予弹性</span></span><br><span class="line"><span class="comment">//     参数：目标动作</span></span><br><span class="line"> ActionInterval *easeElasticOut =  EaseElasticOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeElasticOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseElasticInOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予弹性 ，且以目标动作起点和终点位子赋予弹性</span></span><br><span class="line"><span class="comment">//     参数：目标动作</span></span><br><span class="line"> ActionInterval *easeElasticInOut =  EaseElasticOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeElasticInOut);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseExponentialIn</span></span><br><span class="line"><span class="comment">//    让目标动作缓慢开始</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line"> ActionInterval * easeExponentialIn=  EaseExponentialIn::create(move);</span><br><span class="line">sp-&gt;runAction(easeExponentialIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseExponentialOut</span></span><br><span class="line"><span class="comment">//    让目标动作缓慢中止</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line">ActionInterval * easeExponentialInt=  EaseExponentialOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeExponentialInt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseExponentialInOut</span></span><br><span class="line"><span class="comment">//    让目标动作缓慢开始和中止</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line"> ActionInterval * easeExponentialInOut=  EaseExponentialInOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeExponentialInOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseRateAction</span></span><br><span class="line"><span class="comment">//    作用 ： 让目标动作设置速率</span></span><br><span class="line"><span class="comment">//    参数1:目标动作</span></span><br><span class="line"><span class="comment">//    参数2：速率</span></span><br><span class="line"> ActionInterval * moveto =  MoveTo::create(<span class="number">5</span>,  p(<span class="number">300</span>,sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * easeRateAction =  EaseRateAction::create(move, <span class="number">3</span>);</span><br><span class="line">sp-&gt;runAction(easeRateAction);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseSineIn</span></span><br><span class="line"><span class="comment">//    作用：动作由慢到快</span></span><br><span class="line"><span class="comment">//      参数：目标动作</span></span><br><span class="line"> ActionInterval * easeSineIn =  EaseSineIn::create(move);</span><br><span class="line">sp-&gt;runAction(easeSineIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseSineOut</span></span><br><span class="line"><span class="comment">//    作用：动作由快到慢</span></span><br><span class="line"><span class="comment">//      参数：目标动作</span></span><br><span class="line"> ActionInterval * easeSineOut =  EaseSineOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeSineOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseSineInOut</span></span><br><span class="line"><span class="comment">//    作用：动作由慢到快再快到慢</span></span><br><span class="line"><span class="comment">//      参数：目标动作</span></span><br><span class="line"> ActionInterval * easeSineInOut =  EaseSineInOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeSineInOut);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     Speed</span></span><br><span class="line"><span class="comment">//    作用：让目标动作运行速度加倍</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2:倍速</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">10</span>,  p(<span class="number">300</span>,sp-&gt;getPositionY()));</span><br><span class="line"> Speed * speed = Speed::create(move, <span class="number">100</span>);</span><br><span class="line">sp-&gt;runAction(speed);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     Spawn</span></span><br><span class="line"><span class="comment">//  作用：让多个动作同时执行</span></span><br><span class="line"><span class="comment">//    参数：目标动作的可变参数</span></span><br><span class="line"> ActionInterval * move1 =  MoveTo::create(<span class="number">10</span>,  p(<span class="number">300</span>,sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * scale =  ScaleTo::create(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"> ActionInterval * rotate =  RotateTo::create(<span class="number">4</span>, <span class="number">190</span>);</span><br><span class="line"> FiniteTimeAction * spawn = Spawn::create(move1,scale,rotate,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(spawn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     Sequence</span></span><br><span class="line"><span class="comment">//    作用：让多个动作按照前后顺序逐一执行</span></span><br><span class="line"><span class="comment">//    参数：目标动作的可变参数</span></span><br><span class="line"> ActionInterval * move2 =  MoveTo::create(<span class="number">2</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * scalet =  ScaleTo::create(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"> FiniteTimeAction * seq=  Sequence::create(move2,scalet,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(seq);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    扩展如果要对目标动作全部进行方向运动，可以使用如下形式操作</span></span><br><span class="line"> FiniteTimeAction *seqe= Sequence::create(moveby,scaleby,...<span class="literal">NULL</span>);</span><br><span class="line"> FiniteTimeAction * reverseseq =  Sequence::create(seqe,seq-&gt;reverse(),<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意 Sequence中的所有动作都必须支持reverse函数，否则会出现异常</span></span><br><span class="line"> ActionInterval * move =  MoveBy::create(<span class="number">2</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * scale =  ScaleBy::create(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"> FiniteTimeAction * seq=  Sequence::create(move,scale,<span class="literal">NULL</span>);</span><br><span class="line"> FiniteTimeAction * reveseseq =  Sequence::create(seq,seq-&gt;reverse(),<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(reveseseq);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     Repeat</span></span><br><span class="line"><span class="comment">//    作用：对目标动作进行重复运动（目标动作可以是 Sequence ， Spawn）</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2：重复次数</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">2</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * move2 =  MoveTo::create(<span class="number">2</span>,  p(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"> FiniteTimeAction*seq = Sequence::create(move,move2,<span class="literal">NULL</span>);</span><br><span class="line"> FiniteTimeAction *repeat =  Repeat::create(seq, <span class="number">3</span>);</span><br><span class="line">sp-&gt;runAction(repeat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     RepeatForever</span></span><br><span class="line"><span class="comment">//    作用：对目标动作进行永久性的重复运动（目标动作可以是 Sequence ， Spawn）</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * move1 =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"> FiniteTimeAction* seq =  Sequence::create(move,move1,<span class="literal">NULL</span>);</span><br><span class="line"> ActionInterval * repeatForever = RepeatForever::create(( ActionInterval* )seq);</span><br><span class="line">sp-&gt;runAction(repeatForever);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     CallFunc</span></span><br><span class="line"><span class="comment">//    作用：创建一个回调动作（调用不带参数的回调方法）；</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2：目标回调函数</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> CallFunc * funcall=  CallFunc::create(<span class="keyword">this</span>, callfunc_selector(HelloWorld::callbackC));</span><br><span class="line"> FiniteTimeAction * seq =  Sequence::create(move,funcall,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(seq);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     CallFuncN</span></span><br><span class="line"><span class="comment">//    作用：创建一个回调动作（调用 带一个参数的回调方法）；</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2：目标回调函数</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> CallFuncN * funcall=  CallFuncN::create(<span class="keyword">this</span>, callfuncN_selector(HelloWorld::callbackN));</span><br><span class="line"> FiniteTimeAction * seq =  Sequence::create(move,funcall,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(seq);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     CallFuncND</span></span><br><span class="line"><span class="comment">//    作用：创建一个回调动作（调用 带两个参数的回调方法）；</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2：目标回调函数</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> CallFuncND * funcall=  CallFuncND::create(<span class="keyword">this</span>, callfuncND_selector(HelloWorld::callbackND)  ,(<span class="keyword">void</span>*)<span class="number">0xbebabeba</span>);</span><br><span class="line"> FiniteTimeAction * seq =  Sequence::create(move,funcall,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(seq);</span><br></pre></td></tr></table></figure><h1 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a>内存管理机制</h1><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><ul><li>每个对象都有一个引用，一个数来跟踪它被引用的次数</li><li>每增加一次 引用计数+1 ，每减少一次 应用计数-1</li><li>垃圾回收时 引用计数 为0 时就要被回收</li><li><code>最为致命</code>的问题是无法解决循环引用</li></ul><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><ul><li>根可达的集合，cocos中的所有对象都有一个同一个父节点</li><li>第一个阶段从应用节点开始标记所有被引用的对象</li><li>第二个阶段遍历整个堆，把未标记的对象清除</li><li><code>最为致命</code>的问题是这个算法需要暂停整个应用，并且会产生内存碎片</li></ul><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><ul><li>将内存分为连个区域，每次只使用其中一个区域。</li><li>垃圾回收时，遍历整个区域，将正在使用的对象复制到另一个区域中</li><li>复制成本较小，而且可以进行内存管理，不会出现内存碎片</li><li><code>最为致命</code>的问题是这个算法需要两倍的内存空间</li></ul><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><ul><li>集合了标记清除和复制算法</li><li>第一阶段，从根节点开始标记所有的被应用的节点</li><li>第二阶段，清除未被标记的节点，同时将被标记的节点压缩到一起，按顺序排放</li></ul><h2 id="delete和new"><a href="#delete和new" class="headerlink" title="delete和new"></a>delete和new</h2><h3 id="new运算符使用的一般格式为"><a href="#new运算符使用的一般格式为" class="headerlink" title="new运算符使用的一般格式为 　　"></a>new运算符使用的一般格式为 　　</h3><pre><code>new 类型 [初值] 　　用new分配数组空间时不能指定初值。如果由于内存不足等原因而无法正常分配空间，则new会返回一个空指针NULL，用户可以根据该指针的值判断分配空间是否成功。new int;//开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针) 　　new int(100);//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址　　new char[10];//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址 　　new int[5][4];//开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址float *p=new float (3.14159);//开辟一个存放单精度数的空间，并指定该实数的初值为//3.14159，将返回的该空间的地址赋给指针变量p 　　</code></pre><h3 id="delete运算符使用的一般格式为"><a href="#delete运算符使用的一般格式为" class="headerlink" title="delete运算符使用的一般格式为 　　"></a>delete运算符使用的一般格式为 　　</h3><pre><code>delete [ ]指针变量 　　例如要撤销上面用new开辟的存放单精度数的空间(上面第5个例子)，应该用 　　delete p；　　前面用“new char[10];”开辟的字符数组空间，如果把new返回的指针赋给了指针变量pt，则应该用以下形式的delete运算符撤销该空间： 　　  delete [] pt；//在指针变量前面加一对方括号，表示是对数组空间的操作 　　</code></pre><h2 id="Cocos2dx-的内存管理"><a href="#Cocos2dx-的内存管理" class="headerlink" title="Cocos2dx 的内存管理"></a>Cocos2dx 的内存管理</h2><ul><li>使用的是 引用计数方法</li><li>所有的自动释放的对象都<code>继承</code>于<code>Ref</code>类<ul><li>Node基类也继承与<code>Ref</code>类</li></ul></li><li>Ref类用于管理引用计数</li></ul><h3 id="Ref的方法"><a href="#Ref的方法" class="headerlink" title="Ref的方法"></a>Ref的方法</h3><ul><li>retain() 增加引用计数</li><li>release() 减少引用计数</li><li>autorelease() 生成自动释放对象</li><li>getReferanceCount() 获取对象的引用计数</li></ul><h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><ul><li>创建一个对象的时候</li><li>首先调用对象的父类的构造函数</li><li>最终会调用到<code>Ref</code>这个基类</li><li>在<code>Ref</code>这基类中会初始化引用计数<code>ReferanceCount</code>为1</li></ul><p><strong>在release函数中，有判断引用计数的值，如果为0会自动释放对象</strong></p><h2 id="CREATE-FUNC-函数"><a href="#CREATE-FUNC-函数" class="headerlink" title="CREATE_FUNC()函数"></a>CREATE_FUNC()函数</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * define a create function for a specific type, such as CCLayer </span></span><br><span class="line"><span class="comment"> * @__TYPE__ class type to add create(), such as CCLayer </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE_FUNC(__TYPE__) \  </span></span><br><span class="line">static __TYPE__* create() \  </span><br><span class="line">&#123; \  </span><br><span class="line">    __TYPE__ *pRet = <span class="keyword">new</span> __TYPE__(); \</span><br><span class="line"> <span class="comment">//创建传过来的东西</span></span><br><span class="line">    <span class="keyword">if</span> (pRet &amp;&amp; pRet-&gt;init()) \  </span><br><span class="line">    &#123; \  </span><br><span class="line">        pRet-&gt;autorelease(); \  </span><br><span class="line">        <span class="keyword">return</span> pRet; \  </span><br><span class="line">    &#125; \  </span><br><span class="line">    <span class="keyword">else</span> \  </span><br><span class="line">    &#123; \  </span><br><span class="line">        <span class="keyword">delete</span> pRet; \  </span><br><span class="line">        pRet = <span class="literal">NULL</span>; \  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; \  </span><br><span class="line">    &#125; \  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>很明显上面的pRet 使用了 autorelease() 方法</strong><br><strong>先使用C++的new方法创建一个对象，如果创建成功，则添加自动清除</strong>rc</p><h3 id="什么是CREATE-FUNC"><a href="#什么是CREATE-FUNC" class="headerlink" title="什么是CREATE_FUNC()"></a>什么是CREATE_FUNC()</h3><pre><code>为类似CCLayer类的特定类增加一个create函数，我们也可以看到在宏的下面定义了一个create()函数返回到类型就是宏带入的参数&quot;__TYPE__&quot;指针类型</code></pre><h3 id="create（）函数做了什么？"><a href="#create（）函数做了什么？" class="headerlink" title="create（）函数做了什么？"></a>create（）函数做了什么？</h3><pre><code>他执行了类的构造函数，执行了init()初始化函数，最后又设置创建出的对象为自动释放内存，这样其他人在使用这个类的时候，只要是用create（）函数创建出来的对象就是不用费心区管理释放内存</code></pre><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h3 id="什么时候引用计数"><a href="#什么时候引用计数" class="headerlink" title="什么时候引用计数"></a>什么时候引用计数</h3><pre><code>每一个对象都有一个关联的引用计数 —— 对该对象的活跃引用的数量。如果对象的引用计数是零，那么它就是垃圾（用户程序不可到达它），并可以回收。</code></pre><h2 id="Cocos2dx内存管理分为两块"><a href="#Cocos2dx内存管理分为两块" class="headerlink" title="Cocos2dx内存管理分为两块"></a>Cocos2dx内存管理分为两块</h2><pre><code>1. 通过加入 `autorelease` 来自动释放那些创建后未使用的对象2. 通过`节点管理`来保证对象在弃用后及时的删除</code></pre><h3 id="及时释放弃用的对象"><a href="#及时释放弃用的对象" class="headerlink" title="及时释放弃用的对象"></a>及时释放弃用的对象</h3><p><code>使用条件</code>：该对象是Node的子类对象<br><code>使用方法</code>：addChild，removeChild</p><h4 id="内存管理过程："><a href="#内存管理过程：" class="headerlink" title="内存管理过程："></a>内存管理过程：</h4><pre><code>addChild  添加对象后，对象可以被使用removeChild 删除对象后，对象被立刻删除（通过 delete）</code></pre><h3 id="及时释放未使用的对象"><a href="#及时释放未使用的对象" class="headerlink" title="及时释放未使用的对象"></a>及时释放未使用的对象</h3><h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><pre><code>新创建的对象如果 一帧 内不使用，就会被自动释放。（所谓一针，即是一个gameloop）</code></pre><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><pre><code>对象通过CREAT_FUNC()宏创建或者对象使用autorelease加入了自动释放池</code></pre><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><pre><code>自动实现</code></pre><h4 id="管理过程"><a href="#管理过程" class="headerlink" title="管理过程"></a>管理过程</h4><h5 id="对象不使用的情况"><a href="#对象不使用的情况" class="headerlink" title="对象不使用的情况"></a>对象不使用的情况</h5><pre><code>对象创建        引用+1对象自动释放     引用-1</code></pre><h5 id="对象使用的情况"><a href="#对象使用的情况" class="headerlink" title="对象使用的情况"></a>对象使用的情况</h5><pre><code>对象创建        引用+1对象使用        引用+1//通过 addchild 使用对象对象自动释放    引用-1</code></pre><p>引用的初始值为0，如果一阵结束后对象的引用值还是0，那就会被delete掉</p><h2 id="内存管理的实现原理"><a href="#内存管理的实现原理" class="headerlink" title="内存管理的实现原理"></a>内存管理的实现原理</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p><code>Red</code>类：进行引用计数，提供加入自动释放池的接口。<br><code>AutoreleasePool</code>类：管理一个<code>vector</code>数组来存放自动释放池的对象。提供对释放池的清空操作<br><code>PoolManager</code>类：管理一个<code>vector</code>数组来存放自动释放池。默认情况下引擎只创建一个自动释放池，因此这个类是提供给开发者使用的，例如处于性能考虑添加自己的自动释放池<br><code>DisplayLinkDirector</code>类：只是一个导演类，提供游戏的主循环，实现每一帧的资源释放。这个类继承自<code>Director</code>类，也是唯一一个继承了<code>Director</code>的类，也就是说完全可以合并为一个类。</p><h4 id="Ref源码"><a href="#Ref源码" class="headerlink" title="Ref源码"></a>Ref源码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用计数变量</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> _referenceCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象被构造后，引用计数值为 1</span></span><br><span class="line">Ref::Ref()</span><br><span class="line">: _referenceCount(<span class="number">1</span>) <span class="comment">//当Ref对象被创建时，引用计数的值为 1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_ENABLE_SCRIPT_BINDING</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uObjectCount = <span class="number">0</span>;</span><br><span class="line">_luaID = <span class="number">0</span>;</span><br><span class="line">_ID = ++uObjectCount;</span><br><span class="line">_scriptObject = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_USE_MEM_LEAK_DETECTION</span></span><br><span class="line">trackRef(<span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用+1</span></span><br><span class="line"><span class="keyword">void</span> Ref::retain()</span><br><span class="line">&#123;</span><br><span class="line">CCASSERT(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should greater than 0"</span>);</span><br><span class="line">++_referenceCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用-1 。如果引用为0则释放对象</span></span><br><span class="line"><span class="keyword">void</span> Ref::release()</span><br><span class="line">&#123;</span><br><span class="line">CCASSERT(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should greater than 0"</span>);</span><br><span class="line">--_referenceCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_referenceCount == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_USE_MEM_LEAK_DETECTION</span></span><br><span class="line">untrackRef(<span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>; <span class="comment">// 注意这里 把对象 delete 了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供加入自动释放池的接口。对象调用此函数即可加入自动释放池的管理。</span></span><br><span class="line">Ref* Ref::autorelease()</span><br><span class="line">&#123;</span><br><span class="line">PoolManager::getInstance()-&gt;getCurrentPool()-&gt;addObject(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取引用计数值</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Ref::getReferenceCount() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _referenceCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AutoreleasePool源码"><a href="#AutoreleasePool源码" class="headerlink" title="AutoreleasePool源码"></a>AutoreleasePool源码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 存放释放池对象的数组</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Ref*&gt; _managedObjectArray;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往释放池添加对象</span></span><br><span class="line"><span class="keyword">void</span> AutoreleasePool::addObject(Ref* object)</span><br><span class="line">&#123;</span><br><span class="line">_managedObjectArray.push_back(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空释放池，将其中的所有对象都 delete</span></span><br><span class="line"><span class="keyword">void</span> AutoreleasePool::clear()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 释放所有对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;obj : _managedObjectArray)</span><br><span class="line">&#123;</span><br><span class="line">obj-&gt;release();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清空vector数组</span></span><br><span class="line">_managedObjectArray.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看某个对象是否在释放池中</span></span><br><span class="line"><span class="keyword">bool</span> AutoreleasePool::contains(Ref* object) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; obj : _managedObjectArray)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == object)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PoolManager源码"><a href="#PoolManager源码" class="headerlink" title="PoolManager源码"></a>PoolManager源码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放池管理器单例对象</span></span><br><span class="line"><span class="keyword">static</span> PoolManager* s_singleInstance;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放池数组</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AutoreleasePool*&gt; _releasePoolStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 释放池管理器的单例</span></span><br><span class="line">PoolManager* PoolManager::getInstance()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s_singleInstance == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 新建一个管理器对象</span></span><br><span class="line">s_singleInstance = <span class="keyword">new</span> PoolManager(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个自动释放池</span></span><br><span class="line"><span class="keyword">new</span> AutoreleasePool(<span class="string">"cocos2d autorelease pool"</span>);<span class="comment">// 内部使用了释放池管理器的push，这里的调用很微妙，读者可以动手看一看</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s_singleInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前的释放池</span></span><br><span class="line">AutoreleasePool* PoolManager::getCurrentPool() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _releasePoolStack.back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看对象是否在某个释放池内</span></span><br><span class="line"><span class="keyword">bool</span> PoolManager::isObjectInPools(Ref* obj) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; pool : _releasePoolStack)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;contains(obj))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加释放池对象</span></span><br><span class="line"><span class="keyword">void</span> PoolManager::push(AutoreleasePool *pool)</span><br><span class="line">&#123;</span><br><span class="line">_releasePoolStack.push_back(pool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放池对象出栈</span></span><br><span class="line"><span class="keyword">void</span> PoolManager::pop()</span><br><span class="line">&#123;</span><br><span class="line">CC_ASSERT(!_releasePoolStack.empty());</span><br><span class="line">_releasePoolStack.pop_back();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DisplayLinkDirector源码"><a href="#DisplayLinkDirector源码" class="headerlink" title="DisplayLinkDirector源码"></a>DisplayLinkDirector源码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> DisplayLinkDirector::mainLoop()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一次当导演</span></span><br><span class="line"><span class="keyword">if</span> (_purgeDirectorInNextLoop)</span><br><span class="line">&#123;</span><br><span class="line">_purgeDirectorInNextLoop = <span class="literal">false</span>;</span><br><span class="line">purgeDirector();<span class="comment">//进行清理工作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (! _invalid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 绘制场景，游戏主要工作都在这里完成</span></span><br><span class="line">drawScene();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空资源池</span></span><br><span class="line">PoolManager::getInstance()-&gt;getCurrentPool()-&gt;clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><pre><code>首先，创建了一个 Node 对象A，Node 继承Ref，因此 Ref 的引用计数为1；然后，A通过 autorelease 将自己放入自动释放池；drawScene() 完成后，一帧结束，Director 通过释放池将池中的对象 clear()，即对 Node 对象A进行 release() 操作。A的引用计数变为0，执行 delete 释放A对象。</code></pre><h1 id="Cocos2dx-文件读写"><a href="#Cocos2dx-文件读写" class="headerlink" title="Cocos2dx 文件读写"></a>Cocos2dx 文件读写</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>在Pc端，程序是可以读写任意电脑的文件夹的</li><li>在 IOC/安卓 端，程序可以安装在任意文件夹下，但是只能访问安装文件夹里的文件</li><li>这是一个安全机制</li></ul><p><strong>cocos2dx 中的resouce资源文件夹 在打包安装到 IOS/安卓 上的时候是写死的不能更改的</strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>使用到的类 <code>FileUtils::getInstance()</code></li><li>getWritablePath() 返回一个字符串string，获取一个可以写的文件路径</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">string</span> filePath = FileUtils::getInstance()-&gt;getWritablePath() + <span class="string">"user,txt"</span>; </span><br><span class="line"><span class="comment">// 这里的getWriteablePath() 是获取可以写的路径</span></span><br><span class="line"><span class="built_in">string</span> userData = FileUtils::getInstance()-&gt;getStringFromFile(filePath);</span><br><span class="line">FileUtils::getInstance()-&gt;writeStringToFile(userData, filePath); </span><br><span class="line"><span class="comment">// 保存文本的文件信息</span></span><br></pre></td></tr></table></figure><p><strong>如果是获取安装路径的文件信息，则可以直接使用路径信息</strong><br><strong>例如，在resouce资源文件夹下有个Data文件夹，里面有个user.txt文件，则直接使用FileUtils::getInstance()-&gt;getStringFromFile(“Data/user.txt”);就可以，而不需要使用可写路径</strong></p><h2 id="反蓄序列化"><a href="#反蓄序列化" class="headerlink" title="反蓄序列化"></a>反蓄序列化</h2><ul><li><p>通过一个JSON文件，给一个类赋值</p></li><li><p>保存为UTF-8无dom格式</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"tom"</span>,<span class="attr">"age"</span>:<span class="number">12</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"lucy"</span>,<span class="attr">"age"</span>:<span class="number">13</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"jack"</span>,<span class="attr">"age"</span>:<span class="number">14</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"拉拉"</span>,<span class="attr">"age"</span>:<span class="number">15</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"波"</span>,<span class="attr">"age"</span>:<span class="number">16</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"树莓"</span>,<span class="attr">"age"</span>:<span class="number">17</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="built_in">string</span> _name, <span class="keyword">int</span> _age, <span class="built_in">string</span> _address);</span><br><span class="line">~Student();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name, address;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student(<span class="built_in">string</span> _name, <span class="keyword">int</span> _age, <span class="built_in">string</span> _address)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = _name;</span><br><span class="line"><span class="keyword">this</span>.address = _address;</span><br><span class="line"><span class="keyword">this</span>.age = _age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果是在代码中用new的方法写死这个Student类，很明显是很2的</strong></p><ul><li>在Cocos2dx 的代码中使用 <code>#include &quot;spine/Json.h&quot;</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 需要注意的是，这里并没有使用 上面的 可写路径</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> strRoles = FileUtils::getInstance()-&gt;getStringFromFile(<span class="string">"Data/User.txt"</span>);</span><br><span class="line"><span class="comment">// 反序列化，将字符串转为json格式</span></span><br><span class="line">Json* data = Json_create(strRoles.c_str());</span><br><span class="line"><span class="comment">// 由于上述的json是一个数组，所以这里的data是一个数组</span></span><br><span class="line">Json* stu = js-&gt;child;</span><br><span class="line"><span class="comment">// json数组的第一个元素</span></span><br><span class="line"><span class="keyword">while</span>(stu)&#123;</span><br><span class="line"><span class="comment">// 这里就是一个获取的过程</span></span><br><span class="line"><span class="keyword">int</span> id = Json_getItem(stu, <span class="string">"age"</span>);</span><br><span class="line"><span class="comment">// 由于返回的是一个string类型，所以使用valueString, 同理还有 valuefloat 等</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> name = Json_getItem(stu, <span class="string">"name"</span>)-&gt;valueString;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> address = Json_getItem(stu, <span class="string">"name"</span>)-&gt;valueString;</span><br><span class="line"></span><br><span class="line">Studen stu1 = <span class="keyword">new</span> Student(name, age, address);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往下走</span></span><br><span class="line">stu = stu-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cocos2dx-网络通信&quot;&gt;&lt;a href=&quot;#Cocos2dx-网络通信&quot; class=&quot;headerlink&quot; title=&quot;Cocos2dx-网络通信&quot;&gt;&lt;/a&gt;Cocos2dx-网络通信&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Socket通讯&lt;/li&gt;
&lt;li&gt;ht
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>作死的学习Linux运维</title>
    <link href="http://yoursite.com/2018/10/27/linux-%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/10/27/linux-命令/</id>
    <published>2018-10-27T08:07:26.000Z</published>
    <updated>2018-11-13T14:47:14.005Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux命令行"><a href="#Linux命令行" class="headerlink" title="Linux命令行"></a>Linux命令行</h2><p>大多是互联网企业在安装系统甚至不会安装图形管理软件包，而是直接使用文本模式安装，因此登陆后直接面对的就是命令行的界面</p><h3 id="Linux命令行提示符介绍"><a href="#Linux命令行提示符介绍" class="headerlink" title="Linux命令行提示符介绍"></a>Linux命令行提示符介绍</h3><p>Linux命令行结尾的提示符有 “#” 和 “$” 两种不同的符号  </p><pre><code># 是超级管理员root用户对应的命令行 $ 是普通用户oldboy对应的命令行</code></pre><h3 id="命令行的快捷键"><a href="#命令行的快捷键" class="headerlink" title="命令行的快捷键"></a>命令行的快捷键</h3><pre><code>tab                命令或路径等的补全键，Linux最有用的快捷键Ctrl+a            光标回到命令行行首Ctrl+e            光标回到命令行行尾Ctrl+f            光标向右移动一个字符（相当于方向键右键）Ctrl+b            光标向左移动一个字符（相当于方向键左键）Ctrl+insert        复制命令行内容shift+insert    粘贴命令行内容Ctrl+k            剪切（删除）光标处到行尾的字符Ctrl+u            剪切（删除）光标处到行首的字符Ctrl+w            剪切（删除）光标钱的一个单词Ctrl+y            粘贴上面三个剪贴的内容Ctrl+c            中断终端正在执行的任务或者删除整行!!                执行上一条命令!pw                执行最近以pw开头的命令!pw:p            仅打印最近以pw开头的命令，不执行!num            执行历史命令列表的第num条命令!$                上一条命令的最后一个参数Esc+.            获取上一条命令最后的部分Esc+b            移动到当前单词的开头Esc+f            移动到当前单词的结尾</code></pre><h3 id="Linux命令行下查看命令帮助"><a href="#Linux命令行下查看命令帮助" class="headerlink" title="Linux命令行下查看命令帮助"></a>Linux命令行下查看命令帮助</h3><h4 id="man命令"><a href="#man命令" class="headerlink" title="man命令"></a>man命令</h4><p>man命令是Linux系统中最核心的命令之一，因为通过它可以查看其他linux命令的使用信息，当然还可以查看软件的配置文件、系统调用、库函数等的帮助信息</p><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><pre><code>man 参数选项 命令/文件</code></pre><h6 id="参数选项"><a href="#参数选项" class="headerlink" title="参数选项"></a>参数选项</h6><table><br><tr><br><td>数字参数</td><td>说明</td><td>解释说明</td><br></tr><br><tr><br><td>1</td><td>User Commands</td><td>用户命令相关</td><br></tr><br><tr><br><td>2</td><td>System Calls</td><td>系统调用相关</td><br></tr><br><tr><br><td>3</td><td>C Library Functions</td><td>C的库函数相关</td><br></tr><br><tr><br><td>4</td><td>Devices and Special Files</td><td>设备和特殊文件相关</td><br></tr><br><tr><br><td>5</td><td>File Formats and Conventions</td><td>文件格式和规则</td><br></tr><br><tr><br><td>6</td><td>Games et. AI.</td><td>游戏及其他</td><br></tr><br><tr><br><td>7</td><td>Miscellanea</td><td>宏，包，及其他杂项</td><br></tr><br><tr><br><td>8</td><td>System Administration tools and Deamons</td><td>系统管理员命令和进程</td><br></tr><br></table><h5 id="查阅的内容格式"><a href="#查阅的内容格式" class="headerlink" title="查阅的内容格式"></a>查阅的内容格式</h5><table><br><tr><br><td>man帮助信息中的标题</td><td>功能说明</td><br></tr><br><tr><br><td>NAME</td><td>命令说明介绍</td><br></tr><br><tr><br><td>SYNOPSIS</td><td>命令的基本使用语法</td><br></tr><br><tr><br><td>DESCRIPTION</td><td>命令行使用详细描述，以及相关参数选项说明</td><br></tr><br><tr><br><td>OPTION</td><td>命令相关参数选项说明</td><br></tr><br><tr><br><td>COMMANDS</td><td>在执行这个程序的时候，可以在此程序中执行的命令</td><br></tr><br><tr><br><td>FILES</td><td>程序涉及的相关文件</td><br></tr><br><tr><br><td>EXAMPLES</td><td>命令的一些例子</td><br></tr><br><tr><br><td>SEE ALSO</td><td>和命令相关的信息说明</td><br></tr><br><tr><br><td>BUGS（REPORTIONG BUGS）</td><td>命令对应缺陷问题的描述</td><br></tr><br><tr><br><td>COPYRIGHT</td><td>坂玄信息相关声明</td><br></tr><br><tr><br><td>AUTHOR</td><td>作者介绍</td><br></tr><br></table><h4 id="–help获取命令帮助"><a href="#–help获取命令帮助" class="headerlink" title="–help获取命令帮助"></a>–help获取命令帮助</h4><p>使用起来很简单啦，就是 “ 命令 –help “</p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><pre><code>--help 获取的是常用的帮助信息， man命令获取的是更过更复杂的帮助信息例如：    mv --help</code></pre><h4 id="help获取bash内置命令"><a href="#help获取bash内置命令" class="headerlink" title="help获取bash内置命令"></a>help获取bash内置命令</h4><p>在Linux系统里有一些特殊的命令，他们就是bash程序的内置命令，例如：cd，ls……<br>这些命令并不存在真实的程序文件，对于这些命令，查看帮助的方式就是使用help</p><h5 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h5><pre><code>help 命令例如：    help cd</code></pre><h4 id="info获取帮助信息"><a href="#info获取帮助信息" class="headerlink" title="info获取帮助信息"></a>info获取帮助信息</h4><p>Linux系统中的info命令是一个查看程序对应文档的命令，可以作为man及help命令的帮助补充，用的少</p><h5 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h5><pre><code>info 命令例如：    info ls</code></pre><h4 id="从互联网获取命令帮助信息"><a href="#从互联网获取命令帮助信息" class="headerlink" title="从互联网获取命令帮助信息"></a>从互联网获取命令帮助信息</h4><pre><code>简单一条 百度，google，总之怎么快怎么来。</code></pre><p><img src="https://i.imgur.com/wrkAmPX.jpg" alt=""></p><h3 id="Linux的关机，重启，注销命令"><a href="#Linux的关机，重启，注销命令" class="headerlink" title="Linux的关机，重启，注销命令"></a>Linux的关机，重启，注销命令</h3><h4 id="shutdown命令"><a href="#shutdown命令" class="headerlink" title="shutdown命令"></a>shutdown命令</h4><h5 id="使用方法及例子"><a href="#使用方法及例子" class="headerlink" title="使用方法及例子"></a>使用方法及例子</h5><pre><code>shutdown [OPTION]... TIME[MESSAFE]shutdown [选项] 时间 信息通常形况下，一般用的比较多的就是 shutdown -h now 或者 shutdown -r now例子：    shutdown -h +1        #一分钟后关机    shutdown -r 11:00    #十一点关机</code></pre><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-r</td><td>重启系统，而不是关机</td><br></tr><br><tr><br><td>-h</td><td>关机</td><br></tr><br><tr><br><td>-H</td><td>关机，但是并不是完全关机，不常用</td><br></tr><br><tr><br><td>-P</td><td>关机，不常用</td><br></tr><br><tr><br><td>-c</td><td>取消正在执行的shutdown命令</td><br></tr><br><tr><br><td>-k</td><td>只发送关机提示，但是并不关机，就闹着玩玩</td><br></tr><br></table><h5 id="工作原理"><a href="#工作原理" class="headerlink" title="工作原理"></a>工作原理</h5><p>shutdown命令的工作原理为：一旦到达关机时间，shutdown命令就会发送请求给系统的init进程将系统调整到合适的运行级别（运行级别请参考runlevel命令，运行级别请查看/etc/inittab文件说明），其中0表示关机，6表示重启。所以，执行 “init 0”就表示关机，执行”init 6”表示重启</p><h4 id="halt-poweroff-reboot-重启关机命令"><a href="#halt-poweroff-reboot-重启关机命令" class="headerlink" title="halt/poweroff/reboot 重启关机命令"></a>halt/poweroff/reboot 重启关机命令</h4><h5 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h5><pre><code>reboot [OPTION]...halt [OPTION]...poweroff [OPTION]...通常情况下，执行这三个命令不带任何参数</code></pre><h5 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h5><pre><code>halt         #就是直接关机reboot         #就是直接重启poweroff    #就是直接关机</code></pre><h4 id="一些常见的关机，重启，注销命令"><a href="#一些常见的关机，重启，注销命令" class="headerlink" title="一些常见的关机，重启，注销命令"></a>一些常见的关机，重启，注销命令</h4><table><br><tr><br><td>命令</td><td>说明</td><br></tr><br><tr><br><td>shutdown -h now</td><td>立刻关机</td><br></tr><br><tr><br><td>shutdwn -h +1</td><td>一分钟后关机，+1也可以是时间点，例如：11：00</td><br></tr><br><tr><br><td>halt</td><td>立刻停止系统，需要人工关闭电源</td><br></tr><br><tr><br><td>init 0</td><td>切换运行级别到0，关机</td><br></tr><br><tr><br><td>poweroff</td><td>立刻停止系统，并且关闭电源</td><br></tr><br><tr><br><td>reboot</td><td>立刻重启</td><br></tr><br><tr><br><td>shutdown -r now</td><td>立刻重启</td><br></tr><br><tr><br><td>shutdown -r +1</td><td>一分钟后重启</td><br></tr><br><tr><br><td>init 6</td><td>切换运行级别到6，重启</td><br></tr><br><tr><br><td>logout</td><td>注销退出当前用户</td><br></tr><br><tr><br><td>exit</td><td>注销退出当前用户窗口</td><br></tr><br></table><h2 id="文件和目录操作命令"><a href="#文件和目录操作命令" class="headerlink" title="文件和目录操作命令"></a>文件和目录操作命令</h2><h3 id="pwd-显示当前所在的位置"><a href="#pwd-显示当前所在的位置" class="headerlink" title="pwd 显示当前所在的位置"></a>pwd 显示当前所在的位置</h3><h4 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h4><pre><code>pwd命令是 &quot;print working directory&quot;中每个单词的首字母缩写，其功能是显示当前工作目录的绝对路径。</code></pre><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>pwd [option]pwd [选项]</code></pre><h4 id="选项说明"><a href="#选项说明" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-L</td><td>logical首字母缩写，表示显示逻辑路径，取PWD系统环境变量的值</td><br></tr><br><tr><br><td>-P</td><td>physical首字符缩写，表示显示物理路径时如果当前目录路径是软链接文件，则会显示软链接文件对应的源文件</td><br></tr><br></table><pre><code>查看命令帮助时，我们经常会看到 &quot;-L,--logical&quot; 这样的选项格式，这种写法的意思是 -L 和 --logical 的功能是一样的。</code></pre><h4 id="高级范例"><a href="#高级范例" class="headerlink" title="高级范例"></a>高级范例</h4><p>为什么管理员会用到pwd命令呢？<br>这是因为我们通过命令行管理Linux时，经常会切换到不同的路径，而输入pwd命令可以随时查看当前的路径是什么。<br>其实，在喜荣忠使用Bash命令行就会自动显示用户当前所在的路径，但是默认情况下这种路径显示不全。  </p><p>当然可以通过修改PS1对应的值来改变；</p><h4 id="修改PS1"><a href="#修改PS1" class="headerlink" title="修改PS1"></a>修改PS1</h4><table><br><tr><br><td>PS1</td><td>含义</td><br></tr><br><tr><br><td>\d</td><td>代表日期，格式为 weekday month date</td><br></tr><br><tr><br><td>\H</td><td>完整的主机名称</td><br></tr><br><tr><br><td>\h</td><td>仅取主机的第一个名字</td><br></tr><br><tr><br><td>\t</td><td>显示时间为24小时格式，如：HH：MM：SS</td><br></tr><br><tr><br><td>\T</td><td>显示时间为12小时格式</td><br></tr><br><tr><br><td>\A</td><td>显示时间为24小时格式，如：HH：MM</td><br></tr><br><tr><br><td>\u</td><td>当前用户的账号信息</td><br></tr><br><tr><br><td>\v</td><td>BASH的版本信息</td><br></tr><br><tr><br><td>\w</td><td>显示完整的路径，其中家目录会以~替代</td><br></tr><br><tr><br><td>\W</td><td>利用basename取得工作目录名称，所以只会列出最后一个目录</td><br></tr><br><tr><br><td>#</td><td>执行的第几条命令</td><br></tr><br><tr><br><td>\$</td><td>提示字符，root用户为#，否则为$</td><br></tr><br></table><pre><code>因此，要查看当前PS1变量的值，可采用如下命令：    echo $PS1        #打印超级管理员对应的PS1值    打印出：[\u@\u \W]\$        #  @时一个分隔符，和邮箱地址中的@作用类似修改PS1变量对应的值：    PS1=&apos;[\u@\h \w]&apos;    #此命令仅临时生效    编辑 /etc/bashrc 文件，找到这个语句 [&quot;$PS1&quot;=&quot;\\s-\\v\\\$&quot;]&amp;&amp;PS1=&quot;[\u@\h \W]\\$&quot;    修改为：[&quot;$PS1&quot;=&quot;\\s-\\v\\\$&quot;]&amp;&amp;PS1=&quot;[\u@\h \w]\\$&quot;最后注销重启就行了</code></pre><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h3><h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><pre><code>cd命令时 &quot;change direcotry&quot;中每个单词的首字母缩写，其功能时从当前工作目录切换到制定的工作目录</code></pre><h4 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>cd [option] [dir]cd [选项] [目录]</code></pre><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-P</td><td>如果切换的目标目录是一个软链接，则会直接切换到软链接指向的真正物理目标目录，和pwd命令的-P选项功能类似</td><br></tr><br><tr><br><td>-L</td><td>功能与-P相反，如果切换的目标目录是一个软连接，则直接切换到软链接所在的目录</td><br></tr><br><tr><br><td>-</td><td>当只使用”-“选项时，将会从当前目录切换到系统环境变量”OLDPWD”对应值的目录路径</td><br></tr><br><tr><br><td>~</td><td>当只是用”~”选项时，将会从当前目录切换到系统环境变量”HOME”对应值的目录路径</td><br></tr><br><tr><br><td>..</td><td>当只是用”..”选项时，将会从当前目录切换到当前目录的上一级目录所在的路径</td><br></tr><br></table><h4 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h4><ul><li>cd /etc        进入系统etc目录</li><li>cd ..            返回上一级目录</li><li>cd ../../        退回当前目录的上两级目录</li><li>cd ~            切换到家目录</li><li>cd -            返回当前用户上一次所在的目录</li></ul><h3 id="mkdir创建目录"><a href="#mkdir创建目录" class="headerlink" title="mkdir创建目录"></a>mkdir创建目录</h3><ul><li>mkdir命令是”make directories”中每个单词的字母组成，其功能是创建目录，默认情况下要创建的目录已存在，则会报错。</li></ul><h4 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>mkdir [optioin] [directory]mkdir [选项] [目录]mkdir 可以同时创建多个目录，格式为 mkdir dir1 dir2 dir3 ...</code></pre><h4 id="选项说明-1"><a href="#选项说明-1" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-p</td><td>递归创建目录，即使要创建的目录已经存在也不会报错提示目录存在</td><br></tr><br><tr><br><td>-m</td><td>设置新创建目录的默认目录对应的权限</td><br></tr><br><tr><br><td>-v</td><td>显示创建目录的过程</td><br></tr><br></table><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>mkdir data             #创建data文件夹</li><li>mkdir oldboy/test        #创建oldboy文件夹并在oldboy目录下创建test目录</li><li>mkdir -pv oldboy1/test#创建oldboy目录并在oldboy目录下创建test目录，同时显示过程</li><li>mkdir -m 333 dir2        #创建dir2目录，并且设置权限为333</li><li>mkdir -pv oldboy/{dir1_1,dir1_2}/{dir2_1, dir2_2}…<ul><li>解释：</li><li>mkdir: created direcory ‘oldboy/dir1_1’</li><li>mkdir: created direcory ‘oldboy/dir1_1/dir2_1’</li><li>mkdir: created direcory ‘oldboy/dir1_1/dir2_2’</li><li>mkdir: created direcory ‘oldboy/dir1_2’</li><li>mkdir: created direcory ‘oldboy/dir1_2/dir2_1’</li><li>mkdir: created direcory ‘oldboy/dir1_2/dir2_2’</li></ul></li></ul><h3 id="touch-创建空文件或改变文件的时间戳属性"><a href="#touch-创建空文件或改变文件的时间戳属性" class="headerlink" title="touch 创建空文件或改变文件的时间戳属性"></a>touch 创建空文件或改变文件的时间戳属性</h3><ul><li>touch 有两个功能<ul><li>创建新的空文件</li><li>改变已有文件的时间戳属性</li></ul></li></ul><h4 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>touch [optioini] [file]touch [选项]    [文件]</code></pre><ul><li>touch 是创建空的文件， mkdir 是创建空的目录，是不一样的</li></ul><h4 id="选项说明-2"><a href="#选项说明-2" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-a</td><td>只更改指定文件的最后访问时间</td><br></tr><br><tr><br><td>-d STRING</td><td>使用字符串STRING代表的时间作为模板设置指定文件的时间属性</td><br></tr><br><tr><br><td>-m</td><td>只更改指定文件的最后修改时间</td><br></tr><br><tr><br><td>-r file</td><td>将指定问及爱你的时间属性这是为与模板文件file的时间属性相同</td><br></tr><br><tr><br><td>-t STAMP</td><td>使用[[CC]YY]MMDDhhmm[.ss]格式的时间设置文件的时间属性，从左到右依次是：世纪，年，月，日，时，分，秒</td><br></tr><br></table><h4 id="使用范例-1"><a href="#使用范例-1" class="headerlink" title="使用范例"></a>使用范例</h4><ul><li>touch test.txt            #创建空的文件test.txt</li><li>touch a.txt b.txt         #同时创建多个文件</li><li>touch stu{01..05}.txt        #同时创建01~05文件</li><li>stat test.txt                #用stat命令查看文件是时间戳属性</li><li>touch test.txt            #更改最后的修改的时间为当前时间</li><li>touch -d 20201001 test.txt#修改时间更改为2020年</li><li>touch -r a.txt test.txt    #修改test.txt的时间属性与a.txt时间属性一致</li></ul><h4 id="时间戳形式"><a href="#时间戳形式" class="headerlink" title="时间戳形式"></a>时间戳形式</h4><ul><li><p>stat命令对应的时间戳</p><ul><li>Access:     最后访问时间</li><li>Modify:    最后修改文件时间</li><li>Change:    最后改变文件状态的时间</li></ul></li><li><p>ls命令对应的时间戳</p><ul><li>mtime:    最后修改时间(ls -lt)</li><li>ctime:    状态改变时间(ls -lc)</li><li>atime:    最后访问时间(ls -lu)</li></ul></li></ul><h3 id="ls-显示目录下的内容及相关属性"><a href="#ls-显示目录下的内容及相关属性" class="headerlink" title="ls 显示目录下的内容及相关属性"></a>ls 显示目录下的内容及相关属性</h3><ul><li>ls命令可以理解为英文单词list的缩写，其功能是列出列表的内容及其内容属性</li></ul><h4 id="语法格式-6"><a href="#语法格式-6" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>ls [option] [file]ls [选项] [&lt;文件或目录&gt;]</code></pre><h4 id="选项说明-3"><a href="#选项说明-3" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-l</td><td>使用长格式列出文件及目录信息</td><br></tr><br><tr><br><td>-a</td><td>显示目录下的所有文件，包括以’.’字符开始的隐藏文件</td><br></tr><br><tr><br><td>-t</td><td>根据最后的修改时间(mtime)排序，默认是按文件名排序</td><br></tr><br><tr><br><td>-r</td><td>以相反次序排序</td><br></tr><br><tr><br><td>-F</td><td>在条目后加上文件类型的只是符号(*,.,=,@,|中的一个)</td><br></tr><br><tr><br><td>-p</td><td>直在目录后面加上 ‘/‘</td><br></tr><br><tr><br><td>-i</td><td>显示inode节点信息</td><br></tr><br><tr><br><td>-d</td><td>当遇到目录时，列出目录本身而非目录内的文件，并不跟随符号链接</td><br></tr><br><tr><br><td>-h</td><td>以人类可读的信息显示文件或目录大小</td><br></tr><br><tr><br><td>-A</td><td>列出所有文件，包括隐藏文件，但不包括’.’’..’</td><br></tr><br><tr><br><td>-S</td><td>根据文件大小排序</td><br></tr><br><tr><br><td>-R</td><td>递归列数所有子目录</td><br></tr><br><tr><br><td>-x</td><td>逐行列出项目而不是逐栏列出</td><br></tr><br><tr><br><td>-X</td><td>根据扩展名排序</td><br></tr><br><tr><br><td>-c</td><td>根据状态改变时间排序(ctime)</td><br></tr><br><tr><br><td>-u</td><td>根据最后访问时间排序(atime)</td><br></tr><br><tr><br><td>-color={never,always,auto}</td><td>不同的文件类型显示不同的颜色参数，never不现实，auto自动，always总是显示</td><br></tr><br><tr><br><td>–full-time</td><td>以完整的时间格式输出</td><br></tr><br><tr><br><td>–time-style={full-iso,long-iso,iso,local}</td><td>以不同的时间格式输出，long-iso效果最好</td><br></tr><br><tr><br><td>–time={atime,ctiom}</td><td>按不同的时间属性输出</td><br></tr><br></table><h4 id="使用范例-2"><a href="#使用范例-2" class="headerlink" title="使用范例"></a>使用范例</h4><ul><li>ls                #不带参数</li><li>ls -a                #显示’.’</li><li>ls -A                #显示所有文件，包括隐藏文件</li><li>ls -l                #长格式输出文件类型，权限，链接数，属组，时间等</li><li>ls -l –time-style=long-iso #以long-iso方式显示时间</li><li>ls -F                #显示文件，文件夹后加上’/‘</li><li>当然你也可以用alias方法给原本很长ls命令取个别名<ul><li>alias lst=’ls -l –time-style=long-iso’<ul><li>给 ls -l –time-style=long-iso 起别名为 lst</li></ul></li></ul></li><li><p>ls -F                #给文件夹后加上’/‘，其他文件加上其他字符</p><ul><li>‘*’    可执行的普通文件</li><li>‘/‘    目录</li><li>‘=’    套接字(sockets)</li><li>‘|’    FIFOS</li><li>‘@’    符号链接</li></ul></li><li><p>ls -lhi</p><ul><li>命令对应列数意义</li><li>第一列：    inode索引节点的编号</li><li>第二列:    文件类型及权限</li><li>第三列：    硬连接个数</li><li>第四列:    文件或目录所属的用户</li><li>第五列：    文件或目录所属的组</li><li>第六列：    文件或目录的大小</li><li>第七，八，九列：    文件或目录的修改时间</li><li>第十列：    实际的文件名或目录名</li></ul></li></ul><h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp 复制文件或目录"></a>cp 复制文件或目录</h3><ul><li>cp命令可以理解为英文单词copy的缩写，其功能为复制文件或目录</li></ul><h4 id="语法格式-7"><a href="#语法格式-7" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>cp [option] [source] [dest]cp [选项] [源文件] [目标文件]</code></pre><h4 id="选项说明-4"><a href="#选项说明-4" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-p</td><td>复制文件时保持源文件的所有者，权限信息及时间属性</td><br></tr><br><tr><br><td>-d</td><td>如果复制的源文件是符号链接，那么仅复制链接本身，而且保留符号链接所指向的目标文件或目录</td><br></tr><br><tr><br><td>-r</td><td>递归复制目录，即复制目录下的所有层级的子目录及文件</td><br></tr><br><tr><br><td>-a</td><td>等同于上面的p,d,r这三个选项功能的综合</td><br></tr><br><tr><br><td>-i</td><td>覆盖已有文件前提示用户确认</td><br></tr><br><tr><br><td>-t</td><td>默认情况下命令格式是 ‘cp源文件 目标文件’，使用-t后变成 ‘cp 目标文件 源文件’</td><br></tr><br></table><h4 id="使用范例-3"><a href="#使用范例-3" class="headerlink" title="使用范例"></a>使用范例</h4><ul><li>cp -i test.file file1.test</li></ul><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><pre><code>arch 显示机器的处理器架构(1) uname -m 显示机器的处理器架构(2) uname -r 显示正在使用的内核版本 dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) hdparm -i /dev/hda 罗列一个磁盘的架构特性 hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 cat /proc/cpuinfo 显示CPU info的信息 cat /proc/interrupts 显示中断 cat /proc/meminfo 校验内存使用 cat /proc/swaps 显示哪些swap被使用 cat /proc/version 显示内核的版本 cat /proc/net/dev 显示网络适配器及统计 cat /proc/mounts 显示已加载的文件系统 lspci -tv 罗列 PCI 设备 lsusb -tv 显示 USB 设备 date 显示系统日期 cal 2007 显示2007年的日历表 date 041217002007.00 设置日期和时间 - 月日时分年.秒 clock -w 将时间修改保存到 BIOS </code></pre><h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><pre><code>cd /home 进入 &apos;/ home&apos; 目录&apos; cd .. 返回上一级目录 cd ../.. 返回上两级目录 cd 进入个人的主目录 cd ~user1 进入个人的主目录 cd - 返回上次所在的目录 pwd 显示工作路径 ls 查看目录中的文件 ls -F 查看目录中的文件 ls -l 显示文件和目录的详细资料 ls -a 显示隐藏文件 ls *[0-9]* 显示包含数字的文件名和目录名 tree 显示文件和目录由根目录开始的树形结构(1) lstree 显示文件和目录由根目录开始的树形结构(2) mkdir dir1 创建一个叫做 &apos;dir1&apos; 的目录&apos; mkdir dir1 dir2 同时创建两个目录 mkdir -p /tmp/dir1/dir2 创建一个目录树 rm -f file1 删除一个叫做 &apos;file1&apos; 的文件&apos; rmdir dir1 删除一个叫做 &apos;dir1&apos; 的目录&apos; rm -rf dir1 删除一个叫做 &apos;dir1&apos; 的目录并同时删除其内容 rm -rf dir1 dir2 同时删除两个目录及它们的内容 mv dir1 new_dir 重命名/移动 一个目录 cp file1 file2 复制一个文件 cp dir/* . 复制一个目录下的所有文件到当前工作目录 cp -a /tmp/dir1 . 复制一个目录到当前工作目录 cp -a dir1 dir2 复制一个目录 ln -s file1 lnk1 创建一个指向文件或目录的软链接 ln file1 lnk1 创建一个指向文件或目录的物理链接 touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm) file file1 outputs the mime type of the file as text iconv -l 列出已知的编码 iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding. find . -maxdepth 1 -name *.jpg -print -exec convert &quot;{}&quot; -resize 80x60 &quot;thumbs/{}&quot; \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick) </code></pre><h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><pre><code>find / -name file1 从 &apos;/&apos; 开始进入根文件系统搜索文件和目录 find / -user user1 搜索属于用户 &apos;user1&apos; 的文件和目录 find /home/user1 -name \*.bin 在目录 &apos;/ home/user1&apos; 中搜索带有&apos;.bin&apos; 结尾的文件 find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件 find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 find / -name \*.rpm -exec chmod 755 &apos;{}&apos; \; 搜索以 &apos;.rpm&apos; 结尾的文件并定义其权限 find / -xdev -name \*.rpm 搜索以 &apos;.rpm&apos; 结尾的文件，忽略光驱、捷盘等可移动设备 locate \*.ps 寻找以 &apos;.ps&apos; 结尾的文件 - 先运行 &apos;updatedb&apos; 命令 whereis halt 显示一个二进制文件、源码或man的位置 which halt 显示一个二进制文件或可执行文件的完整路径 </code></pre><h2 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h2><pre><code>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 &apos;/ mnt/hda2&apos; 已经存在 umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 &apos;/ mnt/hda2&apos; 退出 fuser -km /mnt/hda2 当设备繁忙时强制卸载 umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 mount /dev/fd0 /mnt/floppy 挂载一个软盘 mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件 mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统 mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备 mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享 </code></pre><h2 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h2><pre><code>df -h 显示已经挂载的分区列表 ls -lSr |more 以尺寸大小排列文件和目录 du -sh dir1 估算目录 &apos;dir1&apos; 已经使用的磁盘空间&apos; du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小 rpm -q -a --qf &apos;%10{SIZE}t%{NAME}n&apos; | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) dpkg-query -W -f=&apos;${Installed-Size;10}t${Package}n&apos; | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统) </code></pre><h2 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h2><pre><code>groupadd group_name 创建一个新用户组 groupdel group_name 删除一个用户组 groupmod -n new_group_name old_group_name 重命名一个用户组 useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 &quot;admin&quot; 用户组的用户 useradd user1 创建一个新用户 userdel -r user1 删除一个用户 ( &apos;-r&apos; 排除主目录) usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性 passwd 修改口令 passwd user1 修改一个用户的口令 (只允许root执行) chage -E 2005-12-31 user1 设置用户口令的失效期限 pwck 检查 &apos;/etc/passwd&apos; 的文件格式和语法修正以及存在的用户 grpck 检查 &apos;/etc/passwd&apos; 的文件格式和语法修正以及存在的群组 newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 </code></pre><h2 id="文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h2><pre><code>ls -lh 显示权限 ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示 chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 chown user1 file1 改变一个文件的所有人属性 chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 chgrp group1 file1 改变文件的群组 chown user1:group1 file1 改变一个文件的所有人和群组属性 find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 chmod u-s /bin/file1 禁用一个二进制文件的 SUID位 chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 chmod g-s /home/public 禁用一个目录的 SGID 位 chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 chmod o-t /home/public 禁用一个目录的 STIKY 位 </code></pre><h2 id="文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</h2><pre><code>chattr +a file1 只允许以追加方式读写文件 chattr +c file1 允许这个文件能被内核自动压缩/解压 chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件 chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 chattr +s file1 允许一个文件被安全地删除 chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 lsattr 显示特殊的属性 </code></pre><h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h2><pre><code>bunzip2 file1.bz2 解压一个叫做 &apos;file1.bz2&apos;的文件 bzip2 file1 压缩一个叫做 &apos;file1&apos; 的文件 gunzip file1.gz 解压一个叫做 &apos;file1.gz&apos;的文件 gzip file1 压缩一个叫做 &apos;file1&apos;的文件 gzip -9 file1 最大程度压缩 rar a file1.rar test_file 创建一个叫做 &apos;file1.rar&apos; 的包 rar a file1.rar file1 file2 dir1 同时压缩 &apos;file1&apos;, &apos;file2&apos; 以及目录 &apos;dir1&apos; rar x file1.rar 解压rar包 unrar x file1.rar 解压rar包 tar -cvf archive.tar file1 创建一个非压缩的 tarball tar -cvf archive.tar file1 file2 dir1 创建一个包含了 &apos;file1&apos;, &apos;file2&apos; 以及 &apos;dir1&apos;的档案文件 tar -tf archive.tar 显示一个包中的内容 tar -xvf archive.tar 释放一个包 tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包 tar -jxvf archive.tar.bz2 解压一个bzip2格式的压缩包 tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包 tar -zxvf archive.tar.gz 解压一个gzip格式的压缩包 zip file1.zip file1 创建一个zip格式的压缩包 zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 unzip file1.zip 解压一个zip格式压缩包 </code></pre><h2 id="RPM-包-（Fedora-Redhat及类似系统）"><a href="#RPM-包-（Fedora-Redhat及类似系统）" class="headerlink" title="RPM 包 - （Fedora, Redhat及类似系统）"></a>RPM 包 - （Fedora, Redhat及类似系统）</h2><pre><code>rpm -ivh package.rpm 安装一个rpm包 rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告 rpm -U package.rpm 更新一个rpm包但不改变其配置文件 rpm -F package.rpm 更新一个确定已经安装的rpm包 rpm -e package_name.rpm 删除一个rpm包 rpm -qa 显示系统中所有已经安装的rpm包 rpm -qa | grep httpd 显示所有名称中包含 &quot;httpd&quot; 字样的rpm包 rpm -qi package_name 获取一个已安装包的特殊信息 rpm -qg &quot;System Environment/Daemons&quot; 显示一个组件的rpm包 rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表 rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表 rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表 rpm -q package_name --whatprovides 显示一个rpm包所占的体积 rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l rpm -q package_name --changelog 显示一个rpm包的修改历史 rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供 rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表 rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书 rpm --checksig package.rpm 确认一个rpm包的完整性 rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性 rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 rpm -Va 检查系统中所有已安装的rpm包- 小心使用 rpm -Vp package.rpm 确认一个rpm包还未安装 rpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件 rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包 rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包 </code></pre><h2 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h2><pre><code>yum install package_name 下载并安装一个rpm包 yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 yum update package_name.rpm 更新当前系统中所有安装的rpm包 yum update package_name 更新一个rpm包 yum remove package_name 删除一个rpm包 yum list 列出当前系统中安装的所有包 yum search package_name 在rpm仓库中搜寻软件包 yum clean packages 清理rpm缓存删除下载的包 yum clean headers 删除所有头文件 yum clean all 删除所有缓存的包和头文件 </code></pre><h2 id="DEB-包-Debian-Ubuntu-以及类似系统"><a href="#DEB-包-Debian-Ubuntu-以及类似系统" class="headerlink" title="DEB 包 (Debian, Ubuntu 以及类似系统)"></a>DEB 包 (Debian, Ubuntu 以及类似系统)</h2><pre><code>dpkg -i package.deb 安装/更新一个 deb 包 dpkg -r package_name 从系统删除一个 deb 包 dpkg -l 显示系统中所有已经安装的 deb 包 dpkg -l | grep httpd 显示所有名称中包含 &quot;httpd&quot; 字样的deb包 dpkg -s package_name 获得已经安装在系统中一个特殊包的信息 dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表 dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表 dpkg -S /bin/ping 确认所给的文件由哪个deb包提供 </code></pre><h2 id="APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a>APT 软件工具 (Debian, Ubuntu 以及类似系统)</h2><pre><code>apt-get install package_name 安装/更新一个 deb 包 apt-cdrom install package_name 从光盘安装/更新一个 deb 包 apt-get update 升级列表中的软件包 apt-get upgrade 升级所有已安装的软件 apt-get remove package_name 从系统删除一个deb包 apt-get check 确认依赖的软件仓库正确 apt-get clean 从下载的软件包中清理缓存 apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 </code></pre><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><pre><code>cat file1 从第一个字节开始正向查看文件的内容 tac file1 从最后一行开始反向查看一个文件的内容 more file1 查看一个长文件的内容 less file1 类似于 &apos;more&apos; 命令，但是它允许在文件中和正向操作一样的反向操作 head -2 file1 查看一个文件的前两行 tail -2 file1 查看一个文件的最后两行 tail -f /var/log/messages 实时查看被添加到一个文件中的内容 </code></pre><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><pre><code>cat file1 file2 ... | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中 cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中 grep Aug /var/log/messages 在文件 &apos;/var/log/messages&apos;中查找关键词&quot;Aug&quot; grep ^Aug /var/log/messages 在文件 &apos;/var/log/messages&apos;中查找以&quot;Aug&quot;开始的词汇 grep [0-9] /var/log/messages 选择 &apos;/var/log/messages&apos; 文件中所有包含数字的行 grep Aug -R /var/log/* 在目录 &apos;/var/log&apos; 及随后的目录中搜索字符串&quot;Aug&quot; sed &apos;s/stringa1/stringa2/g&apos; example.txt 将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot; sed &apos;/^$/d&apos; example.txt 从example.txt文件中删除所有空白行 sed &apos;/ *#/d; /^$/d&apos; example.txt 从example.txt文件中删除所有注释和空白行 echo &apos;esempio&apos; | tr &apos;[:lower:]&apos; &apos;[:upper:]&apos; 合并上下单元格内容 sed -e &apos;1d&apos; result.txt 从文件example.txt 中排除第一行 sed -n &apos;/stringa1/p&apos; 查看只包含词汇 &quot;string1&quot;的行 sed -e &apos;s/ *$//&apos; example.txt 删除每一行最后的空白字符 sed -e &apos;s/stringa1//g&apos; example.txt 从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部 sed -n &apos;1,5p;5q&apos; example.txt 查看从第一行到第5行内容 sed -n &apos;5p;5q&apos; example.txt 查看第5行 sed -e &apos;s/00*/0/g&apos; example.txt 用单个零替换多个零 cat -n file1 标示文件的行数 cat example.txt | awk &apos;NR%2==1&apos; 删除example.txt文件中的所有偶数行 echo a b c | awk &apos;{print $1}&apos; 查看一行第一栏 echo a b c | awk &apos;{print $1,$3}&apos; 查看一行的第一和第三栏 paste file1 file2 合并两个文件或两栏的内容 paste -d &apos;+&apos; file1 file2 合并两个文件或两栏的内容，中间用&quot;+&quot;区分 sort file1 file2 排序两个文件的内容 sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份) sort file1 file2 | uniq -u 删除交集，留下其他的行 sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件) comm -1 file1 file2 比较两个文件的内容只删除 &apos;file1&apos; 所包含的内容 comm -2 file1 file2 比较两个文件的内容只删除 &apos;file2&apos; 所包含的内容 comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分 </code></pre><h2 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h2><pre><code>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html recode -l | more 显示所有允许的转换格式 </code></pre><h2 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h2><pre><code>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块 fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性 fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性 fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 </code></pre><h2 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h2><pre><code>mkfs /dev/hda1 在hda1分区创建一个文件系统 mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统 mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统 mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统 fdformat -n /dev/fd0 格式化一个软盘 mkswap /dev/hda3 创建一个swap文件系统 </code></pre><h2 id="SWAP文件系统"><a href="#SWAP文件系统" class="headerlink" title="SWAP文件系统"></a>SWAP文件系统</h2><pre><code>mkswap /dev/hda3 创建一个swap文件系统 swapon /dev/hda3 启用一个新的swap文件系统 swapon /dev/hda2 /dev/hdb3 启用两个swap分区 </code></pre><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><pre><code>dump -0aj -f /tmp/home0.bak /home 制作一个 &apos;/home&apos; 目录的完整备份 dump -1aj -f /tmp/home0.bak /home 制作一个 &apos;/home&apos; 目录的交互式备份 restore -if /tmp/home0.bak 还原一个交互式备份 rsync -rogpav --delete /home /tmp 同步两边的目录 rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录 rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录 dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &apos;dd of=hda.gz&apos; 通过ssh在远程主机上执行一次备份本地磁盘的操作 dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件 tar -Puf backup.tar /home/user 执行一次对 &apos;/home/user&apos; 目录的交互式备份操作 ( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &apos;cd /home/share/ &amp;&amp; tar x -p&apos; 通过ssh在远程目录中复制一个目录内容 ( tar c /home ) | ssh -C user@ip_addr &apos;cd /home/backup-home &amp;&amp; tar x -p&apos; 通过ssh在远程目录中复制一个本地目录 tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接 find /home/user1 -name &apos;*.txt&apos; | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 &apos;.txt&apos; 结尾的文件到另一个目录 find /var/log -name &apos;*.log&apos; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 &apos;.log&apos; 结尾的文件并做成一个bzip包 dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作 dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容 </code></pre><h2 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h2><pre><code>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容 mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件 mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件 mkisofs -J -allow-leading-dots -R -V &quot;Label CD&quot; -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件 cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件 gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件 mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件 cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中 cd-paranoia -- &quot;-3&quot; 从一个CD光盘转录音轨到 wav 文件中（参数-3） cdrecord --scanbus 扫描总线以识别scsi通道 dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD </code></pre><h2 id="网络-（以太网和WIFI无线）"><a href="#网络-（以太网和WIFI无线）" class="headerlink" title="网络 - （以太网和WIFI无线）"></a>网络 - （以太网和WIFI无线）</h2><pre><code>ifconfig eth0 显示一个以太网卡的配置 ifup eth0 启用一个 &apos;eth0&apos; 网络设备 ifdown eth0 禁用一个 &apos;eth0&apos; 网络设备 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址 ifconfig eth0 promisc 设置 &apos;eth0&apos; 成混杂模式以嗅探数据包 (sniffing) dhclient eth0 以dhcp模式启用 &apos;eth0&apos; route -n show routing table route add -net 0/0 gw IP_Gateway configura default gateway route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network &apos;192.168.0.0/16&apos; route del 0/0 gw IP_gateway remove static route echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward activate ip routing hostname show hostname of system host www.example.com lookup hostname to resolve name to ip address and viceversa(1) nslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2) ip link show show link status of all interfaces mii-tool eth0 show link status of &apos;eth0&apos; ethtool eth0 show statistics of network card &apos;eth0&apos; netstat -tup show all active network connections and their PID netstat -tupl show all network services listening on the system and their PID tcpdump tcp port 80 show all HTTP traffic iwlist scan show wireless networks iwconfig eth1 show configuration of a wireless network card hostname show hostname host www.example.com lookup hostname to resolve name to ip address and viceversa nslookup www.example.com lookup hostname to resolve name to ip address and viceversa whois www.example.com lookup on Whois database </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux命令行&quot;&gt;&lt;a href=&quot;#Linux命令行&quot; class=&quot;headerlink&quot; title=&quot;Linux命令行&quot;&gt;&lt;/a&gt;Linux命令行&lt;/h2&gt;&lt;p&gt;大多是互联网企业在安装系统甚至不会安装图形管理软件包，而是直接使用文本模式安装，因此登陆后直
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BootStrap框架</title>
    <link href="http://yoursite.com/2018/10/22/BootStrap%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2018/10/22/BootStrap框架/</id>
    <published>2018-10-22T11:14:38.000Z</published>
    <updated>2018-10-23T05:48:56.912Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是BootStrap"><a href="#什么是BootStrap" class="headerlink" title="什么是BootStrap"></a>什么是BootStrap</h2><ul><li>bootstrap 是当下非常经典且流行的前端框架（界面工具集）很多公司的前后端项目都有继承bootstrap</li><li>bootstrap的特点：灵活借简洁，代码优雅，美观大方，直观强悍的前端开发框架</li><li>GitHub：<a href="https://github.com/twbs/boostrap" target="_blank" rel="noopener">https://github.com/twbs/boostrap</a></li><li>官网：<ul><li><a href="http://www.bootcss/com/" target="_blank" rel="noopener">http://www.bootcss/com/</a></li><li><a href="http://getbootstrap.com/" target="_blank" rel="noopener">http://getbootstrap.com/</a></li></ul></li></ul><h2 id="使用Bootstrap"><a href="#使用Bootstrap" class="headerlink" title="使用Bootstrap"></a>使用Bootstrap</h2><ul><li><p>npminstall bootstrap –save<br>  (通过npm进行安装，适合工程化开发，比如集成到react或者Node项目中)</p></li><li><p>gitHub直接下载<br>  (适合起步，全面学习)</p></li></ul><h3 id="Bootstrap初始化模板"><a href="#Bootstrap初始化模板" class="headerlink" title="Bootstrap初始化模板"></a>Bootstrap初始化模板</h3><pre><code>&lt;!DOCTYPE html&gt;&lt;html lang=&quot;zh-CN&quot;&gt;  &lt;head&gt;    &lt;meta charset=&quot;utf-8&quot;&gt;    &lt;meta http-equiv=&quot;X-UA-Compatible&quot; content=&quot;IE=edge&quot;&gt;    &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1&quot;&gt;    &lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;    &lt;title&gt;test1&lt;/title&gt;    &lt;link rel=&quot;stylesheet&quot; href=&quot;utlise/bootstrap-3.3.7-dist/css/bootstrap.min.css&quot;&gt;    &lt;link href=&quot;css/index.css&quot; rel=&quot;stylesheet&quot;&gt;    &lt;!-- &lt;script src=&quot;https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js&quot;&gt;&lt;/script&gt; --&gt;    &lt;script src=&quot;utlise/jquery-3.3.1.js&quot; &gt;&lt;/script&gt;    &lt;script src=&quot;utlise/bootstrap-3.3.7-dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;  &lt;/head&gt;  &lt;body&gt;    &lt;h1&gt;你好，世界！&lt;/h1&gt;    &lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js&quot;&gt;&lt;/script&gt;    &lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;    &lt;script src=&quot;https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;  &lt;/body&gt;&lt;/html&gt;</code></pre><p><img src="https://i.imgur.com/2Z1W4tR.png" alt=""></p><pre><code>自己的定义的css和js一定要在bootstrap定义的css和js之后，以免bootstrap定义的东西覆盖了我们定义的</code></pre><h2 id="使用Boosstrap"><a href="#使用Boosstrap" class="headerlink" title="使用Boosstrap"></a>使用Boosstrap</h2><pre><code>在官网中查看信息即可</code></pre><ul><li><a href="https://v3.bootcss.com/components/#glyphicons" target="_blank" rel="noopener">https://v3.bootcss.com/components/#glyphicons</a></li><li><a href="https://v3.bootcss.com/css/#overview" target="_blank" rel="noopener">https://v3.bootcss.com/css/#overview</a></li></ul><h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><pre><code>&lt;span class=&quot;glyphicon glyphicon-envelope&quot; style=&quot;font-size:40px&quot;&gt;&lt;/span&gt;这样的一个文字信息图标就出来了</code></pre><h4 id="进图条"><a href="#进图条" class="headerlink" title="进图条"></a>进图条</h4><pre><code>&lt;div class=&quot;progress&quot;&gt;  &lt;div class=&quot;progress-bar&quot; role=&quot;progressbar&quot; aria-valuenow=&quot;60&quot; aria-valuemin=&quot;0&quot; aria-valuemax=&quot;100&quot; style=&quot;width: 60%;&quot;&gt;    60%  &lt;/div&gt;&lt;/div&gt;</code></pre><h4 id="面板-panel"><a href="#面板-panel" class="headerlink" title="面板 panel"></a>面板 panel</h4><pre><code>&lt;div class=&quot;panel panel-default panel-success&quot;&gt;    &lt;!-- 面板类似于一个栏目框，heading为标题，panel-success 只可以改变标题颜色  --&gt;    &lt;div class=&quot;panel-heading&quot;&gt;面板标题&lt;/div&gt;    &lt;div class=&quot;panel-body&quot;&gt;面板内容&lt;/div&gt;    &lt;div class=&quot;panel-footer&quot;&gt;面板脚注&lt;/div&gt;&lt;/div&gt;</code></pre><h4 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h4><pre><code>&lt;!-- Button trigger modal --&gt;</code></pre><button type="button" class="btn btn-primary btn-lg" data-toggle="modal" data-target="#myModal"><br>  Launch demo modal<br></button><!-- Modal --><pre><code>&lt;div class=&quot;modal fade&quot; id=&quot;myModal&quot; tabindex=&quot;-1&quot; role=&quot;dialog&quot; aria-labelledby=&quot;myModalLabel&quot;&gt;  &lt;div class=&quot;modal-dialog&quot; role=&quot;document&quot;&gt;    &lt;div class=&quot;modal-content&quot;&gt;      &lt;div class=&quot;modal-header&quot;&gt;        &lt;button type=&quot;button&quot; class=&quot;close&quot; data-dismiss=&quot;modal&quot; aria-label=&quot;Close&quot;&gt;&lt;span aria-hidden=&quot;true&quot;&gt;&amp;times;&lt;/span&gt;&lt;/button&gt;        &lt;h4 class=&quot;modal-title&quot; id=&quot;myModalLabel&quot;&gt;Modal title&lt;/h4&gt;      &lt;/div&gt;      &lt;div class=&quot;modal-body&quot;&gt;        ...      &lt;/div&gt;      &lt;div class=&quot;modal-footer&quot;&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-default&quot; data-dismiss=&quot;modal&quot;&gt;Close&lt;/button&gt;        &lt;button type=&quot;button&quot; class=&quot;btn btn-primary&quot;&gt;Save changes&lt;/button&gt;      &lt;/div&gt;    &lt;/div&gt;  &lt;/div&gt;&lt;/div&gt;</code></pre><h4 id="轮播图Carousel"><a href="#轮播图Carousel" class="headerlink" title="轮播图Carousel"></a>轮播图Carousel</h4><pre><code>&lt;div id=&quot;carousel-example-generic&quot; class=&quot;carousel slide&quot; data-ride=&quot;carousel&quot;&gt;  &lt;!-- Indicators --&gt;  &lt;ol class=&quot;carousel-indicators&quot;&gt;    &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;0&quot; class=&quot;active&quot;&gt;&lt;/li&gt;    &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;1&quot;&gt;&lt;/li&gt;    &lt;li data-target=&quot;#carousel-example-generic&quot; data-slide-to=&quot;2&quot;&gt;&lt;/li&gt;  &lt;/ol&gt;  &lt;!-- Wrapper for slides --&gt;  &lt;div class=&quot;carousel-inner&quot; role=&quot;listbox&quot;&gt;    &lt;div class=&quot;item active&quot;&gt;      &lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;      &lt;div class=&quot;carousel-caption&quot;&gt;        ...      &lt;/div&gt;    &lt;/div&gt;    &lt;div class=&quot;item&quot;&gt;      &lt;img src=&quot;...&quot; alt=&quot;...&quot;&gt;      &lt;div class=&quot;carousel-caption&quot;&gt;        ...      &lt;/div&gt;    &lt;/div&gt;    ...  &lt;/div&gt;  &lt;!-- Controls --&gt;  &lt;a class=&quot;left carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;prev&quot;&gt;    &lt;span class=&quot;glyphicon glyphicon-chevron-left&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;sr-only&quot;&gt;Previous&lt;/span&gt;  &lt;/a&gt;  &lt;a class=&quot;right carousel-control&quot; href=&quot;#carousel-example-generic&quot; role=&quot;button&quot; data-slide=&quot;next&quot;&gt;    &lt;span class=&quot;glyphicon glyphicon-chevron-right&quot; aria-hidden=&quot;true&quot;&gt;&lt;/span&gt;    &lt;span class=&quot;sr-only&quot;&gt;Next&lt;/span&gt;  &lt;/a&gt;&lt;/div&gt;</code></pre><h4 id="其他的自行学习"><a href="#其他的自行学习" class="headerlink" title="其他的自行学习"></a>其他的自行学习</h4><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="响应式页面"><a href="#响应式页面" class="headerlink" title="响应式页面"></a>响应式页面</h3><pre><code>因为页面不仅要跑到pc端，还要跑到手机端，所以页面要做成响应式的页面</code></pre><p><code>开启视口模式</code></p><pre><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=decice-witdth, initial-scalse=1.0&quot;&gt; </code></pre><p><img src="https://i.imgur.com/hkXJ8WL.png" alt=""></p><p><img src="https://i.imgur.com/usYXan5.png" alt=""></p><h4 id="自己写自适应"><a href="#自己写自适应" class="headerlink" title="自己写自适应"></a>自己写自适应</h4><h5 id="css"><a href="#css" class="headerlink" title="css"></a>css</h5><pre><code>@media screen and (max-width: 768px){    .contariner{        width: 100%;    }}@media screen and (min-width: 760) and (max-width: 992px){    .contariner{        width: 750px;    }}@media screen and (max-width: 992) and (max-width: 1200px){    .contariner{        width: 970px;    }}@media screen and (min-width: 1200){    .contariner{        width: 1170px;    }}这些参数值都是根据上面的 栅格参数 制定的</code></pre><h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><pre><code>window.addEventListener(&quot;load&quot;, functino(){    //获取常量 类 和 屏幕宽高    let contariner = document.querySelector(&quot;.container&quot;);    let clientw = 0;        // 监听窗口的大小变化    window.addEventListener(&quot;resize&quot;, function(){        clientw = window.innerWidth;        if(clientw &gt;= 1200) {//超大屏幕            container.styler.width = &quot;1170px&quot;;        } else if(client &gt;= 992) {//大屏幕            container.styler.width = &quot;970px&quot;;        } else if(client &gt;= 760) { //小屏幕            container.styler.width = &quot;750px&quot;;        } else {            container.styler.width = &quot;100%&quot;;        }    })});</code></pre><h3 id="设计页面"><a href="#设计页面" class="headerlink" title="设计页面"></a>设计页面</h3><pre><code>栅格布局，bootstrap 把一行分成12列，可以通过自由组合，去组成12列</code></pre><p><img src="https://i.imgur.com/pDedAyZ.png" alt=""></p><pre><code>bootstrap 也帮你定义好了这 12 种去实现</code></pre><p><img src="https://i.imgur.com/1BV65wQ.png" alt=""></p><pre><code>如果想要某些模块在小屏幕不显示 可用：</code></pre><p><img src="https://i.imgur.com/iy5kQej.png" alt=""></p><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><p><img src="https://i.imgur.com/DvEDqx3.png" alt=""></p><p><img src="https://i.imgur.com/hKhXyao.png" alt=""></p><pre><code>之后选择下载，解压，导入到工程种</code></pre><p><img src="https://i.imgur.com/yRrzEuu.png" alt=""></p><pre><code>其中 icon-wifi 的 content 的值 来自于 网页demo中注意 content 中 &quot; \ &quot;的方向，切忌写反然后就可以直接在 &lt;span class=&quot;icon-wifi&quot;&gt;&lt;/span&gt;中使用即可</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是BootStrap&quot;&gt;&lt;a href=&quot;#什么是BootStrap&quot; class=&quot;headerlink&quot; title=&quot;什么是BootStrap&quot;&gt;&lt;/a&gt;什么是BootStrap&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;bootstrap 是当下非常经典且流行的前端框
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kali Linux 基础</title>
    <link href="http://yoursite.com/2018/10/16/Kali-Linux-%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2018/10/16/Kali-Linux-基础/</id>
    <published>2018-10-16T15:01:46.000Z</published>
    <updated>2018-10-16T15:12:38.721Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Proxy基本原理"><a href="#Proxy基本原理" class="headerlink" title="Proxy基本原理"></a>Proxy基本原理</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p><img src="https://i.imgur.com/zwl1iCN.png" alt=""></p><pre><code>终端机访问外部互联网资源，并不是直接连接到互联网上，而是通过一个代理主机，或者代理软件可能是在一个路由器中，网关上，或者在某个终端机中数据回来的时候也是通过代理返回的</code></pre><h4 id="访问本无法访问的服务器"><a href="#访问本无法访问的服务器" class="headerlink" title="访问本无法访问的服务器"></a>访问本无法访问的服务器</h4><pre><code>通过在香港的主机的代理服务，访问Google官网</code></pre><h4 id="Cache作用"><a href="#Cache作用" class="headerlink" title="Cache作用"></a>Cache作用</h4><pre><code>把一些请求直接缓存到代理服务器上</code></pre><h4 id="客户端访问授权"><a href="#客户端访问授权" class="headerlink" title="客户端访问授权"></a>客户端访问授权</h4><pre><code>对某些资源只允许代理服务器访问，而不允许终端机访问，从而禁止终端用户直接连接服务器上的资源</code></pre><h4 id="隐藏访问者的行踪"><a href="#隐藏访问者的行踪" class="headerlink" title="隐藏访问者的行踪"></a>隐藏访问者的行踪</h4><pre><code>配置代理服务用到的ip或者Cookie信息，来隐藏访问者的行踪</code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h3 id="透明代理"><a href="#透明代理" class="headerlink" title="透明代理"></a>透明代理</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Proxy基本原理&quot;&gt;&lt;a href=&quot;#Proxy基本原理&quot; class=&quot;headerlink&quot; title=&quot;Proxy基本原理&quot;&gt;&lt;/a&gt;Proxy基本原理&lt;/h2&gt;&lt;h3 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从0开始的JavaWeb---java篇</title>
    <link href="http://yoursite.com/2018/10/13/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JavaWeb-java%E7%AF%87/"/>
    <id>http://yoursite.com/2018/10/13/从0开始的JavaWeb-java篇/</id>
    <published>2018-10-13T02:12:37.000Z</published>
    <updated>2018-12-02T08:38:31.392Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件系统体系结构"><a href="#软件系统体系结构" class="headerlink" title="软件系统体系结构"></a>软件系统体系结构</h2><h3 id="B-S"><a href="#B-S" class="headerlink" title="B/S"></a>B/S</h3><pre><code>1. B/S结构即浏览器/服务器（Browser/Server）</code></pre><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><pre><code>只需要编写服务器端程序</code></pre><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><pre><code>安全性差</code></pre><h3 id="C-S"><a href="#C-S" class="headerlink" title="C/S"></a>C/S</h3><pre><code>1. C/S 结构即 客户端/服务器（Client/Server），例如QQ2. 需要编写服务器程序，以及客户端程序，例如我们安装的就是QQ的客户端</code></pre><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><pre><code>软件更新时需要同时更新客户端和服务器两端，比较麻烦</code></pre><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><pre><code>安全性比较好</code></pre><h3 id="Web资源"><a href="#Web资源" class="headerlink" title="Web资源"></a>Web资源</h3><h4 id="Web资源介绍"><a href="#Web资源介绍" class="headerlink" title="Web资源介绍"></a>Web资源介绍</h4><pre><code>1. html：静态资源2. Jsp/Servlet：动态资源当然除了JavaWeb程序，还有其他Web程序，例如：ASP，PHP等。</code></pre><h4 id="静态资源和动态资源的区别"><a href="#静态资源和动态资源的区别" class="headerlink" title="静态资源和动态资源的区别"></a>静态资源和动态资源的区别</h4><p><img src="https://i.imgur.com/6CCQ2RM.png" alt=""></p><h4 id="访问Web资源"><a href="#访问Web资源" class="headerlink" title="访问Web资源"></a>访问Web资源</h4><pre><code>打开浏览器，输入URL：    协议名：//域名：端口/路径，例如：https://www.baidu.com:8080/index.html</code></pre><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><pre><code>Web服务器的作用时接收客户端的请求，给客户端做出响应。对于JavaWeb程序而言，还需要有Jsp/Servlet容器，Jsp/Servlet容器的基本功能是把动态资源转会为静态资源，当然Jsp/Servlet容器不知这些功能。我们需要使用的是Web服务器和Jsp/Servlet容器，通常这两者会集于一身。下面是对JavaWeb的服务器：    1. Tomcat(Apache):当前应用最广的JavaWeb服务器    2. JBoss(RedHat红帽):支持JavaEE，应用比较广    3. GlassFlsh(Orcale):ORacle开发JavaWeb服务器，应用不是很广    4. Resin(Caucho)：支持JavaEE，应用越来越广    5. Weblogic(Orcale):要钱的！支持JavaEE，适合大型项目    6. Websphere（IBM）：要钱的！支持JavaEE，适合大型项目</code></pre><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="Tomcat简述"><a href="#Tomcat简述" class="headerlink" title="Tomcat简述"></a>Tomcat简述</h4><pre><code>Tomcat服务器由Apache提供，开源免费。由于Sun和其他公司参与到了Tomcat的开放中，所以最新的Jsp/Servlet规范总是能在Tomcat中体现出来。</code></pre><h4 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h4><h5 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h5><pre><code>自行百度</code></pre><h5 id="tomcat端口改变"><a href="#tomcat端口改变" class="headerlink" title="tomcat端口改变"></a>tomcat端口改变</h5><pre><code>自行百度</code></pre><h5 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h5><pre><code>自行百度</code></pre><h5 id="Tomcat目录结构"><a href="#Tomcat目录结构" class="headerlink" title="Tomcat目录结构"></a>Tomcat目录结构</h5><p><img src="https://i.imgur.com/J24crxY.png" alt=""></p><pre><code>/work    tomcat把由jsp生成的servlet放于目录下/webapps    当发布web应用时，默认情况下把web应用文件放于次目录下/logs    存放tomcat的日志文件/share/lib    存放所有web应用都可以访问的jar文件/common/lib    存放tomcat服务器以及所有web应用都可以访问的jar应用/server/webapps    存放tomcat自带的两个web应用：admin应用和manager应用/server/lib        存放tomcat服务器所需的jar文件/server        包含三个子目录：classes。lib和webapps/conf    存放tomcat服务器的各种配置文件，其中最重要的文件是server.xml/bin    存放Windows平台以及linux平台上启动和关闭tomcat的脚本文件</code></pre><h3 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h3><h4 id="创建一个静态网站"><a href="#创建一个静态网站" class="headerlink" title="创建一个静态网站"></a>创建一个静态网站</h4><pre><code>1. 在webapps目录下创建一个目录（命名必须不包含中文和空格），这个目录则为项目目录2. 在项目目录下创建一个html文件</code></pre><h4 id="创建一个动态网站"><a href="#创建一个动态网站" class="headerlink" title="创建一个动态网站"></a>创建一个动态网站</h4><pre><code>1. 在webapps目录下创建一个项目目录2. 在项目目录下创建如下内容    1. WEB-INF目录        1. WEB-INF目录下创建web.xml文件            1. xml文件中的内容，可以从其他的项目中复制        2. 创建一个lib目录，用户存放jar包        3. classes目录，用于存放自己写的class    2. 创建静态或动态页面WEB-INF下的项目，浏览器是不能访问的，所以为了安全起见，所以一些文件必须放到WEB-INF文件</code></pre><h4 id="配置外部应用"><a href="#配置外部应用" class="headerlink" title="配置外部应用"></a>配置外部应用</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><pre><code>conf/server.xml:打开server.xml文件，找到&lt;Host&gt;元素，在其中添加&lt;Context&gt;元素：    &lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot;            unpackWARs=&quot;true&quot; autoDeplay=&quot;true&quot;&gt;        &lt;Context path=&quot;hello&quot; docBase=&quot;C:/hello&quot;/&gt;    &lt;/Host&gt;1. path：制定当前应用的名称2. docBase：指定应用的物理位置3. 浏览器访问路径：http://localhost:8080/hello/index.xml</code></pre><p>​    </p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><pre><code>conf/catalana/localhost：在该目录下创建hello.xml文件，在该文件编写&lt;Context&gt;元素    &lt;Context docBase=&quot;C:/hello&quot;&gt;1. 文件名：指定当前应用的名称2. docBase：指定应用的物理位置3. 浏览器访问路径：http://localhost:8080/hello/index.xml</code></pre><h4 id="servet-xml的配置"><a href="#servet-xml的配置" class="headerlink" title="servet.xml的配置"></a>servet.xml的配置</h4><pre><code>1. &lt;Service name=&quot;Catalina&quot;&gt;    服务，名字为catalina服务中又有很多连接 &lt;Connector&gt;2. &lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;    connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot;/&gt;    用于接待HTTP/1.1的服务，端口是80端口，不处理请求3. &lt;Engine&gt; 引擎，用于处理请求，引擎下又分很多主机&lt;Host&gt;4. &lt;Host name=&quot;主机名&quot; appBase=&quot;基础目录&quot;        unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;主机下又有&lt;Context&gt;上下文5. &lt;Context&gt; 上下文，对应的就是一个项目6. servet.xml中还有很多监听器7. 引擎唯一的，Service唯一的，Host可以多个，Context可以多个</code></pre><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><pre><code>Servlet是javaWeb的三大组件之一，它属于动态资源。Servlet的作用是处理请求，服务器会把接收到的请求交给Servlet来处理，在Servlet中通常需要：    1. 接收请求数据    2. 处理请求    3. 完成响应例如客户端发出登陆亲求，或者输出注册请求，这些请求都应该由Servlet来完成处理！Servlet需要我们自己来编写，每个Servlet必须实现javax.servlet.Servlet接口</code></pre><p><img src="https://i.imgur.com/uJbkkiR.png" alt=""></p><h3 id="实现Servlet的方式"><a href="#实现Servlet的方式" class="headerlink" title="实现Servlet的方式"></a>实现Servlet的方式</h3><pre><code>实现Servlet的三种方式：    1. 实现javax.servlet.Servket接口    2. 继承javax.servlet.GenericServlet类    3. 继承javax.servlet.http.HttpServlet类我们通常会去继承HttpServlet类来完成我们的Servlet，但学习Servlet还要从javax.servlet.Servlet接口开始</code></pre><h3 id="使用Servlet"><a href="#使用Servlet" class="headerlink" title="使用Servlet"></a>使用Servlet</h3><p><img src="https://i.imgur.com/TGsdd4W.png" alt=""></p><h4 id="servlet的方法"><a href="#servlet的方法" class="headerlink" title="servlet的方法"></a>servlet的方法</h4><pre><code>是由tomcat调用的方法1. init()    1. 在Servlet对象创建之后马上执行，并且只执行一次2. service()    1. 会被调用多次，每次处理请求都是调用这个方法3. destroy()    1. 在Servlet被销毁之前调用，并且它只会被调用一次4. getServletConfig()    1. 获取Servlet的配置信息（从init函数中，可以获得Servlet的配置信息）5. getServletInfo()    1. 获取Servlet的信息（没什么用）</code></pre><h4 id="浏览器访问Servlet"><a href="#浏览器访问Servlet" class="headerlink" title="浏览器访问Servlet"></a>浏览器访问Servlet</h4><pre><code>1. 给Servlet指定一个Servlet路径（让Servlet与一个路径绑定在一起）    1. 需要在web.xml中对Servlet配置    2.  &lt;servlet&gt;               &lt;servlet-name&gt;XXX随意&lt;/servlet-name&gt;            &lt;servlet-class&gt;Servlet的路径&lt;servlet-class&gt;        &lt;/servlet&gt;    3.  &lt;servlet-mapping&gt;            &lt;servlet-name&gt;与上面的name相同&lt;/servlet-name&gt;            &lt;url-pattern&gt;/虚拟路径 例如：/aa/b/c&lt;/url-pattern&gt;        &lt;/servlet-mapping&gt;2. 浏览器访问Servlet路径    1. localhost:8080/项目名/虚拟路径名</code></pre><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><pre><code>1. 单例，一个类只有一个对象；当然可能存在多个Servlet类2. 线程不安全的，效率高3. Servlet由程序员写，但对象由服务器创建，调用响应的方法</code></pre><p><img src="https://i.imgur.com/nMe2CKX.png" alt=""></p><p><img src="https://i.imgur.com/XTD10M9.png" alt=""></p><p><img src="https://i.imgur.com/E6X43Wh.png" alt=""></p><h3 id="Servlet细节"><a href="#Servlet细节" class="headerlink" title="Servlet细节"></a>Servlet细节</h3><h4 id="Servlet与线程安全"><a href="#Servlet与线程安全" class="headerlink" title="Servlet与线程安全"></a>Servlet与线程安全</h4><pre><code>因为一个类型的Servlet只有一个实例对象，那么就有可能会出现同一个时间一个Servlet同属处理多个请求 那么Servlet是否为线程安全呢？ 答案是“不是线程安全的”这说明Servlet的工作效率很高，但也存在线程安全问题所以我们不应该在Servlet中随意创建成员变量因为可能会存在一个线程这个成员变量进行写操作，另一个线程对这个成员变量进行读操作1. 不要在Servlet中创建成员！创建局部变量即可2. 可创建无状态成员3. 可以创建有状态成员，但是状态必须为只读的</code></pre><h4 id="让服务器在启动时就创建Servlet"><a href="#让服务器在启动时就创建Servlet" class="headerlink" title="让服务器在启动时就创建Servlet"></a>让服务器在启动时就创建Servlet</h4><pre><code>默认情况下，服务器在某个Servlet第一次收到请求时创建它，也可以在web.xml中进行配置，使服务器启动的时候就创建Servlet&lt;servlet&gt;    &lt;servlet-name&gt;hello1&lt;/servlet-name&gt;    &lt;servlet-class&gt;cn.itcast.servlet.HelloWorld&lt;servlet-class&gt;    &lt;load-on-startup&gt;非负整数&lt;/load-on-startup&gt;    &lt;!-- 非负数，越小越先创建 --&gt;&lt;servlet&gt;</code></pre><h4 id=""><a href="#" class="headerlink" title=""></a><url-pattern></url-pattern></h4><pre><code>&lt;url-pattern&gt;是&lt;servlet-mapping&gt;的子元素，用来指定Servlet的访问路径，即URL它必须是以 &quot;/&quot; 开头&lt;servlet-mapping&gt;    &lt;servlet-name&gt;text&lt;/servlet-name&gt;    &lt;url-pattern&gt;/a&lt;/url-pattern&gt;    &lt;url-pattern&gt;/b&lt;/url-pattern&gt;    &lt;url-pattern&gt;/c&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;那么说明这个Servlet绑定了多个url，一般也就一个，你设置多个也没什么用</code></pre><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><pre><code>一个项目只有一个ServletContext对象！application我们可以在N个Servlet中获取这个唯一的对象，使用它可以给多个Servlet传递数据Servlet之间互不一般是互不联系的，所以信息传递只能通过ServletContext</code></pre><h4 id="servletContext概述"><a href="#servletContext概述" class="headerlink" title="servletContext概述"></a>servletContext概述</h4><pre><code>服务器会为每个应用创建一个ServletContext对象：1. ServletContext 对象的创建时在服务器启动时完成2. ServletContext 对象的销毁时在服务器关闭时完成ServletContext对象的作用是在整个Web应用的动态资源之间共享数据！例如：    在A_Servlet中项 ServletContext对象中保存一个值，然后再B_Servlet中就可以获取这个值，这就是共享数据</code></pre><h4 id="获取ServletContext"><a href="#获取ServletContext" class="headerlink" title="获取ServletContext"></a>获取ServletContext</h4><pre><code>在Servlet获取ServletContext对象：1. 在 void init(ServletConfig config)中：ServletContext context = config.getServletContext();在GenericeServlet 或 HttpServlet 中获取ServletContext对象：1. GenericSeriet类中由getServletContext()方法，所以可以直接使用this.getServletContext()来获取2. HttpServlet中有getServletContext()方法获取在ServletContextEvent中1. getServletContext()方法获取在HttpSession中1. getServletContext()方法获取</code></pre><h4 id="设置，获取对象"><a href="#设置，获取对象" class="headerlink" title="设置，获取对象"></a>设置，获取对象</h4><pre><code>1. void serAttribute(String name,Objcet value):    这是一个键值对，name与value对应2. Object getAttribute(String name):    通过名为name 的键，去获得object类型的值3. void removeAttribute(String name):    移除名为name 的键值对4. Enumeration getAttributeNames():    获取所有域属性的名称</code></pre><h4 id="获取资源"><a href="#获取资源" class="headerlink" title="获取资源"></a>获取资源</h4><h5 id="获取真实路径"><a href="#获取真实路径" class="headerlink" title="获取真实路径"></a>获取真实路径</h5><pre><code>使用ServletContext对象来获取web应用下的资源例如在hello应用的根目录下出创建a.txt文件，获取方法：    String realpath = servletContext.getRealPath(&quot;/a,txt&quot;),realpath的为a.txt的绝对路径</code></pre><h5 id="获取资源流"><a href="#获取资源流" class="headerlink" title="获取资源流"></a>获取资源流</h5><pre><code>可以通过ServletContext获取资源流，即把资源以输入流的方式获取：1. 获取a.txt资源流 InputStream in = ServletContext.getResourceAsStream(&quot;/a.txt&quot;);</code></pre><h5 id="获取指定目录下所有资源路径"><a href="#获取指定目录下所有资源路径" class="headerlink" title="获取指定目录下所有资源路径"></a>获取指定目录下所有资源路径</h5><pre><code>通过ServletContext获取指定目下所有资源路径例如获取/WEB-INF下所有的资源路径：    Set set = context.getResourcePaths(&quot;/WEB-INF&quot;);</code></pre><h2 id="Java画图（可用于验证码）"><a href="#Java画图（可用于验证码）" class="headerlink" title="Java画图（可用于验证码）"></a>Java画图（可用于验证码）</h2><pre><code>BufferedImage bi = new BufferedImage(150, 35, BufferedImage.TYPE_INT_RGB);//得到图片缓冲区，这是长宽，图片格式RGB还是RGBA//得到它的绘制环境（画这张图片的笔）Graphics2D g2 = (Graphics2D) bi.getGraphics();g2.setColor(Color.WHITE);//设置颜色g2.fillRect(0,0,79,35);//填充图片，就是设置背景色g2.setFont(new Font(&quot;宋体&quot;, Font.BOLD, 25));//设置字体//Font.BLOD 为字体格式，比如blod就是粗体g2.setColor(Color.BLACK);//设置颜色ge.drawString(&quot;hell0&quot;, point.x, point.y);//向图片区域中写String的内容ImageIO.write(bi, &quot;JPEG&quot;, new FileOutputStream(&quot;F:/a.jpg&quot;));//输出流，bi为图片缓冲区，&quot;JPEG&quot;为图片格式</code></pre><h2 id="response和request"><a href="#response和request" class="headerlink" title="response和request"></a>response和request</h2><pre><code>都是由服务器产生</code></pre><p><img src="https://i.imgur.com/KpOSoD7.png" alt=""></p><pre><code>服务器每次收到请求时，都会为这个请求开辟一个新的线程服务器会把客户端的请求数据封装到request对象中，request就是请求数据的载体服务器还会创建response对象，这个对象和客户端连接在一起，他可以用来向客户端发送响应</code></pre><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><pre><code>ServletResponse ---&gt; 与协议无关的类型HtppServletResponse ----&gt; 与http协议相关的类型二者无关，传入到Servlet中的时HttpServletResponse，所以可以强转为responsehttp协议中响应内容包括什么呢？</code></pre><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><pre><code>200 表示成功， 302 表示重定向， 404 表示客户端错误， 500表示服务器端错误1. sendError(int sc)2. sendError(int sc, String msg)3. setStatus(int sc)例如：    发送404    response.sendError(404, &quot;您访问的资源存在，就是不给你看&quot;);</code></pre><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><pre><code>响应头：Content-Type,Refresh,Location等1. setHeader(String name, String value):适用于单值的响应头2. addHeader(String name, String value):适用于多值的响应头3. setIntHeader(String name, String Value):适用于单值的int类型的响应头4. addIntHeader(String name, String value):适用于多值int类型的响应头5. setDateHeader(String name, long value):适用于单值的毫秒类型的响应头6. addDaTeHeader(String name, long value):适用于多值的毫秒类型的响应头；long型值为 毫秒值，代表过期时间，例如：    发送302，设置location头，完成重定向            response.setHeader(&quot;Location&quot;,&quot;/项目名/servlet路径&quot;);        response.setStatus(302);    定时刷新，设置Refresh头，其实就是定时重定向        PrintWriter write = rsponse.getWriter();        writer.print(&quot;欢迎登陆，5秒后自动跳转到主页&quot;);        response.setHeader(&quot;Redresh&quot;, &quot;5;URL=/项目名/重定向的servlet或jsp&quot;);    禁用浏览器缓存：Cache-Control, prama, expires        response.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);        response.setHeader(&quot;prame&quot;,&quot;no-cache&quot;);        response.setDateHeader(&quot;expires&quot;,-1);//过期时间-1，立马过期    &lt;meta&gt;标签可以代替响应头</code></pre><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><pre><code>通常是html，也可以是图片response的两个流：    1. ServletOutPutStream,用来向客户端发送字节数据        ServletOutputStream out = response.getOutputStream();    2. PrintWriter,用来向客户端发送字符数据!需要设置编码        PrintWriter writer = response.getWriter();    两个流不能同时使用发送字节流：    String s = &quot;hello world&quot;;    byte[] bytes = s.getBytes();    response.getOutputStream().write(bytes);发送字节图片：    //运用commons-io库    String path = &quot;a.jpg&quot;;    FileInputStream in = new FileInputStream();    //读取输入流内容的字节到字节数组中    byte[] bytes = IOUtils.toByteArray(int);    response.getOutputStream().write(bytes);</code></pre><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><pre><code>这个重定向不同与上面的重定向，这个更快sendRedirect(String location)方法response.sendRedirect(&quot;/项目名/servlet虚拟路径或jsp名&quot;);</code></pre><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><pre><code>封装了客户端所有的请求数据Http协议中的数据都可以通过request对象来获取</code></pre><h4 id="获取常用信息"><a href="#获取常用信息" class="headerlink" title="获取常用信息"></a>获取常用信息</h4><pre><code>获取客户端Ip，请求方式Ip：request.getRemoteAddr();请求方式：request.getMethod();</code></pre><h4 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h4><pre><code>String getHeader(String name),适用于单值头int getIntHeader(String name),适用于单值int类型的请求头long getDateHeader(String name),适用于单值毫秒类型的请求头Enumeration&lt;String&gt; getHeaders(String name),适用于多值请求头例如：    通过user-agent识别用户浏览器类型        request.getHeader(&quot;User-Agent&quot;);    防盗链：如果请求不是通过本站发出的超链接发出的，发送错误状态码404        Refere这个请求头，表示请求的来源        String referer = req.getHeader(&quot;Rederer&quot;);        if(referer == null || referer.contains(&quot;localhost&quot;)){            resp.sendRedirect(&quot;https://www.baidu.com&quot;);            System.out.println(&quot;baidu&quot;);        } else{            System.out.println(&quot;hello&quot;);        }</code></pre><h4 id="获取请求URL"><a href="#获取请求URL" class="headerlink" title="获取请求URL"></a>获取请求URL</h4><pre><code>String getScheme();获取协议String getServerName();获取服务器名String getServerPort();获取服务器端口String getContextPath();获取项目名String getServletPath();获取Servlet路径String getQueryString();获取参数部分，即问好后面的部分String getRequestURI();获取请求URI，等于项目名+Servlet路径String getRequestURL();获取请求URL，等于不包含参数的整个请求路径</code></pre><p><img src="https://i.imgur.com/moO8HuU.png" alt=""></p><h4 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h4><pre><code>请求参数时由客户端发送给服务器的    1. 有可能在请求体中（post）    2. 可能在URL中（get）1. String getParameter(String name):获取指定名称的请求参数值，适用于单值请求2. String[] getParameterValues(String name);获取指定名称的请求参数值，适用于多值请求参数3. Map&lt;String, String[]&gt; getParameterMap():获取所有请i去参数，其中key为参数名，value为参数值，例如：    超链接参数    表单数据</code></pre><h4 id="请求转发和请求包含"><a href="#请求转发和请求包含" class="headerlink" title="请求转发和请求包含"></a>请求转发和请求包含</h4><pre><code>RequestDispatcher rd = request.getRequestDispatcher(&quot;/MyServlet&quot;);//参数是被包含或被转发的Servlet虚拟路径请求转发：rd.forward(request,response);（常用）请求包含：rd.include(request,response);有时一个请求需要多个Servlet协作才能完成，所以需要一个Servlet跳到另一个Servlet1. 一个请求跨多个Servlet，需要使用转发和包含2. 请求转发：由下一个Servlet完成相应体，当前Servlet可以设置响应头（留头不留体）    1. 即request.setHeader()中的内容，可以传递到第二个servlet    2. response.write()这类的内容不会传递回去，即第一个Servlet的内容不会输出浏览器3. 请求包含：由两个Servlet共同完成相应体（都留）4. 物理是请求转发还是请求包含，都在一个请求范围内，使用同一个resquest和response</code></pre><h4 id="请求转发与重定向不同"><a href="#请求转发与重定向不同" class="headerlink" title="请求转发与重定向不同"></a>请求转发与重定向不同</h4><pre><code>1. 请求转发是一次请求，重定向是两次转发2. 请求转发地址栏不变，重定向后会显示一个请求的地址3. 请求转发只能转发到本项目其他servet，而重定向哪都能去4. 请求转发为服务端行为，重定向是客户端行为</code></pre><h4 id="request域"><a href="#request域" class="headerlink" title="request域"></a>request域</h4><pre><code>Servlet中三大域对象：request,session,application,1. void setAttribute(String name);2. Object getAttribute(String name);3. void removeAttribute(String name);同一个请求范围内使用request.getAttribute()和request.setAttribute()可以使用但是如果是重定向则不能获取，因为不是同一个请求</code></pre><p><img src="https://i.imgur.com/ntAKbGY.png" alt=""></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><pre><code>常见字符编码：iso-8859-1（不支持中文），gbk（系统默认编码，中国的国标码），utf-8（万国码，支持全世界的编码，所以我们要使用这个）</code></pre><p><img src="https://i.imgur.com/ix3MrnG.png" alt=""></p><h3 id="响应编码"><a href="#响应编码" class="headerlink" title="响应编码"></a>响应编码</h3><pre><code>1. 当使用response.getWriter()来向客户端发送字符数据时   如果在之前没有设置编码，那么默认使用iso，以为不支持中文，所以一定是乱码2. 在使用response.getWriter()之前可以使用response.setCharaceterEncoding()   来设置字符流的编码为gbk或utf-83. 在使用response.getWriter()之前可以使用resonse.setHeader(&quot;Content-type&quot;,&quot;text/html;charset=utf-8&quot;)   来设置响应头，通知浏览器服务器这边使用的utf-84. serHeader(&quot;Content-Type&quot;,&quot;text/html;charset=utf-8&quot;)的快捷方式是:setContentType(&quot;text/html;charset=utf-8&quot;);</code></pre><h3 id="请求编码"><a href="#请求编码" class="headerlink" title="请求编码"></a>请求编码</h3><pre><code>1. 客户端发送给服务器的请求参数是什么编码：    请求页面时，服务器响应的编码是什么，那么客户端发送请求时的编码就是是什么2. 服务器默认使用ISO-8859-1来解码，所以中文肯定出现乱码3. 请求编码处理分为两种：get，post：get请求参数不再请求体中，而post请求参数在请求体中，所以处理方式不同</code></pre><h5 id="GET请求编码处理"><a href="#GET请求编码处理" class="headerlink" title="GET请求编码处理"></a>GET请求编码处理</h5><pre><code>1. Sting username = request.getParameter(&quot;name&quot;);2. byte[] bytes = name.getBytes(&quot;ISO-8859-1&quot;);3. name = new String(bytes, &quot;utf-8&quot;);4. 在server.xml中配置URIEncoding=utf-8</code></pre><h5 id="POST请求编码处理"><a href="#POST请求编码处理" class="headerlink" title="POST请求编码处理"></a>POST请求编码处理</h5><pre><code>1. String usernmae = new String(request.getParameter(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);2. 在获取参数之前调用request.setCharacterEncoding(&quot;utf-8&quot;);</code></pre><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><pre><code>表单的类型：Content-Type:application/x-www-form-urlencoded    就是把中文转换为%后面跟随两位16进制1. 他不是字符编码2. 它是用来在客户端和服务器之间传递参数用的一种方式3. URL编码需要先指定一种字符编码，把字符串解码后得到byte[],   然后把小于0的字节+256，再转换为16进制，前面再加%4. POST请求默认就是使用URL编码，tomcat会自动使用URL编码5. URL编码：String name = URLEncoder.encode(name, &quot;utf-8&quot;);6. URL解码：String name = URLDecoder.decode(name,&quot;utf-8&quot;);</code></pre><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><pre><code>1. web.xml中&lt;url-pattern&gt;路径    要么以“*”开头要么以&quot;/&quot;开头2. 转发和包含路径    1. 以&quot;/&quot;开头：相对当前项目路径    2. 不以&quot;/&quot;开头：相对当前Servlet路径3. 重定向路径（客户端路径）    1. 以&quot;/&quot;开头：相对当前主机，所以必须后面自己加上项目名4. 页面中超链接和表单路径    1. 与重定向相同，都是客户端路径，需要添加项目名    2. &lt;form action=&quot;/项目/servlet&quot;&gt;    3. 如果不已&quot;/&quot;开头，那么相对当前页面所在路径    4. 建议使用以&quot;/&quot;开头的路径，因为如果页面路径改变，那么servlet就找不到了5. ServletContext获取资源路径    1. 相对于当前项目目录，即index.jsp所在路径6. ClassLoader获取资源路径    1. 相对classes目录7. Class获取资源路径    1. 以&quot;/&quot;开头，相对Classes目录    2. 不以&quot;/&quot;开头，相对当前.class文件所在目录</code></pre><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><pre><code>jsp程序是java为了适应web开发而扩展的一种程序形式，是java程序针对web开发进行的简化。用户通过浏览器向服务器发送指定页面的请求，接下来web服务器读取jsp文件，jsp文件会被转换为一个普通java文件，java文件进行编译，得到一个class文件，web服务器装在解释执行class文件，并将执行结果响应至客户端。tomcat把为每个jsp页面创建的java文件和class 文件，放在安装目录下的 \work\Catalina\localhost\同名文件夹内。</code></pre><h3 id="JSP的作用"><a href="#JSP的作用" class="headerlink" title="JSP的作用"></a>JSP的作用</h3><pre><code>Servlet：1. 缺点：不适合设置html响应体，需要大量的response.getWriter().print(html);2. 优点：动态资源，可以编程html:1. 缺点：html是静态页面，不能包含动态信息2. 优点：不用为输出html标签而发愁JSP：1. 优点：在原有html的基础上添加java脚本，构成jsp页面</code></pre><h3 id="JSP和Servlet的分工"><a href="#JSP和Servlet的分工" class="headerlink" title="JSP和Servlet的分工"></a>JSP和Servlet的分工</h3><pre><code>JSP：1. 作为请求发起页面，例如显示表单，超链接2. 作为请求结束页面，例如显示数据Servlet：1. 作为请求中处理数据的环节</code></pre><h3 id="JSP的组成"><a href="#JSP的组成" class="headerlink" title="JSP的组成"></a>JSP的组成</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. JSP = html + java脚本 + jsp标签（指令）</span><br><span class="line"><span class="number">2</span>. jsp中无创建既可使用的对象有<span class="number">9</span>个，被称为<span class="number">9</span>大内置对象，例如：request,out等</span><br><span class="line"><span class="number">3</span>. <span class="number">3</span>中java脚本：</span><br><span class="line"><span class="number">1</span>. &lt;% .... %&gt;：Java片段，用于定义<span class="number">0</span>~N条Java语句</span><br><span class="line"><span class="number">2</span>. &lt;%=....%&gt;：java表达式，用于输出，用于输出一条表达式的结果</span><br><span class="line"><span class="number">3</span>. &lt;%!....%&gt;：声明，用来创建类的成员变量和成员方法(基本不用)</span><br></pre></td></tr></table></figure><h4 id="jsp声明语法："><a href="#jsp声明语法：" class="headerlink" title="jsp声明语法："></a>jsp声明语法：</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! </span><br><span class="line">       String str = <span class="string">"hello world"</span>; </span><br><span class="line">       <span class="function">String <span class="title">getStr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello world2"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">%&gt;</span><br><span class="line">声明必须再<span class="string">"&lt;%!"</span> 和 <span class="string">"%&gt;"</span> 之间进行。声明部分只能定义成员方法（函数）和成员变量，不能直接包含程序域。这里定义了一个str变量</span><br><span class="line">在jsp文件中使用， 例：</span><br><span class="line">&lt;hr&gt;<span class="comment">// &lt;hr&gt; 是分割线的意思</span></span><br><span class="line">&lt;%   out.println(<span class="keyword">this</span>.str)   %&gt;<span class="comment">//通过this 的方法调用变量或者方法（函数）</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;% = <span class="keyword">this</span>.getStr()%&gt;<span class="comment">//注意加了一个“=”</span></span><br></pre></td></tr></table></figure><h4 id="jsp程序脚本："><a href="#jsp程序脚本：" class="headerlink" title="jsp程序脚本："></a>jsp程序脚本：</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">包括变量的声明，表达式和程序逻辑</span><br><span class="line">声明的变量转换为_service 方法中的变量，因而是局部变量</span><br><span class="line">语句块可以自由的与页面代码组合使用</span><br><span class="line">&lt;% <span class="keyword">int</span> i = <span class="number">100</span>; %&gt;<span class="comment">// 这里的 i 是脚本变量  上面的 加了 “!”的是成员变量</span></span><br><span class="line">&lt;% <span class="keyword">if</span> (i &gt; <span class="number">10</span>) </span><br><span class="line">&#123;  %&gt;</span><br><span class="line">    &lt;h1&gt;i &gt; 10 &lt;/h1&gt;</span><br><span class="line">&lt;% &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; %&gt;</span><br><span class="line">    &lt;h1&gt; i &lt;= 10 &lt;/h1&gt;</span><br><span class="line">&lt;% &#125; %&gt;  <span class="comment">// 这里就是 java 和 jsp 的交叉写法。当然而可以直接用out.prinln 但是正常网页中，显示的不会是单调的黑字输出，而是有样式的输出。</span></span><br><span class="line"></span><br><span class="line">从下面的例子中可以看出 脚本变量 与 成员变量 的区别：</span><br><span class="line">&lt;!% <span class="keyword">int</span> global = <span class="number">0</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">int</span> test = <span class="number">0</span> </span><br><span class="line">       global ++;</span><br><span class="line">       test ++;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">      out.println(global);</span><br><span class="line">      out.println(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">      out.printlin(test);</span><br><span class="line">%&gt;</span><br><span class="line">将其在加载到eclipse的工程中，然后不断刷新页面，会发现global的值会每次刷新都“+<span class="number">1</span>”，但是test的值总是从<span class="number">0</span> 加到 <span class="number">1</span></span><br><span class="line">就像是全局变量与局部变量的区别。</span><br></pre></td></tr></table></figure><h4 id="jsp注释："><a href="#jsp注释：" class="headerlink" title="jsp注释："></a>jsp注释：</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;%--你要注释的内容--%&gt;</span><br><span class="line">有点像html 的注释写法，就是多了两个%。</span><br><span class="line">但是，jsp既然嵌套了java语言，那么java的注释写法依然是可用的。</span><br><span class="line">“<span class="comment">//”  单行注释</span></span><br><span class="line">“<span class="comment">/*  */</span>”多行注释</span><br><span class="line">java注释一般多用于 <span class="string">"&lt;%%&gt;"</span> 中</span><br></pre></td></tr></table></figure><h4 id="jsp内容输出表达式"><a href="#jsp内容输出表达式" class="headerlink" title="jsp内容输出表达式"></a>jsp内容输出表达式</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;% = 输出的变量名 %&gt;</span><br><span class="line">例如：</span><br><span class="line">&lt;% <span class="keyword">int</span> i = <span class="number">10</span> %&gt;</span><br><span class="line">i 的值是 ：&lt;% = i %&gt;</span><br><span class="line">当然你也可以直接用 &lt;% out.println(i) %&gt;，但是嘛 写得多还不好控制格式</span><br></pre></td></tr></table></figure><h4 id="jsp包引入语法"><a href="#jsp包引入语法" class="headerlink" title="jsp包引入语法"></a>jsp包引入语法</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;% @ page <span class="keyword">import</span> = <span class="string">"java.util.Date"</span> %&gt; <span class="comment">// 引入一个 java.util.Date 的包</span></span><br><span class="line">&lt;% @ page <span class="keyword">import</span> = <span class="string">"java.io.*"</span> %&gt; <span class="comment">//一次进入多个 java.io. 的包</span></span><br><span class="line">&lt;% @ page <span class="keyword">import</span> = <span class="string">"java.util.Date,  java.io.* "</span>%&gt; <span class="comment">//一次引入多个包，用逗号隔开。</span></span><br></pre></td></tr></table></figure><h3 id="JSP的内置对象"><a href="#JSP的内置对象" class="headerlink" title="JSP的内置对象"></a>JSP的内置对象</h3><ul><li><p>out对象</p><ul><li>用于向客户端浏览器输出各种数据</li></ul></li><li><p>request对象</p><ul><li>封装了来自客户端浏览器的各种信息</li></ul></li><li><p>response对象</p><ul><li>封装了服务器的响应信息</li></ul></li><li><p>exception对象</p><ul><li>封装了程序执行中的异常和错误信息</li></ul></li><li><p>config对象</p><ul><li>封装了引用程序的配置信息</li></ul></li><li><p>page对象</p><ul><li>指向当前程序本身</li></ul></li><li><p>session对象</p><ul><li>用来保存回话信息，保存同一用户不同请求之间可以共享数据</li></ul></li><li><p>application对象</p><ul><li>代表当前应用程序的上下文，在不同的用户之间共享信息</li></ul></li><li>pageContext对象<ul><li>提供了对jsp所有命名空间以及对象的访问</li></ul></li></ul><h4 id="out对象"><a href="#out对象" class="headerlink" title="out对象"></a>out对象</h4><ul><li>out对象输出</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"文本1"</span>);<span class="comment">//向客户端浏览器输出一行文本，最后输出一个换行</span></span><br><span class="line">out.print(<span class="string">"文本2"</span>);<span class="comment">//想客户端浏览器输出一行文本</span></span><br><span class="line">out.newLine();<span class="comment">//输出一个换行效果</span></span><br></pre></td></tr></table></figure><ul><li>out对象对输出缓冲区进行管理</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"获取当前缓冲区大小："</span> + out.getBufferSize());</span><br><span class="line">out.printlb(<span class="string">"当前缓冲区剩余字节数目："</span> + out.getRemaining());</span><br></pre></td></tr></table></figure><blockquote><p><code>out.flush()方法</code>，用于强制刷新服务器缓冲区里的数据，也就是说可以手工将缓冲区里的数据输出到浏览器<br><code>out.clearBuffer()方法</code>，用于清空缓冲区的数据<br><code>out.clear()方法</code>，用于清空缓冲区的数据，但是（不同于clearBuffer()）如果之前调用过.flush()方法，那么clear()方法则会抛出异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">out.println(<span class="string">"文本1"</span>);<span class="comment">//向客户端浏览器输出一行文本，最后输出一个换行</span></span><br><span class="line">out.print(<span class="string">"文本2"</span>);<span class="comment">//想客户端浏览器输出一行文本</span></span><br><span class="line">out.newLine();<span class="comment">//输出一个换行效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//out.flush();</span></span><br><span class="line">out.clearBuffer()l</span><br></pre></td></tr></table></figure><blockquote><p>上述情况中，如果注释了out.flush()方法，那么上述print 将没有输出，因为被clearBuffer了<br>但是如果 放开了注释out.flush()，那么将print到页面中，因为先强制输出了，再清空就没有意义了</p></blockquote><h4 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h4><ul><li><p>Web 应用程序应该是双向的，不仅仅是服务器向客户端展示数据，同时也有客户端向服务器提交信息</p></li><li><p>request对象</p><ul><li>封装了从客户端到服务器发出的请求信息<ul><li>客户端ip</li><li>用户提交的表单信息</li><li>cookie</li><li>主机名</li><li>……</li></ul></li></ul></li><li>服务器通过.getParameter 方法获取用户提交的表单数据</li><li>request的大部分方法都是用于处理客户端提交请求中的各种参数和选项</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">请求方法名：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getMethod</span>() %&gt;</span></span><br><span class="line">获取请求URI字符串，请求的资源：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getRequestURI</span>() %&gt;</span>(从请求的主机名之后的第一个字符开始，到查询字符串结束的字符串)</span><br><span class="line">请求所使用的协议：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getProtocol</span>() %&gt;</span></span><br><span class="line">获取服务器的名称：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getServerName</span>() %&gt;</span></span><br><span class="line">请求的服务器端口：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getServerPost</span>() %&gt;</span></span><br><span class="line">获取客户端的IP地址：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getRemoteAddr</span>() %&gt;</span></span><br><span class="line">获取客户端的主机名：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getRemoteHost</span>() %&gt;</span></span><br><span class="line">获取提交的表单数据：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getParameter</span>("<span class="attr">username</span>") %&gt;</span></span><br></pre></td></tr></table></figure><h4 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h4><ul><li>用于服务器对客服端的请求进行回应，负责处理http连接信息<ul><li>设置文件头</li><li>cookie信息</li><li>……</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;% </span><br><span class="line">    response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>); <span class="comment">//设置网页缓存策略为no-cache</span></span><br><span class="line">    response.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">2</span>);<span class="comment">//设置int类型的信息，这里是设置2s刷新一次网页</span></span><br><span class="line">    response.sendRedirect(<span class="string">"http://www.baidu.com"</span>);<span class="comment">//设置跳转</span></span><br><span class="line">Coolie myCookie = <span class="keyword">new</span> Cookie(<span class="string">"darkmi"</span>,<span class="string">"Test"</span>);<span class="comment">//设置键值对</span></span><br><span class="line">    myCookie.setMaxAge(<span class="number">3600</span>);<span class="comment">//Cookie的最大存活时间3600s</span></span><br><span class="line">    response.addCookie(myCookie);<span class="comment">//添加Cookie</span></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>​    </p><h4 id="application对象"><a href="#application对象" class="headerlink" title="application对象"></a>application对象</h4><ul><li>代表当前的应用程序，存在于服务器的内存空间中，应用一旦启动，就会自动生成一个application对象</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">application.getServerInfo();<span class="comment">//返回当前服务器的详细信息</span></span><br><span class="line">application.getServletContextName();<span class="comment">//放回当前应用的名称</span></span><br><span class="line">application.getVirtualServerName();<span class="comment">//获取主机名称</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="config对象"><a href="#config对象" class="headerlink" title="config对象"></a>config对象</h4><ul><li>代表当前jsp程序的配置信息</li><li>config对象是servletConfig类的一个实例</li></ul><blockquote><p>在web.xml文件中添加如下信息</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/13/config.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>darkmi<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Testroot<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/13/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述代码，添加了两个配置信息 username 和 password</li><li>在如下的代码中可以获得config数据</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= config.getInitParameter(<span class="string">"username"</span>) %&gt;</span><br><span class="line">&lt;%= config.getInitParameter(<span class="string">"password"</span>) %&gt;</span><br></pre></td></tr></table></figure><h4 id="session对象"><a href="#session对象" class="headerlink" title="session对象"></a>session对象</h4><ul><li>服务器本身不会记录之前客户端请求的任何信息</li><li>用session进行辅助则可以<code>记录客户端之前的信息</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    获取session的ID（唯一标识符）：&lt;%= session.getID() %&gt;</span><br><span class="line">    session的创建时间：&lt;%= <span class="keyword">new</span> java.util.Date(session.getCreationTime().toString()) %&gt;</span><br><span class="line">    session的最后访问时间：&lt;%= <span class="keyword">new</span> java.util.Date(session.getLastAccessedTime()) %&gt;</span><br><span class="line">    session的失效时间(单位为s)：&lt;%= session.getMaxInactiveInterval() %&gt;</span><br><span class="line">    判断session是否是新创建：&lt;%= session.isNew()%&gt;</span><br><span class="line">    清除session对象：&lt;%= session.invalidate() %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>上述代码中，创建时间和访问时间都是long 型，所以需要通过java的Date 类来转换为 可读的时间</li></ul><h4 id="exception对象"><a href="#exception对象" class="headerlink" title="exception对象"></a>exception对象</h4><ul><li>JSP引擎在执行编译好的代码的时候，可能会抛出异常</li><li>exception表示jsp引擎在执行的时候抛出的异常</li><li>exception对象需要配置</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page errorPage=<span class="string">"handle_error.jsp"</span> %&gt; &lt;!-- 设置处理异常的jsp --&gt;</span><br><span class="line">&lt;%@ page isErrorPage=<span class="string">"true"</span> %&gt;&lt;!-- 在处理异常的jsp中配置 --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">exception.getMessage()方法用于返回描述异常的信息：out.println(exception.getMessage())</span><br><span class="line">exception对象的字符串描述：exception.toString()</span><br><span class="line">打印异常的堆栈轨迹：exception.printStackTrace()</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="page对象"><a href="#page对象" class="headerlink" title="page对象"></a>page对象</h4><ul><li>有点类似Java中的this指针，因为page对象指向当前jsp本身</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">page对象的字符串描述：out.println(page.toString()) <span class="comment">// 字符串 @ 之前是 jsp的完全限定名 之后是HashCode值</span></span><br><span class="line">返回当前的Object类：page.getClass()</span><br><span class="line">返回page对象的hashcode值：page.hashCode()</span><br><span class="line">比较是否相等：page.equals(object)</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li>还有一些与线程相关的方法</li></ul><h4 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h4><ul><li>是jsp中所有对象最大的集成者</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">JspWriter myout = pageContext.getOut()</span><br><span class="line"><span class="comment">// 其他八个内置对象同理</span></span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件系统体系结构&quot;&gt;&lt;a href=&quot;#软件系统体系结构&quot; class=&quot;headerlink&quot; title=&quot;软件系统体系结构&quot;&gt;&lt;/a&gt;软件系统体系结构&lt;/h2&gt;&lt;h3 id=&quot;B-S&quot;&gt;&lt;a href=&quot;#B-S&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法入门 嘤嘤嘤</title>
    <link href="http://yoursite.com/2018/10/12/%E7%AE%97%E6%B3%95%E5%85%A5%E9%97%A8-%E5%98%A4%E5%98%A4%E5%98%A4/"/>
    <id>http://yoursite.com/2018/10/12/算法入门-嘤嘤嘤/</id>
    <published>2018-10-12T11:13:24.000Z</published>
    <updated>2018-10-15T15:47:47.394Z</updated>
    
    <content type="html"><![CDATA[<h2 id="学习算法的建议"><a href="#学习算法的建议" class="headerlink" title="学习算法的建议"></a>学习算法的建议</h2><h3 id="必备条件"><a href="#必备条件" class="headerlink" title="必备条件"></a>必备条件</h3><pre><code>1. 数理基础，着力加强2. 兴趣爱好，能否持久的喜欢它3. 做事有系统，规范，着眼于大的方面</code></pre><h3 id="C-或Java"><a href="#C-或Java" class="headerlink" title="C++或Java"></a>C++或Java</h3><pre><code>熟练掌握C++或者Java，语言作为基础，即使算法能理解，也无法表示出来</code></pre><h3 id="数理基础"><a href="#数理基础" class="headerlink" title="数理基础"></a>数理基础</h3><pre><code>对于数学定理，公式推导等，要熟悉</code></pre><h3 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h3><pre><code>对于数据结构，吃透了能够受益终身。不要指望数据结构，这个东西方面太广，不要只去看你有什么没学，你更要看你学了什么</code></pre><h3 id="计算思维"><a href="#计算思维" class="headerlink" title="计算思维"></a>计算思维</h3><pre><code>思维方式在前人的基础上，形成自己的方式；同时学习一些套路，解题的套路，等等</code></pre><h2 id="计算几何"><a href="#计算几何" class="headerlink" title="计算几何"></a>计算几何</h2><pre><code>计算几何重于计算</code></pre><h3 id="凸包问题（计算几何的核心）"><a href="#凸包问题（计算几何的核心）" class="headerlink" title="凸包问题（计算几何的核心）"></a>凸包问题（计算几何的核心）</h3><h4 id="什么是凸包"><a href="#什么是凸包" class="headerlink" title="什么是凸包"></a>什么是凸包</h4><p><img src="https://i.imgur.com/phyPiVI.png" alt=""></p><pre><code>凸包就是这样的，由外部的点连成边能够包住所有的点 </code></pre><h4 id="颜料混合"><a href="#颜料混合" class="headerlink" title="颜料混合"></a>颜料混合</h4><pre><code>颜料混合问题能够帮助你了解凸包题目：    给你 x 颜料：红色 10%，绿色 35%    给你 y 颜料：红色 16%，绿色 20%问你能否组成    U 颜料：红色12%，绿色30%    V 颜料：红色13%，绿色22%如果再给你 Z 颜料：红色7%，绿色15%你能否组成 V 颜料呢？</code></pre><h4 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h4><pre><code>将每种颜料构成一个点，我们所拥有的点作为顶点，只要目标点在顶点围成的边界里面，那么就可以得到颜料</code></pre><p><img src="https://i.imgur.com/zDVl8uX.png" alt=""></p><pre><code>如果新生成的颜料正好在边上，那么我们称这个点凸相关，因为这个点对生成新的比例颜料毫无帮助</code></pre><h4 id="In-Triangle-Test-判断点是否在三角形内"><a href="#In-Triangle-Test-判断点是否在三角形内" class="headerlink" title="In-Triangle Test(判断点是否在三角形内)"></a>In-Triangle Test(判断点是否在三角形内)</h4><p><img src="https://i.imgur.com/QSoeHA5.png" alt=""></p><pre><code>只要点在直线 PQ，QR，RP 的左边，那么点就在三角形内部。计算几何中，一般以逆时针方向 bool InTriangle(P, Q, R, S){    bool a = ToLeft(P, Q, S);    bool b = ToLeft(Q, R, S);    bool c = ToLeft(Q, R, S);    return a == b &amp;&amp; b == c;}//因为不知道PQR的排列顺序，虽然图片上是逆时针，但是实际中可能是逆时针可能是顺时针，所以全为True和全为False都成立</code></pre><h4 id="转化的思想"><a href="#转化的思想" class="headerlink" title="转化的思想"></a>转化的思想</h4><pre><code>我们把现实生活转化为数学图形</code></pre><h3 id="凸包判断"><a href="#凸包判断" class="headerlink" title="凸包判断"></a>凸包判断</h3><p><img src="https://i.imgur.com/2Rzs3zD.png" alt=""></p><pre><code>每个点都有一条穿过它的直线，使得所有的点都落在这条直线的一侧那么，我们只需要先用前三个点围成一个三角形，再从第四个点判断是否在多边形内，在内部则不加，不在内部则定位新的顶点，如果新增加的顶点可以围住旧的顶点，那么就去除旧的顶点</code></pre><h2 id="InsertionSort"><a href="#InsertionSort" class="headerlink" title="InsertionSort"></a>InsertionSort</h2><h3 id="栈（Stack）"><a href="#栈（Stack）" class="headerlink" title="栈（Stack）"></a>栈（Stack）</h3><pre><code>last in,first out后进先出的数据结构</code></pre><h3 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h3><pre><code>出栈（pop）入栈（push）</code></pre><h3 id="InsertionSort（插入排序）"><a href="#InsertionSort（插入排序）" class="headerlink" title="InsertionSort（插入排序）"></a>InsertionSort（插入排序）</h3><pre><code>对于一串数字进行排序，所用的空间复杂度为O(1),且必须用栈进行排序。这里我们定义两个栈——L，R，和一个额外的变量int一开始，数据全部都在R里面，然后依次移动到L栈中：    当 R 中的要移动的数据(R.top()) T 比 L 中最后的数据(L.top())小的时候，将要移动的数据 T 存到 额外空间 int 中    再将 L 中的数据，依次出栈，入栈到R中，直到 L 栈中最后的数据(L.top())比 T 小的时候停止循环执行上述内容，直到 R 的内容为空的时候停止这里 用到 new 和 delete 方法，保证内存为O(1)比较 t 和 L.top()的大小关系的时候，需要判断 L 是否为空</code></pre><h2 id="Largest-Rectangle-in-a-Histogram-直方图中最大的矩形"><a href="#Largest-Rectangle-in-a-Histogram-直方图中最大的矩形" class="headerlink" title="Largest Rectangle in a Histogram(直方图中最大的矩形)"></a>Largest Rectangle in a Histogram(直方图中最大的矩形)</h2><p><img src="https://i.imgur.com/n02CYjq.png" alt=""></p><pre><code>在很多不规则的图形中，找到面积最大的矩形，然后裁剪出来</code></pre><p><img src="https://i.imgur.com/Je4FQqo.png" alt=""></p><pre><code>从某方面看，就是找某种意义上的极值点</code></pre><h3 id="分而治之"><a href="#分而治之" class="headerlink" title="分而治之"></a>分而治之</h3><pre><code>求出最低点K    maxRect(h,low,high)        k = findPoint(h,low,high);然后是分别查看最低点的左边和右边    maxRect(h, low, k);    maxRect(h, k+1, high);    H[k]*(hi-low);</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;学习算法的建议&quot;&gt;&lt;a href=&quot;#学习算法的建议&quot; class=&quot;headerlink&quot; title=&quot;学习算法的建议&quot;&gt;&lt;/a&gt;学习算法的建议&lt;/h2&gt;&lt;h3 id=&quot;必备条件&quot;&gt;&lt;a href=&quot;#必备条件&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python爬虫</title>
    <link href="http://yoursite.com/2018/10/08/python%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2018/10/08/python爬虫/</id>
    <published>2018-10-08T14:05:35.000Z</published>
    <updated>2019-01-28T13:28:13.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫的实际例子："><a href="#爬虫的实际例子：" class="headerlink" title="爬虫的实际例子："></a>爬虫的实际例子：</h2><pre><code>1. 搜索引擎（百度、谷歌、360搜索等）。2. 伯乐在线。3. 惠惠购物助手。4. 数据分析与研究（数据冰山知乎专栏）。5. 抢票软件等。</code></pre><h2 id="什么是网络爬虫："><a href="#什么是网络爬虫：" class="headerlink" title="什么是网络爬虫："></a>什么是网络爬虫：</h2><h3 id="通俗理解"><a href="#通俗理解" class="headerlink" title="通俗理解"></a>通俗理解</h3><pre><code>爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并数据抓取下来然后使用一定的规则提取有价值的数据。专业介绍：百度百科。通用爬虫和聚焦爬虫：通用爬虫：通用爬虫是搜索引擎抓取系统（百度、谷歌、搜狗等）的重要组成部分。        主要是将互联网上的网页下载到本地，形成一个互联网内容的镜像备份。聚焦爬虫：是面向特定需求的一种网络爬虫程序,他与通用爬虫的区别在于：        聚焦爬虫在实施网页抓取的时候会对内容进行筛选和处理，尽量保证只抓取与需求相关的网页信息。</code></pre><h3 id="request和response头中信息"><a href="#request和response头中信息" class="headerlink" title="request和response头中信息"></a>request和response头中信息</h3><ol><li>Accept:文文本的格式</li><li>Accept-Encoding:编码格式</li><li>Connection:⻓长链接 短链接</li><li>Cookie:验证用用的</li><li>Host:域名</li><li>Referer:标志从哪个⻚页面面跳转过来的</li><li>User-Agent:浏览器器和用用户的信息</li></ol><h2 id="为什么用Python写爬虫程序："><a href="#为什么用Python写爬虫程序：" class="headerlink" title="为什么用Python写爬虫程序："></a>为什么用Python写爬虫程序：</h2><pre><code>PHP：PHP是世界是最好的语言，但他天生不是做这个的    而且对多线程、异步支持不是很好，并发处理能力弱。爬虫是工具性程序，对速度和效率要求比较高。Java：生态圈很完善，是Python爬虫最大的竞争对手。    但是Java语言本身很笨重，代码量很大。重构成本比较高，任何修改会导致代码大量改动。爬虫经常要修改采集代码。C/C++：运行效率是无敌的。但是学习和开发成本高。写个小爬虫程序可能要大半天时间。Python：语法优美、代码简洁、开发效率高、支持的模块多。    相关的HTTP请求模块和HTML解析模块非常丰富。还有Scrapy和Scrapy-redis框架让我们开发爬虫变得异常简单。</code></pre><h2 id="准备工具："><a href="#准备工具：" class="headerlink" title="准备工具："></a>准备工具：</h2><pre><code>Python3.6开发环境。Pycharm 2017 professional版。虚拟环境。`virtualenv/virtualenvwrapper`。</code></pre><h2 id="http协议和Chrome抓包工具"><a href="#http协议和Chrome抓包工具" class="headerlink" title="http协议和Chrome抓包工具"></a>http协议和Chrome抓包工具</h2><h3 id="什么是http和https协议："><a href="#什么是http和https协议：" class="headerlink" title="什么是http和https协议："></a>什么是http和https协议：</h3><pre><code>HTTP协议：全称是HyperText Transfer Protocol，中文意思是超文本传输协议，是一种发布和接收HTML页面的方法。服务器端口号是80端口。 HTTPS协议：是HTTP协议的加密版本，在HTTP下加入了SSL层。服务器端口号是443端口。</code></pre><h3 id="在浏览器中发送一个http请求的过程："><a href="#在浏览器中发送一个http请求的过程：" class="headerlink" title="在浏览器中发送一个http请求的过程："></a>在浏览器中发送一个http请求的过程：</h3><pre><code>当用户在浏览器的地址栏中输入一个URL并按回车键之后，浏览器会向HTTP服务器发送HTTP请求。HTTP请求主要分为“Get”和“Post”两种方法。当我们在浏览器输入URL http://www.baidu.com 的时候，浏览器发送一个Request请求去获取 http://www.baidu.com 的html文件，服务器把Response文件对象发送回给浏览器。浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如Images文件，CSS文件，JS文件。 浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。当所有的文件都下载成功后，网页会根据HTML语法结构，完整的显示出来了。</code></pre><h3 id="url详解："><a href="#url详解：" class="headerlink" title="url详解："></a>url详解：</h3><pre><code>URL是Uniform Resource Locator的简写，统一资源定位符。 一个URL由以下几部分组成：        scheme://host:port/path/?query-string=xxx#anchorscheme：代表的是访问的协议，一般为http或者https以及ftp等。host：主机名，域名，比如www.baidu.com。port：端口号。当你访问一个网站的时候，浏览器默认使用80端口。path：查找路径。比如：www.jianshu.com/trending/now，后面的trending/now就是path。query-string：查询字符串，比如：www.baidu.com/s?wd=python，后面的wd=python就是查询字符串。anchor：锚点，后台一般不用管，前端用来做页面定位的。在浏览器中请求一个url，浏览器会对这个url进行一个编码。除英文字母，数字和部分符号外，其他的全部使用百分号+十六进制码值进行编码。</code></pre><h3 id="常用的请求方法："><a href="#常用的请求方法：" class="headerlink" title="常用的请求方法："></a>常用的请求方法：</h3><pre><code>在Http协议中，定义了八种请求方法。这里介绍两种常用的请求方法，分别是get请求和post请求。get请求：一般情况下，只从服务器获取数据下来，并不会对服务器资源产生任何影响的时候会使用get请求。post请求：向服务器发送数据（登录）、上传文件等，会对服务器资源产生影响的时候会使用post请求。 以上是在网站开发中常用的两种方法。并且一般情况下都会遵循使用的原则。但是有的网站和服务器为了做反爬虫机制，也经常会不按常理出牌，</code></pre><p>有可能一个应该使用get方法的请求就一定要改成post请求，这个要视情况而定。</p><h3 id="请求头常见参数："><a href="#请求头常见参数：" class="headerlink" title="请求头常见参数："></a>请求头常见参数：</h3><pre><code>在http协议中，向服务器发送一个请求，数据分为三部分，第一个是把数据放在url中，第二个是把数据放在body中（在post请求中），第三个就是把数据放在head中。这里介绍在网络爬虫中经常会用到的一些请求头参数：User-Agent：浏览器名称。这个在网络爬虫中经常会被使用到。请求一个网页的时候，服务器通过这个参数就可以知道这个请求是由哪种浏览器发送的。        如果我们是通过爬虫发送请求，那么我们的User-Agent就是Python，这对于那些有反爬虫机制的网站来说，可以轻易的判断你这个请求是爬虫。        因此我们要经常设置这个值为一些浏览器的值，来伪装我们的爬虫。Referer：表明当前这个请求是从哪个url过来的。这个一般也可以用来做反爬虫技术。如果不是从指定页面过来的，那么就不做相关的响应。Cookie：http协议是无状态的。也就是同一个人发送了两次请求，服务器没有能力知道这两个请求是否来自同一个人。因此这时候就用cookie来做标识。        一般如果想要做登录后才能访问的网站，那么就需要发送cookie信息了。</code></pre><h3 id="常见响应状态码："><a href="#常见响应状态码：" class="headerlink" title="常见响应状态码："></a>常见响应状态码：</h3><pre><code>200：请求正常，服务器正常的返回数据。301：永久重定向。比如在访问www.jingdong.com的时候会重定向到www.jd.com。302：临时重定向。比如在访问一个需要登录的页面的时候，而此时没有登录，那么就会重定向到登录页面。400：请求的url在服务器上找不到。换句话说就是请求url错误。403：服务器拒绝访问，权限不够。500：服务器内部错误。可能是服务器出现bug了。Chrome抓包工具：</code></pre><h3 id="Chrome浏览器"><a href="#Chrome浏览器" class="headerlink" title="Chrome浏览器"></a>Chrome浏览器</h3><pre><code>Chrome浏览器是一个非常亲近开发者的浏览器。可以方便的查看网络请求以及发送的参数。对着网页右键-&gt;检查。然后就可以打开开发者选项。以下用图片来说明。 </code></pre><p><img src="https://i.imgur.com/Ru1ov2J.png" alt="1"><br><img src="https://i.imgur.com/zC66TIe.png" alt="2"><br><img src="https://i.imgur.com/htxzlhU.png" alt="3"><br><img src="https://i.imgur.com/fvnOJFn.png" alt="4"></p><h2 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h2><pre><code>urllib库是Python中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</code></pre><h3 id="urlopen函数："><a href="#urlopen函数：" class="headerlink" title="urlopen函数："></a>urlopen函数：</h3><pre><code>在Python3的urllib库中，所有和网络请求相关的方法，都被集到urllib.request模块下面了，以先来看下urlopen函数基本的使用：from urllib import requestresp = request.urlopen(&apos;http://www.baidu.com&apos;)print(resp.read())实际上，使用浏览器访问百度，右键查看源代码。你会发现，跟我们刚才打印出来的数据是一模一样的。也就是说，上面的三行代码就已经帮我们把百度的首页的全部代码爬下来了。一个基本的url请求对应的python代码真的非常简单。</code></pre><h4 id="以下对urlopen函数的进行详细讲解："><a href="#以下对urlopen函数的进行详细讲解：" class="headerlink" title="以下对urlopen函数的进行详细讲解："></a>以下对urlopen函数的进行详细讲解：</h4><pre><code>url：请求的url。data：请求的data，如果设置了这个值，那么将变成post请求。返回值：返回值是一个http.client.HTTPResponse对象，这个对象是一个类文件句柄对象。有read(size)、readline、readlines以及getcode等方法。</code></pre><h3 id="urlretrieve函数："><a href="#urlretrieve函数：" class="headerlink" title="urlretrieve函数："></a>urlretrieve函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个函数可以方便的将网页上的一个文件保存到本地。以下代码可以非常方便的将百度的首页下载到本地：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(<span class="string">'http://www.baidu.com/'</span>,<span class="string">'baidu.html'</span>)</span><br></pre></td></tr></table></figure><h3 id="urlencode函数："><a href="#urlencode函数：" class="headerlink" title="urlencode函数："></a>urlencode函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用浏览器发送请求的时候，如果url中包含了中文或者其他特殊字符，那么浏览器会自动的给我们进行编码。</span><br><span class="line">而如果使用代码发送请求，那么就必须手动的进行编码，这时候就应该使用urlencode函数来实现。urlencode可以把字典数据转换为URL编码的数据。</span><br><span class="line">示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">data = &#123;<span class="string">'name'</span>:<span class="string">'爬虫基础'</span>,<span class="string">'greet'</span>:<span class="string">'hello world'</span>,<span class="string">'age'</span>:<span class="number">100</span>&#125;</span><br><span class="line">qs = parse.urlencode(data)</span><br><span class="line">print(qs)</span><br></pre></td></tr></table></figure><h3 id="parse-qs函数："><a href="#parse-qs函数：" class="headerlink" title="parse_qs函数："></a>parse_qs函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">可以将经过编码后的url参数进行解码。示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">qs = <span class="string">"name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&amp;greet=hello+world&amp;age=100"</span></span><br><span class="line">print(parse.parse_qs(qs))</span><br><span class="line">urlparse和urlsplit：</span><br><span class="line"></span><br><span class="line">有时候拿到一个url，想要对这个url中的各个组成部分进行分割，那么这时候就可以使用urlparse或者是urlsplit来进行分割。示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?username=zhiliao'</span></span><br><span class="line"></span><br><span class="line">result = parse.urlsplit(url)</span><br><span class="line"><span class="comment"># result = parse.urlparse(url)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'scheme:'</span>,result.scheme)</span><br><span class="line">print(<span class="string">'netloc:'</span>,result.netloc)</span><br><span class="line">print(<span class="string">'path:'</span>,result.path)</span><br><span class="line">print(<span class="string">'query:'</span>,result.query)</span><br></pre></td></tr></table></figure><h3 id="urlparse和urlsplit"><a href="#urlparse和urlsplit" class="headerlink" title="urlparse和urlsplit"></a>urlparse和urlsplit</h3><pre><code>urlparse和urlsplit基本上是一模一样的。唯一不一样的地方是，urlparse里面多了一个params属性，而urlsplit没有这个params属性。比如有一个url为：url = &apos;http://www.baidu.com/s;hello?wd=python&amp;username=abc#1&apos;，那么urlparse可以获取到hello，而urlsplit不可以获取到。url中的params也用得比较少。</code></pre><h3 id="urllib库请求"><a href="#urllib库请求" class="headerlink" title="urllib库请求"></a>urllib库请求</h3><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><ol><li>汉字报错 :解释器器ascii没有汉字 url汉字转码<br>urllib.parse.quote safe=”string.printtable”</li><li>字典传参<br>urllib.parse.urlencode()</li></ol><h4 id="post"><a href="#post" class="headerlink" title="post:"></a>post:</h4><ol><li>urlib.request.openurl(url,data = “服务器器接受的数据”)</li><li>handler:处理理器器的自自定义:</li></ol><h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent:"></a>User-Agent:</h4><p><code>在浏览网页的时候，爬虫的浏览速度明显超过人的点击速度，所以速度过快会触发反扒。</code></p><p>这个时候，我们可以通过自定义<code>User-Agent</code>，模拟出不同的用户在浏览网页，在一定机制上可以防止反扒机制</p><ol><li>模拟真实的浏览器器发送请求:<ol><li>百度批量量搜索</li><li>检查元素(百度搜索useragent大大全)</li></ol></li><li>request.add_header(动态添加head数据)</li><li>响应头 response.header</li><li>创建request:urlib.request.Request(url)</li></ol><h4 id="IP代理理"><a href="#IP代理理" class="headerlink" title="IP代理理:"></a>IP代理理:</h4><ol><li>免费的IP:时效性差,错误率高高</li><li>付费的IP:贵花钱,也有失效不不能用用的</li></ol><h5 id="IP分类"><a href="#IP分类" class="headerlink" title="IP分类:"></a>IP分类:</h5><ol><li>透明:对方方知道我们真实的ip</li><li>匿名:对方方不不知道我们真实的ip,知道了了你使用用了了代理理</li><li>高匿:对方方不不知道我们真实的IP.也不不知道我们使用用了了代理理</li></ol><h4 id="handler"><a href="#handler" class="headerlink" title="handler:"></a>handler:</h4><p>系统的urlopen()不不支支持代理理的添加<br>创建对应的处理器(handler)</p><ol><li>代理理处理理器器:ProxyHandler</li><li>拿着ProxyHandler创建opener:bulid_opener()</li><li>opener.open(url)就可以请求数据</li><li>auth认证handler<br>CookieshandlerURLError<br>requests(第三方方模块):简单易易用用<br>数据解析:<br>数据存储:json csv MongDB resdis mysql</li></ol><h3 id="urllib库实战"><a href="#urllib库实战" class="headerlink" title="urllib库实战"></a>urllib库实战</h3><h4 id="使用百度搜索信息，返回查询的网页"><a href="#使用百度搜索信息，返回查询的网页" class="headerlink" title="使用百度搜索信息，返回查询的网页"></a>使用百度搜索信息，返回查询的网页</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> urlllib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHttp</span><span class="params">(url)</span>:</span></span><br><span class="line">    baidu_url = <span class="string">'http://www.baidu.com/s?wd='</span></span><br><span class="line">    fin_url = baidu_url + url</span><br><span class="line">    <span class="comment"># 由于用户输入的信息可能是中文，所以需要转码为ASCII码等python可以解释的编码</span></span><br><span class="line">    fin_code_url = urllib.parse.quote(fin_url, safe=string.printable)</span><br><span class="line">    r = urllib.request.urlopen(fin_code_url)</span><br><span class="line">    <span class="comment"># r.read() 可能返回的是bytes数据，而不是字符串数据，因此存储为utf-8需要decode一下</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'baidu.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.read().decode())</span><br><span class="line"></span><br><span class="line">url = input()</span><br><span class="line"><span class="comment"># url 存储输入的信息，代表用户想要查询的数据</span></span><br><span class="line">getHttp(url)</span><br></pre></td></tr></table></figure><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">()</span>:</span></span><br><span class="line">    baidu_url = <span class="string">'http://www.baidu.com/s?'</span></span><br><span class="line">    <span class="comment"># 如果发送get请求，那么请求参数就在请求链接中，通过字典的方式来设置请求参数</span></span><br><span class="line">    diction = &#123;</span><br><span class="line">        <span class="string">"wd"</span>:<span class="string">"中文"</span>,</span><br><span class="line">        <span class="string">"key"</span>:<span class="string">"zhang"</span>,</span><br><span class="line">        <span class="string">"value"</span>:<span class="string">"san"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 把字典转换为字符串，然后用于字符串拼接，同时可以把中文转换为ASCII便于Python解释</span></span><br><span class="line">    str_params = urllib.parse.urlencode(diction);</span><br><span class="line">    fin_url = baidu_url+str_params</span><br><span class="line">    r = urllib.request.urlopen(fin_url)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'index.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.read().decode())</span><br></pre></td></tr></table></figure><h4 id="添加响应头信息"><a href="#添加响应头信息" class="headerlink" title="添加响应头信息"></a>添加响应头信息</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">常见的User-Agent：</span><br><span class="line"><span class="attribute">Opera</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60</span><br><span class="line">Opera/8.0 (Windows NT 5.1; U; en)</span><br><span class="line">Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50</span><br><span class="line"> </span><br><span class="line"><span class="attribute">Firefox</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0</span><br><span class="line">Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10</span><br><span class="line"> </span><br><span class="line"><span class="attribute">Safari</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2</span><br><span class="line"> </span><br><span class="line"><span class="attribute">chrome</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36</span><br><span class="line">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11</span><br><span class="line">Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16</span><br><span class="line"> </span><br><span class="line"><span class="attribute">360</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">淘宝浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11</span><br><span class="line"> </span><br><span class="line">猎豹浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER) </span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span><br><span class="line"><span class="attribute">QQ浏览器</span></span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)</span><br><span class="line"><span class="attribute">sogou浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)</span><br><span class="line"><span class="attribute">maxthon浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36</span><br><span class="line"><span class="attribute">UC浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">IPhone</span></span><br><span class="line">Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"> </span><br><span class="line"><span class="attribute">IPod</span></span><br><span class="line">Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"> </span><br><span class="line"><span class="attribute">IPAD</span></span><br><span class="line">Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5</span><br><span class="line">Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"> </span><br><span class="line"><span class="attribute">Android</span></span><br><span class="line">Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line"> </span><br><span class="line">QQ浏览器 Android版本</span><br><span class="line">MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line"> </span><br><span class="line">Android Opera Mobile</span><br><span class="line">Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10</span><br><span class="line"> </span><br><span class="line">Android Pad Moto Xoom</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13</span><br><span class="line"> </span><br><span class="line"><span class="attribute">BlackBerry</span></span><br><span class="line">Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</span><br><span class="line"> </span><br><span class="line">WebOS HP Touchpad</span><br><span class="line">Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</span><br><span class="line"> </span><br><span class="line">Nokia N97</span><br><span class="line">Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</span><br><span class="line"> </span><br><span class="line">Windows Phone Mango</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</span><br><span class="line"> </span><br><span class="line"><span class="attribute">UC浏览器</span></span><br><span class="line"><span class="attribute">UCWEB7.0.2.37/28/999</span></span><br><span class="line"> </span><br><span class="line">NOKIA5700/ UCWEB7.0.2.37/28/999</span><br><span class="line"> </span><br><span class="line"><span class="attribute">UCOpenwave</span></span><br><span class="line">Openwave/ UCWEB7.0.2.37/28/999</span><br><span class="line"> </span><br><span class="line">UC Opera</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_baidu</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://www.baidu.com/s?"</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#创建请求对象</span></span><br><span class="line">    request = urllib.request.Request(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取请求头的信息，因为没有设置值，所以为空</span></span><br><span class="line">    print(request.headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加请求头信息</span></span><br><span class="line">    <span class="comment">#方法1</span></span><br><span class="line">    request = urllib.request.Request(url, headers=header)</span><br><span class="line">    <span class="comment">#方法2 动态添加，通过创建user-agent来随机的创建出请求头，以迷惑服务器的反扒机制</span></span><br><span class="line">    request.add_header(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">#response = urllib.request.urlopen(url) 也可以，但是我们可以通过这是请求对象的方式来设置一下请求参数</span></span><br><span class="line">    respon = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#查看响应头</span></span><br><span class="line">    print(respon.headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"index.html"</span>, <span class="string">'w'</span>,  encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(respon.read().decode())</span><br></pre></td></tr></table></figure><h4 id="urllib中的proxy代理"><a href="#urllib中的proxy代理" class="headerlink" title="urllib中的proxy代理"></a>urllib中的proxy代理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_openner</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    <span class="comment">#handler 处理器</span></span><br><span class="line">    <span class="comment">#系统的urlopen 并没有添加 代理的功能</span></span><br><span class="line">    <span class="comment"># handler = urllib.request.HTTPHandler()#创建处理器</span></span><br><span class="line">    <span class="comment">#添加代理</span></span><br><span class="line">    proxy = &#123;</span><br><span class="line">            <span class="comment">#免费代理的写法</span></span><br><span class="line">            <span class="string">"http"</span>:<span class="string">"http://121.61.1.129:9999"</span></span><br><span class="line">            <span class="comment">#付费代理的写法</span></span><br><span class="line">            <span class="comment">#"http":"用户名":密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#可以使用list来设置随机代理，防止反扒</span></span><br><span class="line">    proxys = [</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"1.192.240.196:9999"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"125.123.141.52:9999"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"119.101.125.128:9999"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"119.101.127.46:9999"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"121.61.3.143:9999"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># 代理的处理器</span></span><br><span class="line">    proxy_handler = urllib.request.ProxyHandler(proxy)</span><br><span class="line">    <span class="comment"># opener = urllib.request.build_opener(handler)#通过处理器创建自己的opener</span></span><br><span class="line">    opener = urllib.request.build_opener(proxy_handler)<span class="comment">#通过代理器创建自己的opener</span></span><br><span class="line">    <span class="comment">#通过查看 urllib.request.urlopen()函数可以发现，python网络连接就是通过opener的open函数</span></span><br><span class="line">    <span class="comment">#通过有代理的opener来执行网络连接</span></span><br><span class="line">    data = opener.open(url).read();</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><h2 id="request-Request类："><a href="#request-Request类：" class="headerlink" title="request.Request类："></a>request.Request类：</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果想要在请求的时候增加一些请求头，那么就必须使用request.Request类来实现。比如要增加一个User-Agent，示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">"http://www.baidu.com/"</span>,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h2 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。</span><br><span class="line">所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。</span><br><span class="line">urllib中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="comment"># 这个是没有使用代理的</span></span><br><span class="line"><span class="comment"># resp = request.urlopen('http://httpbin.org/get')</span></span><br><span class="line"><span class="comment"># print(resp.read().decode("utf-8"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是使用了代理的</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">"http"</span>:<span class="string">"218.66.161.88:31769"</span>&#125;)</span><br><span class="line"></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">req = request.Request(<span class="string">"http://httpbin.org/ip"</span>)</span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h3 id="常用的代理有："><a href="#常用的代理有：" class="headerlink" title="常用的代理有："></a>常用的代理有：</h3><pre><code>西刺免费代理IP：http://www.xicidaili.com/快代理：http://www.kuaidaili.com/代理云：http://www.dailiyun.com/</code></pre><h2 id="什么是cookie："><a href="#什么是cookie：" class="headerlink" title="什么是cookie："></a>什么是cookie：</h2><pre><code>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用cookie只能存储一些小量的数据。</code></pre><h3 id="cookie的格式："><a href="#cookie的格式：" class="headerlink" title="cookie的格式："></a>cookie的格式：</h3><pre><code>Set-Cookie: NAME=VALUE；Expires/Max-age=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE参数意义：NAME：cookie的名字。VALUE：cookie的值。Expires：cookie的过期时间。Path：cookie作用的路径。Domain：cookie作用的域名。SECURE：是否只在https协议下起作用。</code></pre><h3 id="使用cookielib库和HTTPCookieProcessor模拟登录："><a href="#使用cookielib库和HTTPCookieProcessor模拟登录：" class="headerlink" title="使用cookielib库和HTTPCookieProcessor模拟登录："></a>使用cookielib库和HTTPCookieProcessor模拟登录：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Cookie 是指网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。</span><br><span class="line">这里以人人网为例。</span><br><span class="line">人人网中，要访问某个人的主页，必须先登录才能访问，登录说白了就是要有cookie信息。那么如果我们想要用代码的方式访问，就必须要有正确的cookie信息才能访问。</span><br><span class="line">解决方案有两种，第一种是使用浏览器访问，然后将cookie信息复制下来，放到headers中。示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'anonymid=jacdwz2x-8bjldx; depovince=GW; _r01_=1; _ga=GA1.2.1455063316.1511436360; _gid=GA1.2.862627163.1511436360; wp=1; JSESSIONID=abczwY8ecd4xz8RJcyP-v; jebecookies=d4497791-9d41-4269-9e2b-3858d4989785|||||; ick_login=884e75d4-f361-4cff-94bb-81fe6c42b220; _de=EA5778F44555C091303554EBBEB4676C696BF75400CE19CC; p=61a3c7d0d4b2d1e991095353f83fa2141; first_login_flag=1; ln_uact=970138074@qq.com; ln_hurl=http://hdn.xnimg.cn/photos/hdn121/20170428/1700/main_nhiB_aebd0000854a1986.jpg; t=3dd84a3117737e819dd2c32f1cdb91d01; societyguester=3dd84a3117737e819dd2c32f1cdb91d01; id=443362311; xnsid=169efdc0; loginfrom=syshome; ch_id=10016; jebe_key=9c062f5a-4335-4a91-bf7a-970f8b86a64e%7Ca022c303305d1b2ab6b5089643e4b5de%7C1511449232839%7C1; wp_fold=0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">但是每次在访问需要cookie的页面都要从浏览器中复制cookie比较麻烦。在Python处理Cookie，一般是通过http.cookiejar模块和urllib模块的HTTPCookieProcessor处理器类一起使用。http.cookiejar模块主要作用是提供用于存储cookie的对象。而HTTPCookieProcessor处理器主要作用是处理这些cookie对象，并构建handler对象。</span><br></pre></td></tr></table></figure><h3 id="http-cookiejar模块："><a href="#http-cookiejar模块：" class="headerlink" title="http.cookiejar模块："></a>http.cookiejar模块：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">该模块主要的类有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。这四个类的作用分别如下：</span><br><span class="line"></span><br><span class="line">CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</span><br><span class="line">FileCookieJar (filename,delayload=<span class="keyword">None</span>,policy=<span class="keyword">None</span>)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为<span class="keyword">True</span>时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。</span><br><span class="line">MozillaCookieJar (filename,delayload=<span class="keyword">None</span>,policy=<span class="keyword">None</span>)：从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。</span><br><span class="line">LWPCookieJar (filename,delayload=<span class="keyword">None</span>,policy=<span class="keyword">None</span>)：从FileCookieJar派生而来，创建与libwww-perl标准的 Set-Cookie3 文件格式兼容的FileCookieJar实例。</span><br><span class="line">登录人人网：</span><br><span class="line"></span><br><span class="line">利用http.cookiejar和request.HTTPCookieProcessor登录人人网。相关示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_opener</span><span class="params">()</span>:</span></span><br><span class="line">    cookiejar = CookieJar()</span><br><span class="line">    handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">    opener = request.build_opener(handler)</span><br><span class="line">    <span class="keyword">return</span> opener</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_renren</span><span class="params">(opener)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">"email"</span>: <span class="string">"970138074@qq.com"</span>, <span class="string">"password"</span>: <span class="string">"pythonspider"</span>&#125;</span><br><span class="line">    data = parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    login_url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">    req = request.Request(login_url, headers=headers, data=data)</span><br><span class="line">    opener.open(req)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit_profile</span><span class="params">(opener)</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line">    req = request.Request(url,headers=headers)</span><br><span class="line">    resp = opener.open(req)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(resp.read().decode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    opener = get_opener()</span><br><span class="line">    login_renren(opener)</span><br><span class="line">    visit_profile(opener)</span><br></pre></td></tr></table></figure><h3 id="保存cookie到本地："><a href="#保存cookie到本地：" class="headerlink" title="保存cookie到本地："></a>保存cookie到本地：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">保存cookie到本地，可以使用cookiejar的save方法，并且需要指定一个文件名：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br><span class="line">cookiejar.save(ignore_discard=<span class="keyword">True</span>,ignore_expires=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="从本地加载cookie："><a href="#从本地加载cookie：" class="headerlink" title="从本地加载cookie："></a>从本地加载cookie：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">从本地加载cookie，需要使用cookiejar的load方法，并且也需要指定方法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">cookiejar.load(ignore_expires=<span class="keyword">True</span>,ignore_discard=<span class="keyword">True</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><pre><code>虽然Python的标准库中 urllib模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests宣传是 “HTTP for Humans”，说明使用更简洁方便。</code></pre><h3 id="安装和文档地址："><a href="#安装和文档地址：" class="headerlink" title="安装和文档地址："></a>安装和文档地址：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">利用pip可以非常方便的安装：</span><br><span class="line"></span><br><span class="line">pip install requests</span><br><span class="line">中文文档：http://docs.python-requests.org/zh_CN/latest/index.html</span><br><span class="line">github地址：https://github.com/requests/requests</span><br></pre></td></tr></table></figure><h3 id="发送GET请求："><a href="#发送GET请求：" class="headerlink" title="发送GET请求："></a>发送GET请求：</h3><pre><code>最简单的发送get请求就是通过requests.get来调用：response = requests.get(&quot;http://www.baidu.com/&quot;)</code></pre><h3 id="添加headers和查询参数："><a href="#添加headers和查询参数：" class="headerlink" title="添加headers和查询参数："></a>添加headers和查询参数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 params 参数。相关示例代码如下：</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"> kw = &#123;<span class="string">'wd'</span>:<span class="string">'中国'</span>&#125;</span><br><span class="line"></span><br><span class="line"> headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line"> response = requests.get(<span class="string">"http://www.baidu.com/s"</span>, params = kw, headers = headers)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line"> print(response.text)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class="line"> print(response.content)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看完整url地址</span></span><br><span class="line"> print(response.url)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看响应头部字符编码</span></span><br><span class="line"> print(response.encoding)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看响应码</span></span><br><span class="line"> print(response.status_code)</span><br></pre></td></tr></table></figure><h3 id="发送POST请求："><a href="#发送POST请求：" class="headerlink" title="发送POST请求："></a>发送POST请求：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最基本的POST请求可以使用post方法：</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">"http://www.baidu.com/"</span>,data=data)</span><br></pre></td></tr></table></figure><h3 id="传入data数据："><a href="#传入data数据：" class="headerlink" title="传入data数据："></a>传入data数据：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">这时候就不要再使用urlencode进行编码了，直接传入一个字典进去就可以了。比如请求拉勾网的数据的代码：</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"> url = <span class="string">"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0"</span></span><br><span class="line"></span><br><span class="line"> headers = &#123;</span><br><span class="line">     <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">     <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput='</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> data = &#123;</span><br><span class="line">     <span class="string">'first'</span>: <span class="string">'true'</span>,</span><br><span class="line">     <span class="string">'pn'</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="string">'kd'</span>: <span class="string">'python'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> resp = requests.post(url,headers=headers,data=data)</span><br><span class="line"> <span class="comment"># 如果是json数据，直接可以调用json方法</span></span><br><span class="line"> print(resp.json())</span><br></pre></td></tr></table></figure><h3 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://httpbin.org/get"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'171.14.209.180:27829'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url,headers=headers,proxies=proxy)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xx.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.text)</span><br></pre></td></tr></table></figure><h3 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = &#123;<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>&#125;</span><br><span class="line">resp = requests.get(<span class="string">'http://www.baidu.com/'</span>)</span><br><span class="line">print(resp.cookies)</span><br><span class="line">print(resp.cookies.get_dict())</span><br></pre></td></tr></table></figure><h3 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">之前使用urllib库，是可以使用opener发送多个请求，多个请求之间是可以共享cookie的。</span><br><span class="line">那么如果使用requests，也要达到共享cookie的目的，那么可以使用requests库给我们提供的session对象。</span><br><span class="line">注意，这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。还是以登录人人网为例，使用requests来实现。</span><br><span class="line">示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = &#123;<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问大鹏个人中心</span></span><br><span class="line">resp = session.get(<span class="string">'http://www.renren.com/880151247/profile'</span>)</span><br><span class="line"></span><br><span class="line">print(resp.text)</span><br></pre></td></tr></table></figure><h3 id="处理不信任的SSL证书："><a href="#处理不信任的SSL证书：" class="headerlink" title="处理不信任的SSL证书："></a>处理不信任的SSL证书：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于那些已经被信任的SSL整数的网站，比如https://www.baidu.com/，那么使用requests直接就可以正常的返回响应。示例代码如下：</span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">'http://www.12306.cn/mormhweb/'</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">print(resp.content.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爬虫的实际例子：&quot;&gt;&lt;a href=&quot;#爬虫的实际例子：&quot; class=&quot;headerlink&quot; title=&quot;爬虫的实际例子：&quot;&gt;&lt;/a&gt;爬虫的实际例子：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 搜索引擎（百度、谷歌、360搜索等）。
2. 伯乐在线。
3. 惠惠购
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>web安全</title>
    <link href="http://yoursite.com/2018/10/03/web%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2018/10/03/web安全/</id>
    <published>2018-10-03T10:39:24.000Z</published>
    <updated>2018-10-23T11:37:15.271Z</updated>
    
    <content type="html"><![CDATA[<pre><code>安全问题：1. 用户身份被盗用2. 用户密码泄露3. 用户资料被盗取4. 网站数据库是否泄露5. 其他攻击种类：1. 跨站脚本攻击XSS2. 跨站请求伪造攻击3. 前端Cookies安全性4. 点击劫持攻击5. 传输过程安全问题6. 用户密码安全问题7. SQL注入攻击8. 信息泄露和社会工程学配置环境：    1. 安装npm    2. 安装node.js    3. npm install nodemon -g（一旦更改代码就自动重启，不用手动重启了 -g 是global全局的意思）    4. 安装mysql</code></pre><h2 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h2><pre><code>Cross Site Scripting ：跨站脚本攻击跨站：我的网站，自然希望网站里面所有的逻辑都来自自己写的代码。如果我的网站运行了来自其他网站的脚本，就叫跨站。</code></pre><p><img src="https://i.imgur.com/7GoBQpj.png" alt=""></p><pre><code>这样一来人为的给网页一个脚本，一般来说只要是网页脚本能做的事情，xss注入的脚本都能做。1. 获取页面数据2. 获取Cookies3. 劫持前端逻辑（改变原有的逻辑）4. 发送请求（通过图片，form等方式发送到攻击者指定的网站）5. 偷取网站的用户数据6. 偷取网站任意数据7. 欺骗用户8. ......例如，我在QQ空间内一个说说内混杂了XSS，所有访问的我空间的看到那篇说说的人都会在不知情的情况下向我规定的地方发送我想要的数据</code></pre><h3 id="XSS攻击分类"><a href="#XSS攻击分类" class="headerlink" title="XSS攻击分类"></a>XSS攻击分类</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><pre><code>直接由url带过去的，页面直接显示这段代码写好url，再发给别人访问，以此获取访问者数据。但是可能网址很长，或者一眼能看出 网址包含的脚本，所以用长网址生成短网址这改一下https://dwz.cn/#/?_k=uu9n2n</code></pre><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><pre><code>XSS被保存在网站数据中，在其他用户访问的时候被其他用户执行</code></pre><h4 id="XSS攻击注入点"><a href="#XSS攻击注入点" class="headerlink" title="XSS攻击注入点"></a>XSS攻击注入点</h4><pre><code>1. HTML节点内容    1. 标签内内容是由用户输入，动态生成的2. HTML属性    1. 某个标签的属性是由用户输入，定义的3. JavaScript代码    1. js代码中存在由后台注入的变量，或者用户的输入的数据，有可能导致js代码的逻辑改变4. 富文本    1. 有各式的html文本    2. qq空间发的说说这种就叫富文本例如：    &lt;img src=&quot;&quot; /&gt; 其中src是用户上传或者输入的    这时，我们上传一个名为 1&quot; onerror=&quot;alert(0) 的文件，这样原本的src就被替换成 &lt;img src=&quot;1&quot; onerror=&quot;alert(0)&quot; /&gt;例如：    js代码从后台拿用户数据，但是用户数据是XSS的脚本    var data = &quot;hello &quot;;alert(1);&quot;&quot;;例如：    qq邮箱中，有文本编辑器，即为富文本。富文本传输的其实就是一堆复杂的html代码，也就是说可以人为的修改其原本想表达的东西</code></pre><h3 id="防御XSS"><a href="#防御XSS" class="headerlink" title="防御XSS"></a>防御XSS</h3><pre><code>1. 浏览器自动拦截    当你的js参数出现在连接中，浏览器会进行自动拦截。    但是防御极其有限，只能防御注入在html和属性中的部分XSS，而js中的和富文本中的并不能拦截2. 对文本中进行转义    当XSS注入的时候，对 &quot;&lt;&quot; 和 &quot;&gt;&quot;进行转义，使之失去标签的作用         &quot;&lt;&quot;     ——&gt; &amp;lt;         &quot;&gt;&quot;     ——&gt; &amp;gt;    除此之外，html的属性需要 双引号，单引号，或者不需要引号，所以继续转义        &quot; &quot; &quot;    ——&gt; &amp;quto;        &quot; &apos; &quot;    ——&gt; &amp;apos;        &quot; &quot;        ——&gt; &amp;#32;3. 对js从后台数据库提取的数据进行转义    转义字符 或者 转换成 json4. 对于富文本设置 黑名单 或者 白名单    黑名单：禁止某些属性或者标签的出现        优点：好写，只需要进行正则        缺点：html标签属性繁杂，一不小心就容易疏忽某些标签属性    白名单：只允许某些标签或者属性的出现        优点：完全防止禁用标签或者属性的出现        缺点：不好写</code></pre><h3 id="CSP"><a href="#CSP" class="headerlink" title="CSP"></a>CSP</h3><pre><code>Content Security Policy内容安全策略，用于指定哪些内容可执行CSP是http的头，规定了有哪些来源，可以限制    1. child-src(页面的自内容), connect-src(网络连接，如ajax), default-src(当其他没指定，就用default)2. font-src(字体), frame-src(框架), img-src(图片)3. manifest-src9Webapp的信息), media-src(视频音频), object-src(插件)4. script-src(脚本), style-src(css), worker-src(servers work等)定义了一些来源：1. &lt;host-source&gt;(host规定信任域名)&lt;scheme-source&gt;(根据信任协议判断是否信任) &apos;self&apos;(同域可信任)2. &apos;unsage-inline&apos;(指定是否信任直接插入页面的内容) &apos;unsafe-eval&apos; (是否调用eval，函数)&apos;none&apos;(不信任任何内容)3. &apos;nonce-&lt;base64-value&gt;&apos;(指定一个一次性的内容，) &lt;hash-source&gt;(后台定义hash表，前端计算跟hash相同的才会执行)4. &apos;strict-dynamic&apos;(信任脚本之后，脚本新链接的网站或者其他脚本是否信任)基本格式：Content-security-Policy:default-src &apos;self&apos; http://example.com;connect-src &apos;non1&apos;;Content-Security-Policy:connect-src http://example.com;script-src http://example.com/&lt;meta http-equiv=&quot;Content-Srcurity-Policy&quot; content=&quot;default-src https;&quot;&gt;</code></pre><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><pre><code>Cross Site Request Forgy跨站请求伪造例如：    我在A网站登陆了A网站的账号，我打开了B网站，B网站有脚本可以让我在不知情的情况下对A网站进行了操作，比如获取隐私数据，转账等</code></pre><h3 id="CSRF的运行顺序"><a href="#CSRF的运行顺序" class="headerlink" title="CSRF的运行顺序"></a>CSRF的运行顺序</h3><pre><code>1. B网站向A网站2. 带A网站的Cookies3. 不访问A网站前端4. referer为B网站</code></pre><h3 id="CSRF的特征"><a href="#CSRF的特征" class="headerlink" title="CSRF的特征"></a>CSRF的特征</h3><pre><code>1. 利用用户登陆态2. 用户不知情3. 完成业务请求4. ......</code></pre><h3 id="CSRF的危害"><a href="#CSRF的危害" class="headerlink" title="CSRF的危害"></a>CSRF的危害</h3><pre><code>1. 盗取用户资金（转账，消费）2. 冒充用户发帖背锅3. 损害网站名誉4. ......</code></pre><h3 id="CSRF的防御"><a href="#CSRF的防御" class="headerlink" title="CSRF的防御"></a>CSRF的防御</h3><h4 id="进制第三方网站带Cookies"><a href="#进制第三方网站带Cookies" class="headerlink" title="进制第三方网站带Cookies"></a>进制第三方网站带Cookies</h4><pre><code>Cookies新带了 same-site属性，也就是说只有来自同一网站的请求才能带CookiesCookies添加SameSite属性：    SameSite = Strict：不允许任何链接带Cookies    SameSite = Lax：允许部分带Cookies，但是像ajax这种不能带Cookies    SameSite = true</code></pre><h4 id="在前端页面加入验证信息"><a href="#在前端页面加入验证信息" class="headerlink" title="在前端页面加入验证信息"></a>在前端页面加入验证信息</h4><pre><code>既然CSRF不经过前端，那么设置一下，只有你经过前端才能访问到数据，那么也许可以拦截CSRF的攻击</code></pre><h5 id="验证码"><a href="#验证码" class="headerlink" title="验证码"></a>验证码</h5><pre><code>通过图形验证码的方式，攻击者网站是无法知道随机的验证码是多少的缺点：    1. 有局限性，毕竟不能给所有操作加上验证码    2. 用户体验不好</code></pre><h5 id="token"><a href="#token" class="headerlink" title="token"></a>token</h5><pre><code>token是服务端生成的一串字符串，以作用户端进行请求的一个令牌，当第一次登陆之后，服务器生成一个token并将此返回给客户端。以后客户端只要带上这个token就行了，不需要带上用户密码提交的时候必须加上token信息才能生效，而只有经过前端才能获得token，也就是说通过这种方式可以防止第三方平台的不知情操作</code></pre><h4 id="什么是referer"><a href="#什么是referer" class="headerlink" title="什么是referer"></a>什么是referer</h4><pre><code>上面 &quot;CSRF的运行顺序&quot; 中提到了referer是什么呢？referer是HTTP协议中的一个请求头，包含了请求时来自哪里的信息。所以CSRF中的referer中的请求位置时 攻击者 网站很容易的我们可以想到，验证请求位置是否是正常用户端来防止CSRF的发生其实 referer 的拼写应该是 referrer，所以这个是为数不多的错误拼写的单词</code></pre><h2 id="前端Cookies问题"><a href="#前端Cookies问题" class="headerlink" title="前端Cookies问题"></a>前端Cookies问题</h2><pre><code>Cookies是什么？1. 它是一个前端数据的存储，它的存储是放在前端的。2. 后端可以通过http头设置Cookies的值。3. 请求时通过http头传给后端4. 前端也可以读写Cookies5. 遵守同源策略：当协议，域名，端口全部一致的时候才能读写前端只要通过 &quot;document.cookie&quot; 就可以取到Cookies了，追加可以直接 &quot; document.cookie = &quot;userId=2&quot; &quot;Cookies 可以修改原来的值，也能追加新的值，而且Cookies有自己的结构</code></pre><h3 id="Cookies-的特性"><a href="#Cookies-的特性" class="headerlink" title="Cookies 的特性"></a>Cookies 的特性</h3><pre><code>1. Cookies 有一个域名，表明在哪些地方可以使用2. Cookies 有一个有效期，表明在那段时间可以用3. Cookies 有一个路径，表明用在网络的哪一级，就像url层级一样4. Cookies 只能被http协议使用，即http-only5. secure 指定Cookies能否在 https中使用以上都可以在开发者工具中看到，可以通过js查看：    document.cookie在 父路径中无法查看 子路径的Cookies例如：    127.0.0.1:8080 界面无法看到 127.0.0.1:8080/user/login 中的Cookies，但反过来就可以Cookies没有删除方法，想删除Cookies只有设置Cookies的有效期为过去的时间，才能删除Cookies</code></pre><h3 id="Cookies作用"><a href="#Cookies作用" class="headerlink" title="Cookies作用"></a>Cookies作用</h3><pre><code>1. 存储个性化设置    1. 用户在我的网站用的什么皮肤    2. 用户上次浏览到那个界面    3. 某个菜单是打开还是关闭2. 存储未登录时用户唯一标识3. 存储已登录用户的凭证4. 存储其他业务数据</code></pre><h4 id="Cookies-登陆用户凭证"><a href="#Cookies-登陆用户凭证" class="headerlink" title="Cookies-登陆用户凭证"></a>Cookies-登陆用户凭证</h4><pre><code>1. 前端提交用户名和密码2. 后端验证用户名和密码3. 后端设置http头，设置用户凭证    1. 用户ID（不安全，容易被篡改）    2. 用户ID+签名（签命通过自己的算法算出，安全性高）    3. SessionID（随机的字符串）</code></pre><h3 id="Cookies-和-CSS的关系"><a href="#Cookies-和-CSS的关系" class="headerlink" title="Cookies 和 CSS的关系"></a>Cookies 和 CSS的关系</h3><pre><code>XSS可能偷取Cookieshttp-only的Cookies有几率避免Cookies被盗</code></pre><h3 id="Cookies-和-CSRF的关系"><a href="#Cookies-和-CSRF的关系" class="headerlink" title="Cookies 和 CSRF的关系"></a>Cookies 和 CSRF的关系</h3><pre><code>CSRF利用了用户的Cookies发送数据等但是攻击站点无法读写Cookies最好能阻止第三方使用Cookies</code></pre><h3 id="Cookies-安全策略"><a href="#Cookies-安全策略" class="headerlink" title="Cookies-安全策略"></a>Cookies-安全策略</h3><pre><code>1. 加签命放篡改（数据是明文，只是验证有没有被修改）2. 私有变换（加密）3. http-only（防止XSS）4. secure5. same-site</code></pre><h2 id="点击劫持"><a href="#点击劫持" class="headerlink" title="点击劫持"></a>点击劫持</h2><pre><code>操作是用户完成，但是并不是用于自主意愿完成的通过用户的点击完成某个操作，但是用户并不知情。例如：    用户登录网站A，此时打开网站B，在网站B上的点击操作，实际上应用在的网站A中    B网站里面其实是一个&lt;iframe&gt;，将A网站的架构放在了&lt;iframe&gt;中，然后通过设置opcity来隐藏这个&lt;iframe&gt;，再然后就给&lt;body&gt;一个背景贴图    贴图中有按钮样子的图片，也有其他的图片，混淆视听，当用于点击贴图中的图片的时候，其实点的是&lt;iframe&gt;中的按钮</code></pre><h3 id="点击劫持的特征"><a href="#点击劫持的特征" class="headerlink" title="点击劫持的特征"></a>点击劫持的特征</h3><pre><code>1. 用户亲手操作2. 用户不知情3. ......</code></pre><h3 id="点击劫持的危害"><a href="#点击劫持的危害" class="headerlink" title="点击劫持的危害"></a>点击劫持的危害</h3><pre><code>1. 盗取用户资金（转账，消费）2. 获取用户敏感信息3. ......</code></pre><h3 id="点击劫持的防御"><a href="#点击劫持的防御" class="headerlink" title="点击劫持的防御"></a>点击劫持的防御</h3><pre><code>点击劫持攻击的前提是 通过&lt;iframe&gt;将目标网站嵌套到自己网站</code></pre><h4 id="用Javascript禁止内嵌"><a href="#用Javascript禁止内嵌" class="headerlink" title="用Javascript禁止内嵌"></a>用Javascript禁止内嵌</h4><pre><code>在js中，如果没有内嵌那么 top === window如果被内嵌了，top 并不是 === window，&lt;iframe&gt;中的window就是&lt;iframe&gt;的window 但是 top 指的是 &lt;body&gt;的windowif(top.location != window.location){      top.location = window.location  }通过上面的代码，窗口会进行跳转，跳转到&lt;iframe&gt;的界面，也就是原界面但是 &lt;iframe&gt;中，有一个sandbox属性来限制&lt;iframe&gt;的功能，例如禁掉js的能力，所以js并不能百分百解决点击劫持</code></pre><h4 id="X-FRAME-OPTIONS-直接禁止内嵌"><a href="#X-FRAME-OPTIONS-直接禁止内嵌" class="headerlink" title="X-FRAME-OPTIONS 直接禁止内嵌"></a>X-FRAME-OPTIONS 直接禁止内嵌</h4><pre><code>ctx.set(&apos;X-FRAME-OPTIONS&apos;, &apos;DEMY&apos;);DENY            禁止内嵌SAME-ORIGIN        同一个网站可以使用SAMEORIIN        嵌入页和被嵌入页在同一域下ALLOW-FROM+网站    允许指定网址内嵌</code></pre><h4 id="其他辅助手段"><a href="#其他辅助手段" class="headerlink" title="其他辅助手段"></a>其他辅助手段</h4><pre><code>1. 验证码2. ......</code></pre><h2 id="HTTP传输窃听"><a href="#HTTP传输窃听" class="headerlink" title="HTTP传输窃听"></a>HTTP传输窃听</h2><pre><code>HTTP是一个明文协议，也就是说不会对数据进行加密客户端和服务器的发送都是明文的而数据包会经过很多中间节点，而这些节点愿意的话可以修改这些数据</code></pre><p><img src="https://i.imgur.com/fk6k3FK.png" alt=""></p><pre><code>1. 窃听    开启服务器代理，http请求可以直接查看文件请求头，响应头，响应body。2. 篡改    在代理软件中，修改资源文件为我电脑中的资源文件，那么在客户端看到或显示的我的资源</code></pre><h3 id="窃听和篡改"><a href="#窃听和篡改" class="headerlink" title="窃听和篡改"></a>窃听和篡改</h3><pre><code>窃听：你传输过程中的所有数据可以直接被别人看到1. 窃听用户密码2. 切丁患处敏感信息3. 非法获取个人资料篡改：在传输过程中，修改或者插入信息1. 插入广告2. 重定向网站3. 无法防御的XSS和CSRF攻击（如果修改了html或者js，那么我们做的防御没有任何意义）</code></pre><h3 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h3><pre><code>HTTP协议是明文协议，中间方就可以直接查看篡改。HTTPS TLS(SSL)加密 在 传输层加密TLS 就是 SSL，现在称之为TLS，以前是SSL</code></pre><h3 id="中间人攻击"><a href="#中间人攻击" class="headerlink" title="中间人攻击"></a>中间人攻击</h3><pre><code>中间人对客户端来说是服务器，对服务器来说是客户端，它是一个伪装的设备也就是说，中间人可以查看客户端与服务器之间的通信，而不受TLS加密的影响</code></pre><h3 id="确认服务器身份"><a href="#确认服务器身份" class="headerlink" title="确认服务器身份"></a>确认服务器身份</h3><pre><code>CA：数字证书中心</code></pre><p><img src="https://i.imgur.com/24cItvo.png" alt=""></p><pre><code>保证安全的点：1. 证书无法被伪造2. 证书私钥不被泄露（恶意攻击者盗用私钥，可以查看篡改）3. 域名管理权不能泄露（一旦泄露，被恶意攻击者指向自己的服务器，证书就会给攻击者的服务器而不给你）4. CA坚守原则（验证不通过，不给证书）</code></pre><h2 id="密码安全"><a href="#密码安全" class="headerlink" title="密码安全"></a>密码安全</h2><h3 id="密码的作用"><a href="#密码的作用" class="headerlink" title="密码的作用"></a>密码的作用</h3><pre><code>&quot;证明你是你&quot;，说白了就是证明一下登陆操作的人是合法用户原理很简单，就是申请账号的时候是你最开始设置的密码和你现在使用的密码相同，对比一下就是了</code></pre><h3 id="密码泄露渠道"><a href="#密码泄露渠道" class="headerlink" title="密码泄露渠道"></a>密码泄露渠道</h3><pre><code>1. 数据库被偷2. 服务器被入侵3. 通讯过程被窃听4. 内部人员泄露数据5. 其他网站（撞库，A网站的数据泄露，攻击者拿着用户的密码试用户在其他网站的密码）6. ......</code></pre><h3 id="密码存储"><a href="#密码存储" class="headerlink" title="密码存储"></a>密码存储</h3><pre><code>1. 严禁密码的明文存储（防泄露，数据库中存储不用明文，加密）2. 单向变换（一个密码对应一个密文）3. 变化复杂度要求（防猜解）4. 密码复杂度要求（防猜解）5. 加盐（放猜解）</code></pre><h4 id="哈希算法——信息摘要算法"><a href="#哈希算法——信息摘要算法" class="headerlink" title="哈希算法——信息摘要算法"></a>哈希算法——信息摘要算法</h4><pre><code>明文-密文     一一对应雪崩效应     只要明文有一点不一样，密文完全不一样密文-明文    无法反推密文固定长度    一般来说32为字符串常见哈希算法    md5, sha1, sha256</code></pre><h4 id="密码单项变化彩虹表"><a href="#密码单项变化彩虹表" class="headerlink" title="密码单项变化彩虹表"></a>密码单项变化彩虹表</h4><pre><code>以md5为例，先暴力出所有的可能的明文的密文，然后根据窃听得到的密文去反过来查明文。这样子存着所有结果的密文表就被成为彩虹表1. 混合加密    但是我们可以 混合多种加密算法，例如：        md5(明文) = 密文        md5(md5(明文)) = 密文        md2(sha1(明文)) = 密文        md5(sha256(sha1(明文))) = 密文    这样子就算是查彩虹表，最后得到的可能很难是正确的2. 复杂密码    虽然可以用算密文反过去映射明文，但是位数越多，越复杂的密码，破解所需的时间和内存就越大，一个20为的密码需要900G的硬盘来存储密码</code></pre><h3 id="加盐"><a href="#加盐" class="headerlink" title="加盐"></a>加盐</h3><pre><code>md5（ID + 原始密码 + 盐（随机生成的字符串） + 固定随机串（服务器一开始就定义的不变的字符串）*N个（顺序随意））= 最终密码就是自动的给原始密码一个复杂的字符串，让其安全</code></pre><h3 id="密码变化次数越安全"><a href="#密码变化次数越安全" class="headerlink" title="密码变化次数越安全"></a>密码变化次数越安全</h3><pre><code>1. 加密成本几乎不变（生成密码时速度慢一些，但是只生成一次）    1. 对使用者来说，这点时间几乎是小事    2. 对解密者来说，破解时间成倍增加2. 彩虹表失效（数量太大，无法建立链接）3. 解密成本增加N倍</code></pre><h3 id="密码传输的安全性"><a href="#密码传输的安全性" class="headerlink" title="密码传输的安全性"></a>密码传输的安全性</h3><pre><code>1. https传输2. 频率限制（限制固定时间内只能登陆多少次）3. 前端加密意义有限（传输层窃听并不知道明文密码，但是攻击者也可以传输你传输的密文）</code></pre><h3 id="生物特征密码"><a href="#生物特征密码" class="headerlink" title="生物特征密码"></a>生物特征密码</h3><pre><code>1. 指纹（唇纹）2. 声纹3. 虹膜4. 人脸</code></pre><h4 id="缺陷"><a href="#缺陷" class="headerlink" title="缺陷"></a>缺陷</h4><pre><code>1. 私密性-容易泄露（指纹随时可以提取，圣文也是，人脸也是）2. 安全性-碰撞（可能出现识别错误）3. 唯一性-终身唯一 无法修改（如果别人获取了你的密码，你不能去改你的指纹密码对吧）</code></pre><h2 id="接入层注入问题"><a href="#接入层注入问题" class="headerlink" title="接入层注入问题"></a>接入层注入问题</h2><h3 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h3><pre><code>1. 存放结构化数据2. 可搞笑操作大量数据（维护，查询）3. 方便处理数据之间的关联关系4. 常见的：access/sqlite/mysql/mssql server</code></pre><h3 id="SQL语言"><a href="#SQL语言" class="headerlink" title="SQL语言"></a>SQL语言</h3><pre><code>数据库查询语言1. 被广泛接受的语言，各大数据库都能接受，已经被标准化2. 但是标准话并不代表完全语言，每个数据库的SQL都有一点不一样3. 类似自然语言4. 用于关系型数据库</code></pre><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><pre><code>在web中，数据库操作都是通过事先定义的代码实现的，毕竟用户不可能直接操作数据库例如：    select * from table where id = ${id};</code></pre><h4 id="什么是注入"><a href="#什么是注入" class="headerlink" title="什么是注入"></a>什么是注入</h4><pre><code>如果用户传入的是一个 &quot; 1 or 1 = 1 &quot;，这个是一个id但是插入到sql中变成了：    select * from table where id = 1 or 1 = 1;    类似于XSS，去用传入的数据修改原本的逻辑结构例如：    select * from user where username = &apos;${data.username}&apos; and password = &apos;${data.password}&apos;这个时候，用户传入的是 &quot;username&quot; &quot;1&apos; or &apos;1&apos;=&apos;1&quot;那么原本的查询语句就变成了：    select * from user where username=&apos;username&apos; and password = &apos;1&apos;or&apos;1&apos;=&apos;1&apos;那么很容易发现， &quot; or &quot;这个关键字 否认了前面所有的判断，导致攻击者随便找个账户都能登陆</code></pre><h4 id="注入方法"><a href="#注入方法" class="headerlink" title="注入方法"></a>注入方法</h4><pre><code>1. 在网址后加上 &quot; and 1=1 &quot;网页不会产生变化2. 但是加上 &quot; and 1=0 &quot;    网页就变化报错了，通过这个可以检查是否有sql注入的危险3. 或者插入 &quot; or 1=1 &quot;访问一些当前用户没有权限访问的页面4. 同理通过 &quot;and union(version(), 1, 1)=6&quot;来判断数据库的版本位数第一位是否是6，这种方式获得数据库信息5. 知道数据库的信息，可以查看该版数据库的漏洞6. 还有通过其他的sql语句可以探测到 数据库的字段，例如ID，password是否存在，来推测表的结构7. 这里只介绍了很小很小的一部分，还有很多可以去搜索</code></pre><h4 id="sql注入的危害"><a href="#sql注入的危害" class="headerlink" title="sql注入的危害"></a>sql注入的危害</h4><pre><code>1. 猜解密码（用工具很快）2. 获取数据（信息泄露）3. 删库删表4. 拖库5. ......</code></pre><h4 id="SQL注入防御"><a href="#SQL注入防御" class="headerlink" title="SQL注入防御"></a>SQL注入防御</h4><pre><code>1. 关闭错误输出    1. 攻击者通过错误输出信息来判断注入方向是否正确2. 检查数据类型    例如： 120.0.0.1/post/10中10是页面的id    但是 攻击者通过 120.0.0.1/post/100 or 1=1来随机的查看页面    这个时候只要判断后面的值是否是数字，就能判断出是否是攻击者，我们只接收前面的10，不接受后面的字符串3. 对数据进行转义（escape()模块）    因为上面只是简单的id，但是有的时候搜索需要字符，所以不能一棒子打死    对于某些情况，可以通过转义来限制用户输入的意思，防止注入语句4. 使用参数化查询（需要安装mysql2）    先告诉数据库，我要传一个id，你帮我找一下    再传一个id过去，不管这个id是什么，数据库只会查找id而不会执行这个id    先给个意图，再给参数    npm install mysql2 --save5. 使用ORM（对象关系映射）    把数据库的数据，通过代码的对象映射出来，一个对象就是一个记录    一般语言都有人写好了ORM    npm install sequelize --save（node.js的ORM）</code></pre><h4 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h4><pre><code>非关系型数据库，不同于sql，一定程度上可以防御sql注入但是也是可以sql注入的</code></pre><h5 id="防御方式"><a href="#防御方式" class="headerlink" title="防御方式"></a>防御方式</h5><pre><code>1. 检查数据类型2. 类型转换3. 写完整条件</code></pre><h2 id="接入层上传问题"><a href="#接入层上传问题" class="headerlink" title="接入层上传问题"></a>接入层上传问题</h2><h3 id="上传问题"><a href="#上传问题" class="headerlink" title="上传问题"></a>上传问题</h3><pre><code>1. 上传文件2. 再次访问上传的文件3. 上传的文件被当成程序解析如果上传的文件只是图片，音频就还行，但是如果是可执行文件就会出现大问题，因为攻击者的逻辑会被执行所以需要判断上传文件的后缀等，防止不符合要求的文件上传</code></pre><h2 id="社会工程学"><a href="#社会工程学" class="headerlink" title="社会工程学"></a>社会工程学</h2><h3 id="信息泄露"><a href="#信息泄露" class="headerlink" title="信息泄露"></a>信息泄露</h3><pre><code>1. 泄露系统敏感信息2. 泄露用户敏感信息3. 泄露用户密码</code></pre><h3 id="信息泄露的途径"><a href="#信息泄露的途径" class="headerlink" title="信息泄露的途径"></a>信息泄露的途径</h3><pre><code>1. 错误信息失控2. sql注入3. 水平权限控制不当4. XSS/CSRF5. 快递单/房产中介6. ......</code></pre><h3 id="社会工程学-1"><a href="#社会工程学-1" class="headerlink" title="社会工程学"></a>社会工程学</h3><pre><code>通过渠道挖出你的个人信息</code></pre><p><img src="https://i.imgur.com/KFpGqX6.png" alt=""></p><pre><code>仅仅通过你的昵称，查出你的姓名，进而查到更多隐私信息，然后建立出一个个人数据模型你的身份由你掌握的资料确定，当你的个人信息被别人掌握，别人就可以伪装成你的身份，然后用你的身份去做坏事</code></pre><h3 id="社会工程学案例"><a href="#社会工程学案例" class="headerlink" title="社会工程学案例"></a>社会工程学案例</h3><h4 id="电信诈骗（徐玉玉案件）"><a href="#电信诈骗（徐玉玉案件）" class="headerlink" title="电信诈骗（徐玉玉案件）"></a>电信诈骗（徐玉玉案件）</h4><pre><code>为什么会出现电信诈骗，因为骗子通过掌握的关于你的信息去获取你的信任高考录取之后，成绩公示，报纸公示，让徐玉玉的个人信息被不法分子获取，并且利用这些信息进行诈骗</code></pre><h4 id="伪装公检法"><a href="#伪装公检法" class="headerlink" title="伪装公检法"></a>伪装公检法</h4><pre><code>处于对公检法的信任，外加对方可以报出你的个人信息，甚至一些私人信息，你不会怀疑对方</code></pre><h4 id="QQ视频借钱"><a href="#QQ视频借钱" class="headerlink" title="QQ视频借钱"></a>QQ视频借钱</h4><pre><code>伪装好友，发送QQ视频，由于信息泄露可以获取一个人的视频，声音</code></pre><h4 id="微信伪装好友"><a href="#微信伪装好友" class="headerlink" title="微信伪装好友"></a>微信伪装好友</h4><pre><code>就算一开始你不信，但是久而久之你就以为她是你的好友</code></pre><h3 id="OAuth思想"><a href="#OAuth思想" class="headerlink" title="OAuth思想"></a>OAuth思想</h3><pre><code>即 现在网站的 授权登陆 的思想</code></pre><p><img src="https://i.imgur.com/fIstJMH.png" alt=""><br><code>access Token为每个用户对应的那一个Token，所以每次查询，只能查一个人，一定范围内保护用户资料</code></p><pre><code>特点：1. 一切行为由用户授权2. 授权行为不泄露敏感信息3. 授权会过期</code></pre><h3 id="利用OAuth思想防止资料泄露"><a href="#利用OAuth思想防止资料泄露" class="headerlink" title="利用OAuth思想防止资料泄露"></a>利用OAuth思想防止资料泄露</h3><p><img src="https://i.imgur.com/lJ3UsPM.png" alt=""></p><pre><code>1. 用户授权读取票据2. 无授权的资料不能读取（防止一个人查询其他人的资料）3. 不允许批量获取数据、4. 数据接口可风控审计（获取查询数据的时间，位置等）</code></pre><h2 id="其他安全问题"><a href="#其他安全问题" class="headerlink" title="其他安全问题"></a>其他安全问题</h2><h3 id="拒绝服务-DOS"><a href="#拒绝服务-DOS" class="headerlink" title="拒绝服务 DOS"></a>拒绝服务 DOS</h3><pre><code>模拟正常用户访问网站，但是访问量成千上万甚至过亿，来占用服务器大量的资源，以至于网站不能正常打开访问</code></pre><h4 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h4><pre><code>1. TCP半连接    TCP的三次握手，我们只发送第一次请求，让服务器处于准备好并等待我们第三次握手的状态，这个时候就会影响服务器工作2. HTTP链接3. DNS    当TCP和HTTP的潮水攻击都被防下来的时候，转而攻击你的DNS（域名解析服务器）</code></pre><h4 id="大范围分布式拒绝服务攻击DDOS"><a href="#大范围分布式拒绝服务攻击DDOS" class="headerlink" title="大范围分布式拒绝服务攻击DDOS"></a>大范围分布式拒绝服务攻击DDOS</h4><pre><code>在DOS的基础上，用大范围的机器攻击网站服务器1. 流量可达几十到上百G2. 分布式（肉鸡，代理）3. 极难防御（无法辨别正常用户和恶意用户）</code></pre><h4 id="DOS攻击防御"><a href="#DOS攻击防御" class="headerlink" title="DOS攻击防御"></a>DOS攻击防御</h4><pre><code>1. 防火墙（防火墙有办法尝试过滤恶意流量）2. 交换机，路由器（只能防护小范围）3. 流量清洗（对流量进行分析，找出特征，分辨正常访问）4. 高防IP（云服务提供的，当面对DOS攻击时，把IP转为服务器提供商提供的另一个IP，而另一个IP拥有大规模的流量清洗服务）5. 编写代码时 避免重逻辑业务6. 快速失败快速返回7. 防雪崩机制8. 有损服务9. CDN（静态网页发送到CDN上，减少服务器的压力）</code></pre><h3 id="重放攻击"><a href="#重放攻击" class="headerlink" title="重放攻击"></a>重放攻击</h3><pre><code>请求被窃听或记录，再次发送相同的请求，产生意外的结果例如：1. 用户被多次消费2. 用户登陆态被盗取（重新发送之后，伪装成原用户）3. 多次抽奖</code></pre><h4 id="重放冲击防御"><a href="#重放冲击防御" class="headerlink" title="重放冲击防御"></a>重放冲击防御</h4><pre><code>1. 加密（HTTPS）2. 请求加时间戳（防止二次发送）3. 加上token（session，每次发送的token都会变化，那么同样的请求 token就会很容易识别出来）4. nonce（num+once，是只用一次的数字，就像ID一样）5. 数字签名</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;pre&gt;&lt;code&gt;安全问题：
1. 用户身份被盗用
2. 用户密码泄露
3. 用户资料被盗取
4. 网站数据库是否泄露
5. 其他

攻击种类：
1. 跨站脚本攻击XSS
2. 跨站请求伪造攻击
3. 前端Cookies安全性
4. 点击劫持攻击
5. 传输过程安全问题
6.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从0开始的JavaWeb---H5篇</title>
    <link href="http://yoursite.com/2018/09/29/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JavaWeb/"/>
    <id>http://yoursite.com/2018/09/29/从0开始的JavaWeb/</id>
    <published>2018-09-29T12:37:38.000Z</published>
    <updated>2018-10-13T02:12:59.899Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Html"><a href="#Html" class="headerlink" title="Html"></a>Html</h2><h3 id="什么是Html？"><a href="#什么是Html？" class="headerlink" title="什么是Html？"></a>什么是Html？</h3><pre><code>HyperText Markup Language：超文本标记语言** 超文本：超出文本的范畴，使用html可以轻松实现** 标记：html所有的操作都是通过标记实现的。标记，就是标签  ** 网页语言：超文本标记语言</code></pre><h3 id="第一个html程序："><a href="#第一个html程序：" class="headerlink" title="第一个html程序："></a>第一个html程序：</h3><pre><code>例如：创建Java文件 后缀名为.java**先编译，后运行（jvm）同理：html文件后缀是.html**直接通过浏览器就可以运行</code></pre><h3 id="html规范："><a href="#html规范：" class="headerlink" title="html规范："></a>html规范：</h3><pre><code>1. 一个html文件开始标签和结束的标签&lt;html&gt;&lt;/html&gt;2. html包含两个部分内容：    &lt;head&gt;&lt;/head&gt;     &lt;body&gt;&lt;/body&gt; 3. html的标签有开始标签，也要有结束标签 4. html的代码不区分大小写&lt;font&gt; == &lt;FONT&gt; 5. 部分标签没有结束标签：    例如：&lt;br /&gt;//内部加个&quot;/&quot;，标签内结束</code></pre><h3 id="html的操作思想："><a href="#html的操作思想：" class="headerlink" title="*html的操作思想："></a>*html的操作思想：</h3><pre><code>网页中有很多的数据，不同的数据可能需要不同的显示效果，这个时候需要使用标签把要操作的数据封装起来，通过修改标签的属性值实现标签内数据样式的变化。一个标签就像等于一个容器，想要修改容器内数据的样式，只需要改变容器的属性值，就可以实现容器内的数据样式的变化。</code></pre><h3 id="html中常用的标签"><a href="#html中常用的标签" class="headerlink" title="html中常用的标签"></a>html中常用的标签</h3><h4 id="文字标签和注释标签"><a href="#文字标签和注释标签" class="headerlink" title="文字标签和注释标签"></a>文字标签和注释标签</h4><h5 id="文字标签：修改文字的样式"><a href="#文字标签：修改文字的样式" class="headerlink" title="*文字标签：修改文字的样式"></a>*文字标签：修改文字的样式</h5><pre><code>例如：&lt;font&gt; &lt;/font&gt;属性：color : 文字颜色(颜色的英文单词，或者十六进制rgb)     size : 文字大小（1~7）</code></pre><h5 id="注释标签"><a href="#注释标签" class="headerlink" title="注释标签"></a>注释标签</h5><pre><code>Java的注释有三种：&quot;//&quot; , &quot;/* */&quot; &quot;/*****/&quot;html的注释: &lt;!--  注释内容 --&gt;(源文件可以查看的注释)</code></pre><h4 id="标题标签，水平线标签和特殊字符"><a href="#标题标签，水平线标签和特殊字符" class="headerlink" title="标题标签，水平线标签和特殊字符"></a>标题标签，水平线标签和特殊字符</h4><h5 id="标题标签"><a href="#标题标签" class="headerlink" title="标题标签"></a>标题标签</h5><pre><code>&lt;h1&gt;&lt;/h1&gt;&lt;h2&gt;&lt;/h2&gt; ~~~~  &lt;h6&gt;&lt;/h6&gt;文字大小 从h1 到 h6 以此变小，并且每个标签都会自动换行</code></pre><h5 id="水平线标签"><a href="#水平线标签" class="headerlink" title="水平线标签"></a>水平线标签</h5><pre><code>&lt;hr /&gt; 标签内结束属性：    **size：水平线的粗细    **color：水平线的颜色</code></pre><h5 id="特殊字符"><a href="#特殊字符" class="headerlink" title="特殊字符"></a>特殊字符</h5><pre><code>想在网页中显示 &quot;&lt;html&gt;是一个特殊标签&quot;如果直接写 &quot;&lt;html&gt;是一个特殊标签&quot;，则只会显示 &quot;是一个特殊标签&quot;需要转义&quot;&lt;html&gt;&quot;：    &amp;lt;       ---&gt;     &quot;&lt;&quot;   小于符号    &amp;gt;      ---&gt;     &quot;&gt;&quot;   大于符号    &amp;amp;      ---&gt;     &quot;&amp;&quot;   and符号 &amp;    &amp;apos;    ---&gt;     &quot;&apos;&quot;   英文单引号    &amp;quot;    ---&gt;     &quot;&quot;&quot;   英文双引号    &amp;nbsp;  ---&gt;     &quot; &quot;   空格转义</code></pre><h4 id="列表标签"><a href="#列表标签" class="headerlink" title="列表标签"></a>列表标签</h4><pre><code>如果想在网页显示 列表的效果。</code></pre><h5 id="lt-dl-gt-lt-dl-gt-：表示列表的范围"><a href="#lt-dl-gt-lt-dl-gt-：表示列表的范围" class="headerlink" title="&lt;dl&gt;&lt;/dl&gt;：表示列表的范围"></a>&lt;dl&gt;&lt;/dl&gt;：表示列表的范围</h5><pre><code>    在&lt;dl&gt;里面  &lt;dt&gt;&lt;/dt&gt;：上层内容    在&lt;dl&gt;里面  &lt;dd&gt;&lt;/dd&gt;：下层内容例如：    &lt;dl&gt;        &lt;dt&gt;学习内容&lt;/dt&gt;            &lt;dd&gt;java&lt;/dd&gt;            &lt;dd&gt;C++&lt;/dd&gt;            &lt;dd&gt;Python&lt;/dd&gt;        &lt;dt&gt;学习进度&lt;/dt&gt;            &lt;dd&gt;没学&lt;/dd&gt;            &lt;dd&gt;没学&lt;/dd&gt;            &lt;dd&gt;没学&lt;/dd&gt;    &lt;/dl&gt;</code></pre><dl><br><dt>学习内容</dt><br><dd>java</dd><br><dd>C++</dd><br><dd>Python</dd><br><dt>学习进度</dt><br><dd>没学</dd><br><dd>没学</dd><br><dd>没学</dd><br></dl><h5 id="lt-ol-gt-lt-ol-gt-：有序列表的范围"><a href="#lt-ol-gt-lt-ol-gt-：有序列表的范围" class="headerlink" title="&lt;ol&gt;&lt;ol&gt;：有序列表的范围"></a>&lt;ol&gt;&lt;ol&gt;：有序列表的范围</h5><pre><code>    在&lt;ol&gt;&lt;/ol&gt;标签内部：&lt;li&gt;    属性：        type：这是排序方式 默认（缺省）为 1. 2. 3....            type = &quot;a&quot;            type = &quot;i&quot;例如：    &lt;ol type=&quot;a&quot;&gt;    &lt;li&gt;java&lt;/li&gt;    &lt;li&gt;C++&lt;/li&gt;    &lt;li&gt;Python&lt;/li&gt;    &lt;/ol&gt;</code></pre><ol type="a"><br><li>java</li><br><li>C++</li><br><li>Python</li><br></ol><h5 id="lt-ul-gt-lt-ul-gt-：无序列表的范围"><a href="#lt-ul-gt-lt-ul-gt-：无序列表的范围" class="headerlink" title="&lt;ul&gt;&lt;/ul&gt;：无序列表的范围"></a>&lt;ul&gt;&lt;/ul&gt;：无序列表的范围</h5><pre><code>属性：    type：        circle    空心圆            disc    实心圆（默认）        square    实心方块&lt;ol type=&quot;a&quot;&gt;&lt;li&gt;java&lt;/li&gt;&lt;li&gt;C++&lt;/li&gt;&lt;li&gt;Python&lt;/li&gt;&lt;/ol&gt;</code></pre><p><ul type="circle"></ul></p><p><li>java</li></p><p><li>C++</li></p><p><li>Python</li><br></p><h4 id="lt-img-gt-图像标签（重点）"><a href="#lt-img-gt-图像标签（重点）" class="headerlink" title="&lt;img&gt;图像标签（重点）"></a>&lt;img&gt;图像标签（重点）</h4><pre><code>&lt;img src=&quot;a.jpg&quot; width=&quot;宽像素&quot; height=&quot;高像素&quot; alt=&quot;显示的文字&quot;/&gt;--src：图片的路径--width：图片的宽度--height：图片的高度--alt：图片上显示的文字，把鼠标移动到图片上面，停留片刻显示内容</code></pre><h4 id="路径的介绍"><a href="#路径的介绍" class="headerlink" title="路径的介绍"></a>路径的介绍</h4><h5 id="第一类：绝对路径"><a href="#第一类：绝对路径" class="headerlink" title="第一类：绝对路径"></a>第一类：绝对路径</h5><pre><code>D:\blog\lc_love_hehe\source\_posts\p.jpghttp://www.baidu.com/b.jag</code></pre><h5 id="第二类：相对路径"><a href="#第二类：相对路径" class="headerlink" title="第二类：相对路径"></a>第二类：相对路径</h5><pre><code>一个文件相对于另外一个文件的位置三种写法：    当图片与html在同一个文件夹内，直接使用 b.jpg    当图片在html的同级文件夹img中，使用img/b.jpg    当图片在html的上级文件夹中，../b.jpg</code></pre><h4 id="超链接"><a href="#超链接" class="headerlink" title="超链接"></a>超链接</h4><h5 id="连接资源"><a href="#连接资源" class="headerlink" title="连接资源"></a>连接资源</h5><pre><code>&lt;a href=&quot;连接到资源的路径&quot;&gt;显示在页面上的内容&lt;/a&gt;    href：连接的资源的地址    target：设置打开的方式，默认是当前页打开。        _blank：在新窗口打开        _self：当前页打开    当超链接不需要到任何地址的时候，href=&quot;#&quot;&lt;a href=&quot;https://usuiforhe.github.io/&quot; target=&quot;_blank&quot;&gt;test&lt;/a&gt;</code></pre><h5 id="定位资源"><a href="#定位资源" class="headerlink" title="定位资源"></a>定位资源</h5><pre><code>&lt;a name=&quot;top&quot;&gt;顶部&lt;/a&gt;//定义顶部的位置&lt;a name=&quot;#top&quot;&gt;回到顶部&lt;/a&gt;//定位到网页中name为top的位置，记得加上#&lt;pre&gt;原样输出例如：public static void main(String[] args){    Syste.out.println(&quot;hello world&quot;);}&amp;lt;pre&amp;gt;public static void main(String[] args){    Syste.out.println(&quot;hello world&quot;);}&amp;lt;/pre&amp;gt;</code></pre><p>public static void main(String[] args){    Syste.out.println(“hello world”);}</p><p><pre><br>public static void main(String[] args){<br>    Syste.out.println(“hello world”);<br>}<br></pre><br><code>加上了 &lt;pre&gt; 标签后，原本一行的代码，变成了我们要的换行的效果</code></p><h4 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h4><pre><code>可以对数据进行格式化，使数据显示更加清晰&lt;table&gt;&lt;/table&gt;:表示表格的范围在&lt;table&gt;里面： &lt;caption&gt;表格标题在&lt;table&gt;里面： &lt;tr&gt;在&lt;tr&gt;里面：&lt;td&gt;画图分析表格的写法：    首先定义一个表格的范围使用table        定义一行使用 tr        定义一个单元格使用 td    操作技巧：        首先数有多少行，数每行里有多少个单元格    例如：        &lt;table&gt;            &lt;tr&gt;                &lt;td&gt;学科&lt;/td&gt;                &lt;td&gt;学习进度&lt;/td&gt;                &lt;td&gt;梦想&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;python&lt;/td&gt;                &lt;td&gt;没学&lt;/td&gt;                &lt;td rowspan=&quot;3&quot;&gt;想学&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;C++&lt;/td&gt;                &lt;td&gt;没学&lt;/td&gt;            &lt;/tr&gt;            &lt;tr&gt;                &lt;td&gt;Java&lt;/td&gt;                &lt;td&gt;没学&lt;/td&gt;            &lt;/tr&gt;        &lt;/table&gt;    属性：    &lt;table&gt;中：        border：表格线的粗细        bordercolor：表格线的颜色        cellspacing：表格之间的距离        align：left center right  框中文字的位置    &lt;td&gt;中：        colspan：0~无穷大，跨列        rowspan：0~无穷大，跨行</code></pre><table><br>    <tr><br>        <td>学科</td><br>        <td>学习进度</td><br>        <td>梦想</td><br>    </tr><br>    <tr><br>        <td>python</td><br>        <td>没学</td><br>        <td rowspan="3">想学</td><br>    </tr><br>    <tr><br>        <td>C++</td><br>        <td>没学</td><br>    </tr><br>    <tr><br>        <td>Java</td><br>        <td>没学</td><br>    </tr><br></table><h4 id="表单标签"><a href="#表单标签" class="headerlink" title="表单标签"></a>表单标签</h4><p><code>可以提交数据到服务器的标签，这个过程可以使用表单标签实现</code>  </p><blockquote><p>&lt;form&gt;&lt;/form&gt;：定义表单范围<br>输入项：可以输入内容或者选择内容的部分<br>    大部分的输入项 使用 &lt;input type = “输入类型” /&gt;  </p></blockquote><pre><code>Input  类型：type = &quot;email/url/number/range/date picker/search/color/tel&quot;      &lt;input type=&quot;password&quot;&gt;密码框&lt;input type=&quot;radio&quot; name=&quot;sex&quot;/&gt;女&lt;input type=&quot;radio&quot; name=&quot;sex&quot;/&gt;男  单选框&lt;input type=&quot;checkbox&quot; name=&quot;love&quot;/&gt;苹果&lt;input type=&quot;checkbox&quot; name=&quot;love&quot;/&gt;香蕉&lt;input type=&quot;checkbox&quot; name=&quot;love&quot;/&gt;栗子  多选框&lt;input type = &quot;url&quot; name = &quot;url&quot;&gt;    手机端弹出字母键盘，电脑端无差别  &lt;input type = &quot;email&quot; name = &quot;email&quot;&gt;    手机端弹出字母键盘，电脑端无差别  &lt;input type = &quot;tel&quot; name = &quot;tel&quot;&gt;    手机端弹出数字键盘，电脑端无差别  &lt;input type = &quot;number&quot; name = &quot;number&quot;&gt;    手机端弹出数字键盘，电脑端右边多处两个按钮控制加减，只能输入参与运算的内容“+ - . 1 2 3 4 5 6 7 9 e”  data picker input类型:      date —— 选取 日， 月， 年      month —— 选取月，年      week ——    选取 周和年      time ——     选取时间（小时和分钟）          datetime    —— 选取时间，日，月，年（utc时间）      datetime-local —— 选取时间，日，月， 年（本地时间）  使用方法一样 &lt;input type = &quot;date&quot; name = &quot;date&quot; &gt; 手机端显示的是 日期键盘  &lt;input type = &quot;range&quot; name = &quot;range&quot; min = &quot;最小值&quot; max = &quot;最大值&quot;&gt;  &lt;input type = &quot;image&quot; src=&quot;a.jpg&quot;/&gt;设置按钮为图片，作用是提交&lt;input type = &quot;search&quot; name = &quot;search&quot; &gt;  &lt;input type = &quot;color&quot; name = &quot;color&quot;&gt;弹出颜色选择  &lt;input type = &quot;hidden&quot;/&gt;     隐藏项，不会显示在页面中的&lt;input type = &quot;button&quot; /&gt;    普通按钮&lt;input type = &quot;submit&quot; /&gt;     提交按钮&lt;input type = &quot;reset&quot; value=&quot;你想显示的文字&quot;/&gt;    重置按钮&lt;selsect&gt;    &lt;option&gt;1&lt;/option&gt;    &lt;option&gt;2&lt;/option&gt;    &lt;option&gt;3&lt;/option&gt;&lt;/select&gt;下拉选项&lt;textarea cols=&quot;列数&quot; rows=&quot;行数&quot;&gt;&lt;/textarea&gt; 文本域</code></pre><p><code>最好每个输入项都有个name属性，方便后台提取数据。后台通过name属性获取对应输入的值</code></p><pre><code>表单属性：  autocomplete/autofocus/multiple/placeholder/required/action/method  action    是提交数据到的那个页面method    常用的就两种“get”“post”，默认getenctype    关于文件上传的属性&lt;form autocomplete = &quot;on&quot;（#自动完成功能，存下之前提交过的字段#）action = &quot;****&quot;    ausofocous = &quot;&quot;&gt;      &lt;input type = &quot;text&quot; name = &quot;text&quot;  autofocus = &quot;autofocus&quot;&gt;(#不写  autocomplete 默认开启存储  autofocus 光标自动确定该input#)      &lt;input type = &quot;email&quot; name = &quot;email&quot; autocomplete = &quot;off&quot;&gt;（#关闭自动存储#）      &lt;input type = &quot;file&quot; multiple = &quot;muliple&quot; / &gt;(#muliple 是乘法，代表多个的意思，同时上传多个文件#)      ps. multiple 在类型为type的时候，也可以用，多个邮箱之间用 分号 隔开。 如果没有multiple ，email类型也可以传多个email，但是用了multiple 的 input，会传出一个数组到后台，而没有用的则会传出一整个字符串，难以操作。      &lt;input type = &quot;text&quot; placeholder = &quot;用户名&quot; /&gt;(#提示输入用户名，开始输入时提示消失#)      ps. placeholder 适用于： text, search, url, tel, email, password。      &lt;input type = &quot;text&quot; required = &quot;required&quot; /&gt; （#required 规定必须在提交之前填写输入域（不能为空）#）      &lt;input type = &quot;submit&quot;&gt;  &lt;/form&gt;`</code></pre><h4 id="其他标签"><a href="#其他标签" class="headerlink" title="其他标签"></a>其他标签</h4><pre><code>&lt;b&gt;        加粗&lt;s&gt;        删除线&lt;u&gt;        下划线&lt;i&gt;        斜体&lt;pre&gt;    原样输出&lt;sub&gt;    下标&lt;sup&gt;    上标&lt;div&gt;    盒子，自带换行&lt;span&gt;    盒子，不带换行</code></pre><h4 id="html的头标签"><a href="#html的头标签" class="headerlink" title="html的头标签"></a>html的头标签</h4><pre><code>html由两部分组成 head 和 body在head里面的标签就是头标签    title：显示在标签上显示的内容    base：为页面上的所有链接规标题栏显示的内容定默认地址或默认目标（target属性）    例如：        &lt;base target=&quot;_blank&quot;&gt;        //这是所有的超链接都是新窗口打开    meta：可以提供有关页面的基本信息    例如：        &lt;meta http-equiv=&quot;refresh&quot; content=&quot;3;url=01-hello.html&quot;&gt;        // refresh 模拟页面请求， 3 3秒后， url 跳转的目标页面    link：定义文档与外部资源的关系</code></pre><h4 id="框架标签（过时）"><a href="#框架标签（过时）" class="headerlink" title="框架标签（过时）"></a>框架标签（过时）</h4><pre><code>&lt;frameset&gt;    属性：        rows：按行进行划分        cols：按列进行划分    &lt;frameset rows=&quot;80,*&quot;&gt;划分为两行，第一行高80        &lt;frame&gt;    具体显示的页面    &lt;frame name = &quot;lower_left&quot; src=&quot;b.html&quot;&gt;使用框架标签时候，不能写在body里面，需要把body去掉。</code></pre><h3 id="HTML样例"><a href="#HTML样例" class="headerlink" title="HTML样例"></a>HTML样例</h3><pre><code>&lt;body&gt;    &lt;header&gt;        &lt;div&gt;logo&lt;/div&gt;        &lt;nav&gt;            &lt;a href=&quot;test.html&quot;&gt;首页&lt;/a&gt;            &lt;a href=&quot;#&quot;&gt;介绍&lt;/a&gt;            &lt;a href=&quot;#&quot;&gt;案例&lt;/a&gt;            &lt;a href=&quot;#&quot;&gt;链接&lt;/a&gt;            &lt;a href=&quot;#&quot;&gt;关于&lt;/a&gt;        &lt;/nav&gt;    &lt;/header&gt;    &lt;section&gt;        &lt;aside&gt;            &lt;a href=&quot;#se1&quot;&gt;setcion1&lt;/a&gt;            &lt;a href=&quot;#se2&quot;&gt;section2&lt;/a&gt;            &lt;a href=&quot;#se3&quot;&gt;section3&lt;/a&gt;        &lt;/aside&gt;        &lt;article&gt;            Today, Rikka is going to learn how to use BIT to solve some simple data structure tasks. While studying,            She finds there is a magic expression x&amp;(−x) in the template of BIT. After searching for some literature,            Rikka realizes it is the implementation of the function lowbit(x).            lowbit(x) is defined on all positive integers. Let a1...am be the binary representation of x while a1 is the            least significant digit, k be the smallest index which satisfies ak = 1. The value of lowbit(x) is equal to            2            k−1            .            After getting some interesting properties of lowbit(x), Rikka sets a simple data structure task for you:            At first, Rikka defines an operator f(x), it takes a non-negative integer x. If x is equal to 0, it will return            0. Otherwise it will return x − lowbit(x) or x + lowbit(x), each with the probability of 1            2            .            Then, Rikka shows a positive integer array A of length n, and she makes m operations on it.            There are two types of operations:            • 1 L R, for each index i ∈ [L, R], change Ai to f(Ai).            • 2 L R, query for the expectation value of ∑R            i=L Ai            . (You may assume that each time Rikka calls f,            the random variable used by f is independent with others.)            Input            The first line contains a single integer t(1 ≤ t ≤ 3), the number of the testcases.            The first line of each testcase contains two integers n, m(1 ≤ n, m ≤ 105            ). The second line contains n            integers Ai(1 ≤ Ai ≤ 108            ).            And then m lines follow, each line contains three integers t, L, R(t ∈ {1, 2}, 1 ≤ L ≤ R ≤ n).            Output            For each query, let w be the expectation value of the interval sum, you need to output (w × 2            nm)            mod 998244353.            It is easy to find that w × 2            nm must be an integer.        &lt;/article&gt;    &lt;/section&gt;    &lt;input placeholder=&quot;选择手机品牌&quot; list=&quot;phtonlist&quot; /&gt;&lt;!--input的list 必须和datalist的id相同--&gt;    &lt;datalist id=&quot;phtonlist&quot;&gt;        &lt;option value=&quot;1&quot;&gt;1&lt;/option&gt;        &lt;option value=&quot;2&quot;&gt;2&lt;/option&gt;        &lt;option value=&quot;3&quot;&gt;3&lt;/option&gt;        &lt;option value=&quot;4&quot;&gt;4&lt;/option&gt;    &lt;/datalist&gt;    &lt;meter value=&quot;220&quot; min=&quot;20&quot; max=&quot;380&quot; low=&quot;200&quot; high=&quot;240&quot; optimum=&quot;220&quot;&gt;&lt;/meter&gt;&lt;!-- 当前值为220 最低为20 最高为380 标准在200~240之间 最好的取值为220--&gt;    &lt;meter value=&quot;180&quot; min=&quot;20&quot; max=&quot;380&quot; low=&quot;200&quot; high=&quot;240&quot; optimum=&quot;220&quot;&gt;&lt;/meter&gt;    &lt;meter value=&quot;260&quot; min=&quot;20&quot; max=&quot;380&quot; low=&quot;200&quot; high=&quot;240&quot; optimum=&quot;220&quot;&gt;&lt;/meter&gt;    &lt;meter value=&quot;0.75&quot;&gt;75%&lt;/meter&gt;    &lt;progress value=&quot;30&quot; max=&quot;100&quot;&gt;&lt;/progress&gt;    &lt;progress max=&quot;100&quot;&gt;&lt;/progress&gt;    &lt;details&gt;        &lt;summary&gt;你要显示的标题&lt;/summary&gt;        内容：。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。。    &lt;/details&gt;    &lt;menu type=&quot;toolbar&quot;&gt;        &lt;li&gt;            &lt;menu aria-label=&quot;File&quot;&gt;                &lt;button type=&quot;button&quot;&gt;new1&lt;/button&gt;                &lt;button type=&quot;button&quot;&gt;new2&lt;/button&gt;                &lt;button type=&quot;button&quot;&gt;new3&lt;/button&gt;            &lt;/menu&gt;        &lt;/li&gt;        &lt;li&gt;            &lt;button type=&quot;button&quot;&gt;new4&lt;/button&gt;            &lt;button type=&quot;button&quot;&gt;new5&lt;/button&gt;            &lt;button type=&quot;button&quot;&gt;new6&lt;/button&gt;        &lt;/li&gt;    &lt;/menu&gt;    &lt;footer&gt;        copyright......    &lt;/footer&gt;    &lt;p&gt;我们来&lt;ruby&gt;聊&lt;rt&gt;liao&lt;/rt&gt;&lt;/ruby&gt;天&lt;/p&gt;&lt;/body&gt;</code></pre><h2 id="CSS-层叠样式表"><a href="#CSS-层叠样式表" class="headerlink" title="CSS-层叠样式表"></a>CSS-层叠样式表</h2><h3 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h3><h4 id="层叠"><a href="#层叠" class="headerlink" title="层叠"></a>层叠</h4><pre><code>一层一层的，与优先级有关</code></pre><h4 id="样式表"><a href="#样式表" class="headerlink" title="样式表"></a>样式表</h4><pre><code>有很多的属性和属性值，改变标签的属性值，是标签变换</code></pre><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><pre><code>CSS将网页内容和显示样式进行分离，提高了显示功能，解决了html代码对样式定义的重复，提高了后期样式代码的可维护性。</code></pre><h3 id="CSS和Html的结合方式"><a href="#CSS和Html的结合方式" class="headerlink" title="CSS和Html的结合方式"></a>CSS和Html的结合方式</h3><pre><code>1. 在每个html标签上都有一个style属性。通过style属性修改标签样式    &lt;span style=&quot;background-color:red; color=green;&quot;&gt;测试&lt;/span&gt;2. 使用html的一个标签实现 &lt;style&gt; 标签，写在head里面    &lt;style type=&quot;text/css&quot;&gt;        div{            background-color:red;            color = green        }//所有div的样式都这样    &lt;/style&gt;3. 在&lt;style&gt;标签中使用语句 @import url (css文件的路径)    &lt;style type=&quot;text/css&quot;&gt;        @import url(div.css)    &lt;/style&gt;4. 使用头标签&lt;link&gt;,引入外部css文件    &lt;link rel=&quot;srtlesheet&quot; type=&quot;text/css&quot; href=&quot;css_3.css&quot; /&gt;Ps.第三种结合方式，缺点：在某些浏览器下不支持。一般来说，是用第四种结合方式。</code></pre><h3 id="CSS的优先级"><a href="#CSS的优先级" class="headerlink" title="CSS的优先级"></a>CSS的优先级</h3><pre><code>从上到下，从外到内，CSS的优先级从低到高。后加载的优先级高。</code></pre><h3 id="CSS书写规范"><a href="#CSS书写规范" class="headerlink" title="CSS书写规范"></a>CSS书写规范</h3><pre><code>1. 选择器名称{    属性名：属性值；    属性名：属性值；}2. 属性与属性之间用分号隔开3. 属性与属性值之间用冒号链接4. 如果一个属性有多个属性值的话，那么多个值用空格隔开</code></pre><h3 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h3><h4 id="id选择器"><a href="#id选择器" class="headerlink" title="id选择器"></a>id选择器</h4><pre><code>&lt;标签 id=&quot;test&quot;&gt;文字内容&lt;/标签&gt;在CSS文件中：    通过 #test{        background-color: red;    }来选择 id 为test的标签。也就是说 id 前面加上 &quot; # &quot;</code></pre><h4 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h4><pre><code>&lt;标签 class=&quot;test&quot;&gt;文字内容&lt;/标签&gt;在CSS文件中：    通过 .test{        background-color:red;    }来选择 class 为test的标签。也就是说 class 前面加上 &quot; . &quot;</code></pre><h4 id="标签选择器"><a href="#标签选择器" class="headerlink" title="标签选择器"></a>标签选择器</h4><pre><code>&lt;标签&gt;文字内容&lt;/标签&gt;在CSS文件中：    通过 标签{        background-color:red;    }来选择 标签</code></pre><p><code>class 选择器的优先级 &gt; 标签选择器的优先级</code><br><code>id选择器的优先级 &gt; class选择器的优先级</code><br><code>标签内部的style属性的优先级 &gt; id 选择器的优先级</code></p><h4 id="关联选择器"><a href="#关联选择器" class="headerlink" title="关联选择器"></a>关联选择器</h4><pre><code>&lt;div&gt;&lt;p&gt;test&lt;/p&gt;&lt;/div&gt;要选中 p 标签 那么CSS这样写    div p{        background-color:red;    }两个中间一个空格，这样就选中 div 子标签中的 p 标签</code></pre><h4 id="组合选择器"><a href="#组合选择器" class="headerlink" title="组合选择器"></a>组合选择器</h4><pre><code>&lt;div&gt;test111&lt;/div&gt;&lt;p&gt;test222&lt;/p&gt;想把div和p设置成一样的样式，那么CSS中这么写    div,p{        background-color:red;    }中间用逗号连接，表示两个都选中</code></pre><h4 id="伪类元素选择器"><a href="#伪类元素选择器" class="headerlink" title="伪类元素选择器"></a>伪类元素选择器</h4><pre><code>CSS里面提供了一些定义好的样式，可以拿过来使用原始状态        鼠标放上去的状态        点击             点击之后：link        ：hover                ：active        visited例如CSS文件中：    a:link{        background-color: red;    }    a:hover{        background-color: blue;    }    a:active{        background-color: black;    }第一个字符        第一行            在文字标签前面加上:first-letter    :first-line        ：before例如CSS文件中：    p:before    {        content:&quot;台词：&quot;;    }那么 所有的 p 标签前面 都会加上 &quot;台词&quot; 这两个字</code></pre><table><br><tr> <td>选择符类型</td> <td>表达式</td> <td>描述</td></tr><br><tr><td>子串匹配的属性选择符</td><td> E[att^=”val”] </td><td>匹配具有att属性、且值以val开头的E元素 </td> </tr><br><tr> <td>子串匹配的属性选择符</td> <td>E[att$=”val”]</td> <td>匹配具有att属性、且值以val结尾的E元素 </td> </tr><br><tr> <td>子串匹配的属性选择符</td> <td>E[att*=”val”]</td> <td>匹配具有att属性、且值中含有val的E元素 </td> </tr><br><tr> <td>结构性伪类</td> <td> E:root</td> <td> 匹配文档的根元素。在HTML中，根元素永远是HTML </td> </tr><br><tr> <td>结构性伪类</td> <td> E:nth-child(n)</td> <td> 匹配父元素中的第n个子元素E </td> </tr><br><tr> <td>结构性伪类</td> <td> E:nth-last-child(n)</td> <td> 匹配父元素中的倒数第n个结构子元素E</td> </tr><br><tr> <td>结构性伪类 </td> <td>E:nth-of-type(n)</td> <td> 匹配同类型中的第n个同级兄弟元素E<br></td></tr><tr> <td>结构性伪类</td> <td> E:nth-last-of-type(n)</td> <td> 匹配同类型中的倒数第n个同级兄弟元素E </td> </tr><br><tr> <td>结构性伪类</td> <td> E:last-child</td> <td> 匹配父元素中最后一个E元素</td> </tr><br><tr> <td>结构性伪类 </td> <td>E:first-of-type </td> <td>匹配同级兄弟元素中的第一个E元素 </td> </tr><br><tr> <td>结构性伪类 </td> <td>E:only-child </td> <td>匹配属于父元素中唯一子元素的E</td> </tr><br><tr> <td>结构性伪类 </td> <td>E:only-of-type </td> <td>匹配属于同类型中唯一兄弟元素的E</td> </tr><br><tr> <td>结构性伪类</td> <td> E:empty</td> <td> 匹配没有任何子元素（包括text节点）的元素E</td> </tr><br><tr> <td>目标伪类</td> <td> :target</td> <td> 匹配相关URL指向的E元素</td> </tr><br><tr> <td>UI元素状态伪类</td> <td> E:enabled</td> <td> 匹配所有用户界面（form表单）中处于可用状态的E元素 </td> </tr><br><tr> <td>UI元素状态伪类 </td> <td>E:disabled </td> <td>匹配所有用户界面（form表单）中处于不可用状态的E元素 </td> </tr><br><tr> <td>UI元素状态伪类</td> <td> E:checked</td> <td> 匹配所有用户界面（form表单）中处于选中状态的元素E </td> </tr><br><tr> <td>UI元素状态伪类</td> <td> E::selection</td> <td> 匹配E元素中被用户选中或处于高亮状态的部分</td> </tr><br><tr> <td>否定伪类</td> <td> E:not(s)</td> <td> 匹配所有不匹配简单选择符s的元素E</td> </tr><br><tr><td>通用兄弟元素选择器</td> <td> E ~ F </td> <td>匹配E元素之后的F元素 </td> </tr><br></table><h3 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h3><pre><code>div+CSS，给div一个样式，设置它的位置以及外观。又因为这div就像一个盒子一样，所以也叫做盒子模型。</code></pre><p><code>在进行布局前需要把数据封装到一块一块的区域内</code></p><h4 id="边框"><a href="#边框" class="headerlink" title="边框"></a>边框</h4><pre><code>属性：    border：统一设置        none | hidden | dotted | dashed | solid | double | groove | ridge | inset | outset        无边框| 隐藏边框|点线或实线|虚线或实线| 实线 |双线边框  | 3D凹槽 | 3D凸槽 |3D凹边 |3D凸边    border-top：上边框    border-bottom：下边框    border-left：左边框    border-right：右边框    border: 粗细（px） 样式（上述）颜色；</code></pre><h4 id="内边距"><a href="#内边距" class="headerlink" title="内边距"></a>内边距</h4><pre><code>padding：length（px）//统一设置padding-bottom    :    文字内容距离下边框的距离padding-left    :    文字内容距离左边框的距离padding-right    :    文字内容距离有边框的距离padding-top        :    文字内容距离上边框的距离</code></pre><h4 id="外边距"><a href="#外边距" class="headerlink" title="外边距"></a>外边距</h4><pre><code>margin：外边距，边框距离外边框的距离margin：length（px）//统一设置margin-top        :    边框距离上外边框的距离margin-bottom    :    边框距离下外边框的距离margin-right    :    边框距离右外边框的距离margin-left        :    边框距离左外边框的距离</code></pre><h3 id="CSS的布局的漂浮"><a href="#CSS的布局的漂浮" class="headerlink" title="CSS的布局的漂浮"></a>CSS的布局的漂浮</h3><pre><code>float：none | left | rightnone    ：默认值。对象不漂浮left    ：文本流向对象的右边right    ：文本流向对象的左边</code></pre><h3 id="CSS的布局的定位"><a href="#CSS的布局的定位" class="headerlink" title="CSS的布局的定位"></a>CSS的布局的定位</h3><pre><code>Position    属性：    static:默认值。无特殊定位，对象遵循HTML定位规则    absolute：将对象从文档流中脱出，使用left,right,top,bottom等属性相对于其进行绝对定位    ——————即，这个盒子独立出来，不由html自动按文档流分配位置，后面的盒子自动补齐该和自动空位    relative：对象不可层叠，但将依据left,right,top,bottom等属性在正常文档流中偏移位置。    ——————即，这个盒子没有从文档流中拖出，位置还在，但是可以移动而不影响其他的盒子的原有位置</code></pre><h2 id="Javascript"><a href="#Javascript" class="headerlink" title="Javascript"></a>Javascript</h2><h3 id="JavaScript简介"><a href="#JavaScript简介" class="headerlink" title="JavaScript简介"></a>JavaScript简介</h3><pre><code>JavaScript是基于对象和时间驱动的脚本语言，主要应用在客户端</code></pre><h4 id="基于对象"><a href="#基于对象" class="headerlink" title="基于对象"></a>基于对象</h4><pre><code>提供好了很多对象，可以直接拿过来使用</code></pre><h4 id="事件驱动"><a href="#事件驱动" class="headerlink" title="事件驱动"></a>事件驱动</h4><pre><code>html做网站是静态效果，加入了js后就可以完成动态的效果</code></pre><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><pre><code>1. 交互性（信息的动态交互）2. 安全性（不可以直接访问本地磁盘）3. 跨平台性（只要是可以解析js的浏览器都可以执行，与平台无关）</code></pre><h3 id="JavaScript的组成"><a href="#JavaScript的组成" class="headerlink" title="JavaScript的组成"></a>JavaScript的组成</h3><pre><code>三部分：1. ECMAScript    ECMA：欧洲计算机协会    由ECMA组织指定的js语法，语句......2. BOM    broswer object model：浏览器对象模型3. DOM    document object model：文档对象模型</code></pre><h3 id="JavaScript与HTML的结合"><a href="#JavaScript与HTML的结合" class="headerlink" title="JavaScript与HTML的结合"></a>JavaScript与HTML的结合</h3><pre><code>1. 使用一个标签    &lt;script type=&quot;text/javascript&quot;&gt;JavaScript代码&lt;/script&gt;2. 使用script引入外部标签文件    创建一个js文件，写js代码        &lt;script type=&quot;text/javascript&quot; src=&quot;a.js&quot;&gt;&lt;/script&gt; 这样写的话 &lt;script&gt;&lt;/script&gt;中间的代码不会执行</code></pre><h3 id="JavaScript基本语法"><a href="#JavaScript基本语法" class="headerlink" title="JavaScript基本语法"></a>JavaScript基本语法</h3><h4 id="js的原始类型和声明变量"><a href="#js的原始类型和声明变量" class="headerlink" title="js的原始类型和声明变量"></a>js的原始类型和声明变量</h4><pre><code>1. string：字符串    var str=&quot;abc&quot;;2. number：数字类型    var m = 123;3. boolean：数字类型    var flag=true;4. null:对象引用为空5. undifined：定义了一个变量，但是这个变量没有赋值    var aa；用typeof（变量名）；查看当前变量的数据类型</code></pre><h4 id="js的语句"><a href="#js的语句" class="headerlink" title="js的语句"></a>js的语句</h4><pre><code>1.判断语句：     1. if语句    if(a == 5){        alert(&quot;5&quot;);    }else{        alert(&quot;不是5&quot;)        }    2. switch语句（支持所有的数据类型）    switch(变量){        case 5:操作;break;        case 6:操作;break;        case 7:操作;breal;        default:操作;break;    }2. 循环语句    1. for循环        for(var i=0; i&lt;10; i++){            alert(i);        }    2. whilt循环        var i=4;        whilt(i--){            alert(i);        }</code></pre><h4 id="js的运算符"><a href="#js的运算符" class="headerlink" title="js的运算符"></a>js的运算符</h4><pre><code>1. -2. +3. *4. /5. &amp;6. ++7. --8. +=9. -=</code></pre><h5 id="字符串加减"><a href="#字符串加减" class="headerlink" title="字符串加减"></a>字符串加减</h5><pre><code>j=123alert(j/1000*1000)java中输出的 0； 但是JavaScript中输出的 123；js中不区分整形浮型点var str = &quot;457&quot;alert(str+1);Java和JavaScript中输出的都是4571; 加法做的是字符串相见alert(str-1);JavaScript输出的是 456，即进行了减法运算alert(&quot;abc&quot;-1);JavaScript输出NAN，提示错误，不是一个数字。 </code></pre><h5 id="Boolean的操作"><a href="#Boolean的操作" class="headerlink" title="Boolean的操作"></a>Boolean的操作</h5><pre><code>var flag=true;alert(flag+1);JavaScript中输出的是 2。也就是说 true = 1；反之，flase = 0。</code></pre><h5 id="和-的区别"><a href="#和-的区别" class="headerlink" title="=== 和 == 的区别"></a>=== 和 == 的区别</h5><pre><code>JavaScript中， == 用于判断两个参数的值是否相等 === 用于判断两个参数 类型和值是否都相等    例如：        var x = &quot;5&quot;, y = 5;        x == y 则为 true        x === y 则为false</code></pre><h4 id="引入知识"><a href="#引入知识" class="headerlink" title="引入知识"></a>引入知识</h4><pre><code>直接向页面输出的语句（可以直接把内容显示在页面上）document.write(&quot;aaa&quot;);document.write(&quot;&lt;hr /&gt;&quot;);可以直接写入数据，也可以写入html代码，当然也可以混合都写</code></pre><h3 id="js的数组"><a href="#js的数组" class="headerlink" title="js的数组"></a>js的数组</h3><pre><code>js数组中，写什么都可以,可以是数据的混合，可以同时包括int，string或者其他类型</code></pre><h4 id="定义数组的三种方式"><a href="#定义数组的三种方式" class="headerlink" title="定义数组的三种方式"></a>定义数组的三种方式</h4><pre><code>1. var arr=[1,2,&quot;34&quot;];2. 使用内置的对象 Array对象    var arr = new Array(5);//定义一个数组，数组长度是53. 使用内置对象 Array对象    var arr2 = new Array(3,4,5);//定义一个数组，数组里面的元素为 3，4，5</code></pre><h4 id="数组的属性"><a href="#数组的属性" class="headerlink" title="数组的属性"></a>数组的属性</h4><pre><code>length：表示数组的长度    var len = arr.length;数组的长度是可以变的数组可以存放不同的数据类型的数据</code></pre><h3 id="js的函数"><a href="#js的函数" class="headerlink" title="js的函数"></a>js的函数</h3><h4 id="在js里面定义函数有三种定义方式"><a href="#在js里面定义函数有三种定义方式" class="headerlink" title="在js里面定义函数有三种定义方式"></a>在js里面定义函数有三种定义方式</h4><pre><code>1. 关键字：function    funciton 方法名（参数列表）{        方法体；        返回值；（返回值可有可无）    }2. 匿名函数：function    var func = funtion （参数列表）{        方法体和返回值；    }    调用直接  func();3. 内部对象：Function（用的少，了解就行）`动态函数`    var func = new Function(&quot;参数列表&quot;，“方法体和返回值”);    var test = new Function(&quot;x,y&quot;,&quot;var sum;sum=x+y;return sum;&quot;);</code></pre><h3 id="js的全局变量和局部变量"><a href="#js的全局变量和局部变量" class="headerlink" title="js的全局变量和局部变量"></a>js的全局变量和局部变量</h3><h4 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h4><pre><code>在script标签内部顶一个变量，这个变量在页面中js部分都可以使用</code></pre><h4 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h4><pre><code>在方法内部定义一个变量，只能在方法内部使用</code></pre><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><pre><code>全局变量：    &lt;script&gt;        var a = 10;        function func(){            alert(a);        }        func();    &lt;/script&gt;    &lt;script&gt;        alert(a);    &lt;/script&gt;    可以跨script标签使用的变量。称之为全局变量局部变量：    &lt;script&gt;        function func(){            var a = 10;            alert(a);        }        func();        alert(a);//报错    &lt;/script&gt;    局部变量只能在方法内部使用</code></pre><h3 id="script应该放的位置"><a href="#script应该放的位置" class="headerlink" title="script应该放的位置"></a>script应该放的位置</h3><h4 id="位置差别"><a href="#位置差别" class="headerlink" title="位置差别"></a>位置差别</h4><pre><code>&lt;script&gt;原则上放任意位置都可以执行，但是还是要注意位置html文档是从上到下解析的，如果用js去获得html的标签，一定要在获取标签的后面，不然会得到一个 null 的变量，导致错误。</code></pre><h4 id="建议"><a href="#建议" class="headerlink" title="建议"></a>建议</h4><pre><code>把script标签放到&lt;/body&gt;后面，&lt;/html&gt;前面</code></pre><h4 id="js的重载"><a href="#js的重载" class="headerlink" title="js的重载"></a>js的重载</h4><pre><code>function add1(a, b){ return a+b }function add1(a, b, c){ return a+b+c }function add1(a, b, c, d){ return a+b+c+d }add1(2,3)    add(2,2,3)    add(2,2,3,3)第一个得出结果NAN，第二个得出结果NAN，第三个得出正确结果</code></pre><h5 id="为什么呢？"><a href="#为什么呢？" class="headerlink" title="为什么呢？"></a>为什么呢？</h5><h3 id="JavaScript基础DOM"><a href="#JavaScript基础DOM" class="headerlink" title="JavaScript基础DOM"></a>JavaScript基础DOM</h3><h4 id="js的String对象"><a href="#js的String对象" class="headerlink" title="js的String对象"></a>js的String对象</h4><h5 id="方法属性"><a href="#方法属性" class="headerlink" title="方法属性"></a>方法属性</h5><h6 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h6><pre><code>只有一个需要注意：length  字符串的长度</code></pre><h6 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h6><p>####### 与html相关的方法<br>    设置数据样式的方法</p><pre><code>1. bold() 使用粗体显示字符串  document.write(str.bold());2. fontcolor() 使用指定的颜色来显示字符串  document.write(str.fontcolor(&quot;red&quot;));3. fontsize() 使用指定的尺寸来显示字符串  document.wirte(str.fontsize(1));//参数值为1~74. link() 将字符串显示为链接  document.write(str.link(www.baidu.com));//即字符串成为一个超链接5. big() 用大号字体显示字符串  document.write(str.big());6. blink() 显示闪动字符串  document.write(str.blink());7. sup() 把字符串显示为上标  8. sub() 把字符串显示为下标  9. small() 使用小字号来显示字符串 10. strike() 使用删除线来显示字符串  </code></pre><p>####### 与Java相似的方法<br>    对数据进行操作的方法</p><pre><code>1. split() 把字符串分割为字符串数组  2. charAt() 返回在指定位置的字符  str.cjarAt(1);3. concat() 连接字符串  str.concat(str2);4. indexOf() 检索字符串  str.indexof(&quot;as&quot;);//不存在返回-15. charCodeAt() 返回在指定的位置的字符的 Unicode 编码   6. fixed() 以打字机文本显示字符串  7. fromCharCode() 从字符编码创建一个字符串  8. italics() 使用斜体显示字符串  9. lastIndexOf() 从后向前搜索字符串  10. localeCompare() 用本地特定的顺序来比较两个字符串  11. match() 找到一个或多个正则表达式的匹配  12. replace() 替换与正则表达式匹配的子串  str.replace(&quot;a&quot;, &quot;c&quot;);//把a替换成c13. search() 检索与正则表达式相匹配的值  14. slice() 提取字符串的片断，并在新的字符串中返回被提取的部分   15. substr() 从起始索引号提取字符串中指定数目的字符  str.substr(start, length);截取从start开始长度为length的字符串16. substring() 提取字符串中两个指定的索引号之间的字符  str.substring(start, end);截取从start开始 end 截至的字符串17. toLocaleLowerCase() 把字符串转换为小写  18. toLocaleUpperCase() 把字符串转换为大写  19. toLowerCase() 把字符串转换为小写  20. toUpperCase() 把字符串转换为大写  21.    toSource() 代表对象的源代码  22. toString() 返回字符串   23. valueOf() 返回某个字符串对象的原始值  </code></pre><h3 id="js的Date对象"><a href="#js的Date对象" class="headerlink" title="js的Date对象"></a>js的Date对象</h3><pre><code>js获取当前事件    var date = new Date();</code></pre><h4 id="Date对象的方法"><a href="#Date对象的方法" class="headerlink" title="Date对象的方法"></a>Date对象的方法</h4><pre><code>1. toLocaleString() 根据本地时间格式，把 Date 对象转换为字符串 date.toLocaleString();2. toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串3. toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串4. setFullYear() 设置 Date 对象中的年份（四位数字）5. setMonth() 设置 Date 对象中月份 (0 ~ 11) 注意是 0~11，而不是1~12 ！！！！6. setHours() 设置 Date 对象中的小时 (0 ~ 23)7. setMinutes() 设置 Date 对象中的分钟 (0 ~ 59)8. setSeconds() 设置 Date 对象中的秒钟 (0 ~ 59)9. setMilliseconds() 设置 Date 对象中的毫秒 (0 ~ 999)10. getFullYear() 从 Date 对象以四位数字返回年份11. getMonth() 返回 Date 对象的月份 (0~11)  setMonth() 设置 Date 对象中月份 (0 ~ 11)。 12. getHours() 返回 Date 对象的小时 (0 ~ 23)13. getMinutes() 返回 Date 对象的分钟 (0 ~ 59) 14. getSeconds() 返回 Date 对象的秒数 (0 ~ 59)15. getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)16. getTime() 返回 1970 年 1 月 1 日至今的毫秒数。 </code></pre><h3 id="js的Math对象"><a href="#js的Math对象" class="headerlink" title="js的Math对象"></a>js的Math对象</h3><pre><code>全都是静态方法，调用函数时直接    Math.方法名（参数）</code></pre><h4 id="Math对象的方法"><a href="#Math对象的方法" class="headerlink" title="Math对象的方法"></a>Math对象的方法</h4><pre><code>1. abs(x) 返回数的绝对值2. acos(x) 返回数的反余弦值3. asin(x) 返回数的反正弦值4. atan(x) 以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值5. atan2(y,x) 返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）6. ceil(x) 对数进行上舍入7. cos(x) 返回数的余弦8. exp(x) 返回 e 的指数9. floor(x) 对数进行下舍入10. log(x) 返回数的自然对数（底为e）11. max(x,y) 返回 x 和 y 中的最高值12. min(x,y) 返回 x 和 y 中的最低值13. pow(x,y) 返回 x 的 y 次幂14. random() 返回 0 ~ 1 之间的随机数15. round(x) 把数四舍五入为最接近的整数 16. sin(x) 返回数的正弦17. sqrt(x) 返回数的平方根18. tan(x) 返回角的正切19. toSource() 返回该对象的源代码20. valueOf() 返回 Math 对象的原始值 </code></pre><h4 id="Math对象的属性"><a href="#Math对象的属性" class="headerlink" title="Math对象的属性"></a>Math对象的属性</h4><pre><code>1. E 返回算术常量 e，即自然对数的底数（约等于2.718）2. LN2 返回 2 的自然对数（约等于0.693）3. LN10 返回 10 的自然对数（约等于2.302）4. LOG2E 返回以 2 为底的 e 的对数（约等于 1.414）5. LOG10E 返回以 10 为底的 e 的对数（约等于0.434）6. PI 返回圆周率（约等于3.14159）7. SQRT1_2 返回返回 2 的平方根的倒数（约等于 0.707）8. SQRT2 返回 2 的平方根（约等于 1.414）</code></pre><h3 id="js的全局函数"><a href="#js的全局函数" class="headerlink" title="js的全局函数"></a>js的全局函数</h3><pre><code>由于不属于任何一个对象，直接名称使用1. decodeURI()    解码某个编码的URI2. decodeURIComponent()        解码一个编码的URI组件3. encodeURI()    把字符串编码为URI4. encodeURIComponent()        把字符串编码为URI组件5. escape()        对字符串进行编码6. eval()        计算JavaScript字符串，并把它作为脚本代码来执行7. getClass()    返回一个javaObject的JavaClass8. isFinite()    检查某个值是否为有穷大的数9. isNaN（）        检查某个值是否是数字10. parseFloat()    解析一个字符串并返回一个浮点数11. parseInt()        解析一个字符串并返回一个整数12. unescape()        对由escape()编码的字符串进行解码</code></pre><h2 id="js函数的重载"><a href="#js函数的重载" class="headerlink" title="js函数的重载"></a>js函数的重载</h2><h3 id="js的重载是否存在？"><a href="#js的重载是否存在？" class="headerlink" title="js的重载是否存在？"></a>js的重载是否存在？</h3><pre><code>不存在重载。函数名相同的以后定义的为准。也就是说方法名相同的情况下，后定义的会覆盖掉先定义的方法。</code></pre><h3 id="js可以通过其他的方式去模拟重载"><a href="#js可以通过其他的方式去模拟重载" class="headerlink" title="js可以通过其他的方式去模拟重载"></a>js可以通过其他的方式去模拟重载</h3><pre><code>在js的函数中，传入的参数列表，可以通过一个js自带的 aruguments[]数组去访问传入的参数。例如：    function add(a, b, c){        arguments[0] == a;        arguments[1] == b;        arguments[2] == c;    }js的函数你可以传入多个参数，例如 add(1,2,3,4,5,6)，虽然定义的 add函数只有三个参数，但是通过arguments可以获得 传入的所有参数 1,2,3,4,5,6 只是 a=1,b=2,c=3 罢了通过arguments.length 判断传入参数大小，以此来手动进行重载</code></pre><h2 id="js的bom对象"><a href="#js的bom对象" class="headerlink" title="js的bom对象"></a>js的bom对象</h2><pre><code>bom：broswer object model 浏览器对象模型通过bom对象，可以直接对浏览器进行操作。</code></pre><h3 id="有哪些对象"><a href="#有哪些对象" class="headerlink" title="有哪些对象"></a>有哪些对象</h3><h4 id="navigator"><a href="#navigator" class="headerlink" title="navigator"></a>navigator</h4><pre><code>Navigator 对象包含有关浏览器的信息。</code></pre><h5 id="对象属性"><a href="#对象属性" class="headerlink" title="对象属性"></a>对象属性</h5><pre><code>1. appCodeName 返回浏览器的代码名 2. appMinorVersion 返回浏览器的次级版本3. appName 返回浏览器的名称    alert(navigator.appName);4. appVersion 返回浏览器的平台和版本信息5. browserLanguage 返回当前浏览器的语言6. cookieEnabled 返回指明浏览器中是否启用 cookie 的布尔值7. cpuClass 返回浏览器系统的 CPU 等级8. onLine 返回指明系统是否处于脱机模式的布尔值9. platform 返回运行浏览器的操作系统平台10. systemLanguage 返回 OS 使用的默认语言11. userAgent 返回由客户机发送服务器的 user-agent 头部的值12. userLanguage 返回 OS 的自然语言设置 </code></pre><h5 id="对象方法"><a href="#对象方法" class="headerlink" title="对象方法"></a>对象方法</h5><pre><code>1. javaEnabled() 规定浏览器是否启用 Java2. taintEnabled() 规定浏览器是否启用数据污点 (data tainting)</code></pre><h4 id="screen（屏幕对象）"><a href="#screen（屏幕对象）" class="headerlink" title="screen（屏幕对象）"></a>screen（屏幕对象）</h4><pre><code>Screen 对象包含有关客户端显示屏幕的信息。</code></pre><h5 id="对象属性-1"><a href="#对象属性-1" class="headerlink" title="对象属性"></a>对象属性</h5><pre><code>1. availHeight 返回显示屏幕的高度 (除 Windows 任务栏之外)2. availWidth 返回显示屏幕的宽度 (除 Windows 任务栏之外)3. bufferDepth 设置或返回调色板的比特深度4. colorDepth 返回目标设备或缓冲器上的调色板的比特深度5. deviceXDPI 返回显示屏幕的每英寸水平点数6. deviceYDPI 返回显示屏幕的每英寸垂直点数7. fontSmoothingEnabled 返回用户是否在显示控制面板中启用了字体平滑 8. height 返回显示屏幕的高度9. logicalXDPI 返回显示屏幕每英寸的水平方向的常规点数10. logicalYDPI 返回显示屏幕每英寸的垂直方向的常规点数11. pixelDepth 返回显示屏幕的颜色分辨率（比特每像素）9 12. updateInterval 设置或返回屏幕的刷新率13. width 返回显示器屏幕的宽度。 </code></pre><h4 id="location"><a href="#location" class="headerlink" title="location"></a>location</h4><pre><code>对象包含有关当前 URL 的信息。</code></pre><h5 id="对象属性-2"><a href="#对象属性-2" class="headerlink" title="对象属性"></a>对象属性</h5><pre><code>1. ash 设置或返回从井号 (#) 开始的 URL（锚）2. host 设置或返回主机名和当前 URL 的端口号3. hostname 设置或返回当前 URL 的主机名4. href 设置或返回完整的 URL`(重点)`     1. location.href;//得到当前请求的url地址。    2. location.href=&quot;你要跳转的地址,例如：www.baidu.com&quot;这样就会跳转页面5. pathname 设置或返回当前 URL 的路径部分6. port 设置或返回当前 URL 的端口号7. protocol 设置或返回当前 URL 的协议8. search 设置或返回从问号 (?) 开始的 URL（查询部分）</code></pre><h5 id="对象方法-1"><a href="#对象方法-1" class="headerlink" title="对象方法"></a>对象方法</h5><pre><code>1. assign() 加载新的文档2. reload() 重新加载当前文档3. replace() 用新的文档替换当前文档。 </code></pre><h4 id="history（历史）"><a href="#history（历史）" class="headerlink" title="history（历史）"></a>history（历史）</h4><pre><code>请求的url的历史记录</code></pre><h5 id="对象属性-3"><a href="#对象属性-3" class="headerlink" title="对象属性"></a>对象属性</h5><pre><code>1. length 返回浏览器历史列表中的 URL 数量</code></pre><h5 id="对象方法-2"><a href="#对象方法-2" class="headerlink" title="对象方法"></a>对象方法</h5><pre><code>1. back() 加载 history 列表中的前一个 URL  history.back()2. forward() 加载 history 列表中的下一个 URL    history.forward()3. go() 加载 history 列表中的某个具体页面</code></pre><h4 id="window"><a href="#window" class="headerlink" title="window"></a>window</h4><pre><code>Window 对象表示浏览器中打开的窗口。包含location,navicator,history,screen对象它是一个顶层对象</code></pre><h4 id="属性-1"><a href="#属性-1" class="headerlink" title="属性"></a>属性</h4><pre><code>opener 获得创建窗口的窗口 即用a.html打开b.html，在b.html中通过window.opener获得a.html的窗口对象</code></pre><h5 id="对象方法（都要记住）"><a href="#对象方法（都要记住）" class="headerlink" title="对象方法（都要记住）"></a>对象方法（都要记住）</h5><pre><code>1. alert() 显示带有一段消息和一个确认按钮的警告框2. blur() 把键盘焦点从顶层窗口移开3. clearInterval() 取消由 setInterval() 设置的 timeout     1. window.clearInterval(id);    2. id为 setInterval()返回的id值4. clearTimeout() 取消由 setTimeout() 方法设置的 timeout    1. window.clearTimeout(id);    2. id为 setTimeout()返回的id值5. close() 关闭浏览器窗口    1. windown.close();    2. 浏览器兼容性差6. confirm() 显示带有一段消息以及确认按钮和取消按钮的对话框    1. window.confirm(&quot;传入的消息&quot;)    2. 返回一个Boolean类型值。确定为ture，取消为false7. createPopup() 创建一个 pop-up 窗口8. focus() 把键盘焦点给予一个窗口 9. moveBy() 可相对窗口的当前坐标把它移动指定的像素10. moveTo() 把窗口的左上角移动到一个指定的坐标11. open() 打开一个新的浏览器窗口或查找一个已命名的窗口     1. window.open(URL, name, features, replace);    2. url 要打开页面的url  name 自己定,可以不要 features 窗口特征 宽高    3. window.open(&quot;www.baodu.com&quot;,&quot;&quot;,&quot;width=200,height=200&quot;);12. print() 打印当前窗口的内容 13. prompt() 显示可提示用户输入的对话框    1. window.prompt(&quot;提示输入的值&quot;,&quot;默认的文本框的内容&quot;)；    2. 现在用的少，因为不好看，还不能改样式表14. resizeBy() 按照指定的像素调整窗口的大小15. resizeTo() 把窗口的大小调整到指定的宽度和高度 16. scrollBy() 按照指定的像素值来滚动内容17. scrollTo() 把内容滚动到指定的坐标 18. setInterval() 按照指定的周期（以毫秒计）来调用函数或计算表达式     1. 一般用来做定时器,有一个返回值ID，代表这个定时器    2. window.setInterval(&quot;js代码&quot;,毫秒数);    3. 1s = 1000ms    4. 例如：window.setInterval(&quot;alert(&apos;123&apos;);&quot;, 3000);19. setTimeout() 在指定的毫秒数后调用函数或计算表达式    1. 一般用来做定时器，但是只会执行一次。返回一个ID值，代表这个定时器    2. 例如：window.setTimeout(&quot;alert(&apos;123&apos;);&quot;, 4000);</code></pre><h2 id="js的dom对象"><a href="#js的dom对象" class="headerlink" title="js的dom对象"></a>js的dom对象</h2><h3 id="什么是dom"><a href="#什么是dom" class="headerlink" title="什么是dom"></a>什么是dom</h3><pre><code>dom：document object model：文档对象模型文档：超文本标记文档：html，xml对象：提供了属性和方法模型：使用属性和方法操作超文本标记型文档可以使用js里面的dom里面提供的对象，使用这些对象的属性和方法，对标记型文档进行操作想要对标记型文档进行操作，首先需要 对标记型文档里面的所有内容封装成对象，需要把HTML里面的标签，属性，文本内容都封装成对象要想对标记型文档进行操作，解析标记型文档</code></pre><h3 id="解析过程"><a href="#解析过程" class="headerlink" title="解析过程"></a>解析过程</h3><pre><code>根据html的层级结构，在内存中分配一个属性结构，需要把html中的每部分封装成对象</code></pre><p><img src="https://i.imgur.com/T6dN6Cg.png" alt=""></p><pre><code>1. 上图中，整个蓝色框住的可以当成一个document对象，表示整个HTML文档2. 同时一个标签/元素也是一个对象，我们成为标签对象 element3. 属性对象（id属性之类的）4. 文本对象（标签括起来的数据）5. Node（节点）对象是属性，文本，标签对象的父对象</code></pre><h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><pre><code>nodeName    String        节点的名字：根据节点的类型定义nodeValue    String        节点的值：根据节点的类型而定义nodeType    Number        节点的类型常量值之一ownerDocument    Document    指向整个节点所属的文档firstChild    Node        指向在childNodes列表中的第一个节点lastChild    Node        指向在childNodes列表中的最后一个节点childNodes    NodeList    所有子节点的列表parentNode    Node        返回一个给定节点的父亲节点previousSibling    Node    指向前一个兄弟节点：如果这个节点就是第一个兄弟节点，那么值为nullnextSibling    Node        指向后一个兄弟节点hasChildNodes()    Boolean    当childNodes包含一个或多个节点时，返回真attributes    NameNodeMap    包含了代表一个元素的特性的Attr对象，仅用于Element节点appendChild(node)    Node    将node添加到childNodes的末尾removeChild(node)    Node    从childNodes中删除nodereplaceChild(newnode, node)    Node    替换insertBefore(newnode, refnode)    Node    在ChildNodes中的refnode之前插入newnode</code></pre><h3 id="DHTML"><a href="#DHTML" class="headerlink" title="DHTML"></a>DHTML</h3><pre><code>DHTML是很多技术的简称DHTML=html+css+dom+javascripthtml：封装数据css：使用属性和属性值设置样式dom：操作html文档JavaScript：专门指的是js的语法语句</code></pre><h3 id="document对象"><a href="#document对象" class="headerlink" title="document对象"></a>document对象</h3><pre><code>每个载入浏览器的HTML文档都会成为document对象</code></pre><h4 id="属性-2"><a href="#属性-2" class="headerlink" title="属性"></a>属性</h4><pre><code>1. cookie 设置或返回与当前文档有关的所有 cookie2. domain 返回当前文档的域名3. lastModified 返回文档被最后修改的日期和时间4. referrer 返回载入当前文档的文档的 URL5. title 返回当前文档的标题6. URL 返回当前文档的 URL</code></pre><h4 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h4><pre><code>1. close() 关闭用 document.open() 方法打开的输出流，并显示选定的数据2. getElementById() 返回对拥有指定 id 的第一个对象的引用3. getElementsByName() 返回带有指定名称的对象集合4. getElementsByTagName() 返回带有指定标签名的对象集合5. open() 打开一个流，以收集来自任何 document.write() 或 document.writeln() 方法的输出6. write() 向文档写 HTML 表达式 或 JavaScript 代码7. writeln() 等同于 write() 方法，不同的是在每个表达式之后写一个换行符</code></pre><h3 id="案例：在末尾添加节点"><a href="#案例：在末尾添加节点" class="headerlink" title="案例：在末尾添加节点"></a>案例：在末尾添加节点</h3><pre><code>&lt;ul id=&quot;ulid&quot;&gt;    &lt;li&gt;111&lt;/li&gt;    &lt;li&gt;222&lt;/li&gt;    &lt;li&gt;333&lt;/li&gt;    &lt;li&gt;444&lt;/li&gt;&lt;/ul&gt;&lt;input type=&quot;button&quot; value=&quot;add&quot; onclick=&quot;add1();&quot; /&gt;&lt;script&gt;    //任务是，点击按钮，添加一行 555 在 444 后面    function add1(){        var ul = document.getElementById(&quot;ulid&quot;);        var text = document.createTextNode(&quot;555&quot;);        var li = document.createElement(&quot;li&quot;);        li.appendChild(text);        ul.appendChild(li);    }&lt;/script&gt;</code></pre><h3 id="元素对象-element对象"><a href="#元素对象-element对象" class="headerlink" title="元素对象-element对象"></a>元素对象-element对象</h3><pre><code>在 HTML DOM 中，Element 对象表示 HTML 元素。Element 对象可以拥有类型为元素节点、文本节点、注释节点的子节点。NodeList 对象表示节点列表，比如 HTML 元素的子节点集合。要操作element对象，首先必须要获取到element，使用document里面对应的方法获取</code></pre><h4 id="操作element对象的属性"><a href="#操作element对象的属性" class="headerlink" title="操作element对象的属性"></a>操作element对象的属性</h4><pre><code>1. 获取属性：getAttribute(name)方法2. 设置属性：setAttribute(name, valure)方法    例如：input1.setAttribute(&quot;class&quot;,&quot;haha&quot;);    这是 input1元素的class为haha3. 删除属性：removeAttribute(name)方法    不能删除value属性</code></pre><h4 id="获得element中的element对象"><a href="#获得element中的element对象" class="headerlink" title="获得element中的element对象"></a>获得element中的element对象</h4><pre><code>&lt;ul id=&quot;ulid&quot;&gt;    &lt;li&gt;111&lt;/li&gt;    &lt;li&gt;222&lt;/li&gt;    &lt;li&gt;333&lt;/li&gt;    &lt;li&gt;444&lt;/li&gt;&lt;/ul&gt;&lt;script type=&quot;text/javascript&quot;&gt;    var ull = document.getElementById(&quot;ulid&quot;);    var lis = ull.childNodes;    alert(lis.length);&lt;/script&gt;</code></pre><p><code>上面的代码在IE中输出4， 在火狐中输出9</code>  </p><pre><code>因为火狐把 回车 空格 也算作数据了</code></pre><p><code>所以直接通过childNodes直接获得准确的子类是不现实的</code></p><pre><code>在Element对象的范围内，可以用来查找其他节点的唯一有效方法就是getElementsByTagName()方法。上面的例子中，直接通过 ull.getElementsByTagName(&quot;li&quot;)获得子Element对象就行了。</code></pre><h3 id="Node对象"><a href="#Node对象" class="headerlink" title="Node对象"></a>Node对象</h3><h4 id="属性-3"><a href="#属性-3" class="headerlink" title="属性"></a>属性</h4><pre><code>1. nodeName        节点名称2. nodeType        节点类型3. nodeValue    节点的值</code></pre><h5 id="标签节点对应的值"><a href="#标签节点对应的值" class="headerlink" title="标签节点对应的值"></a>标签节点对应的值</h5><pre><code>nodeType    1nodeName    大写的标签名称 nodeValue    null</code></pre><h5 id="属性节点对应的值"><a href="#属性节点对应的值" class="headerlink" title="属性节点对应的值"></a>属性节点对应的值</h5><pre><code>获取方法 getAttributeNode(&quot;属性名称&quot;);nodeType    2nodeName    属性名称nodeValue    属性的值</code></pre><h5 id="文本节点对应的值"><a href="#文本节点对应的值" class="headerlink" title="文本节点对应的值"></a>文本节点对应的值</h5><pre><code>获取方法 element.firstChild 或者 lastChildnodeType    3nodeName    #textnodeValue    文本内容</code></pre><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><pre><code>使用dom解析html的时候，需要html里面的标签，属性和文本都封装成对象&lt;span id=&quot;spanid&quot;&gt;呵呵呵&lt;/span&gt;&lt;script&gt;    //标签节点    var span1 = document.getElementById(&quot;spanid&quot;);    alert(span1.nodeType);    //输出    1    alert(Span1.nodeName);    //输出    SPAN    alert(span1.nodeValue);    //输出    null    //属性节点    var id1 = span1.getAttributeNode(&quot;id&quot;);    alert(id1.nodeType);    //输出    2    alert(id1.nodeName);    //输出    id    alert(id1.nodeValue);    //输出    spanid    //文本节点    var text = span1.firstChild;    alert(text.nodeType);    //输出    3    alert(text.nodeName);    //输出    #text    alert(text.nodeValue);    //输出    呵呵呵&lt;/script&gt;</code></pre><h3 id="父节点，子节点，同辈节点"><a href="#父节点，子节点，同辈节点" class="headerlink" title="父节点，子节点，同辈节点"></a>父节点，子节点，同辈节点</h3><pre><code>&lt;ul id=&quot;ulid&quot;&gt;    &lt;li&gt;111&lt;/li&gt;    &lt;li&gt;222&lt;/li&gt;    &lt;li&gt;333&lt;/li&gt;    &lt;li&gt;444&lt;/li&gt;&lt;/ul&gt;ul 是 li 的父节点， li 是 ul 的子节点li 与 li 是 同辈节点，因为他们是同一级</code></pre><h4 id="父节点"><a href="#父节点" class="headerlink" title="父节点"></a>父节点</h4><pre><code>parentNode</code></pre><h4 id="子节点"><a href="#子节点" class="headerlink" title="子节点"></a>子节点</h4><pre><code>childNodes的到所有的子节点，但是兼容性查firstChild    第一个子节点lastChild    最后一个子节点</code></pre><h4 id="同辈节点"><a href="#同辈节点" class="headerlink" title="同辈节点"></a>同辈节点</h4><pre><code>nextSibling        下一个子节点previousSibling    前一个子节点</code></pre><h3 id="操作DOM树"><a href="#操作DOM树" class="headerlink" title="操作DOM树"></a>操作DOM树</h3><h4 id="appendChild方法"><a href="#appendChild方法" class="headerlink" title="appendChild方法"></a>appendChild方法</h4><pre><code>添加子节点到末尾特点：类似于剪切粘贴的效果</code></pre><h5 id="例子-1"><a href="#例子-1" class="headerlink" title="例子"></a>例子</h5><h6 id="CSS内容"><a href="#CSS内容" class="headerlink" title="CSS内容"></a>CSS内容</h6><pre><code>#div1{    width:200px;    height:150px;    border:2px solid red;}#div2{    width:250px;    height:150px;    border: 5px dashed green;}</code></pre><h6 id="HTML内容"><a href="#HTML内容" class="headerlink" title="HTML内容"></a>HTML内容</h6><pre><code>&lt;div id=&quot;div1&quot;&gt;    &lt;ul id=&quot;ulidll&quot;&gt;        &lt;li&gt;123&lt;/li&gt;        &lt;li&gt;456&lt;/li&gt;        &lt;li&gt;789&lt;/li&gt;    &lt;/ul&gt;&lt;/div&gt;&lt;div id=&quot;div2&quot;&gt;&lt;/div&gt;&lt;input type=&quot;button&quot; value=&quot;add&quot; onclick=&quot;add1()&quot; /&gt;</code></pre><h6 id="js内容"><a href="#js内容" class="headerlink" title="js内容"></a>js内容</h6><pre><code>function add1(){    var div2 = document.getElementById(&quot;div2&quot;);    var ull = document.getElementById(&quot;ulidll&quot;);    div2.appendChild(ull);}通过结果可以看到，ul 的内容 从 div1 移动到 div2 中。</code></pre><h4 id="insertBefore-newnode-oldNode-方法"><a href="#insertBefore-newnode-oldNode-方法" class="headerlink" title="insertBefore(newnode, oldNode)方法"></a>insertBefore(newnode, oldNode)方法</h4><pre><code>在oldnode节点之前插入一个新的节点1. 创建标签    li2 = document.createElement(&quot;li&quot;);2. 创建文本    text = document.createTextNode(&quot;啦啦啦啦&quot;);3. 把文本添加到标签下    li2.appendChild(text);4. 获取 oldNode    var li3=document.getElementById(&quot;li3&quot;);5. 插入    var ul = document.getElementById(&quot;ul1&quot;);//获得父节点    ul.insertBefore(li2, li3);</code></pre><h4 id="removeChilid-删除节点"><a href="#removeChilid-删除节点" class="headerlink" title="removeChilid 删除节点"></a>removeChilid 删除节点</h4><pre><code>只能通过父节点删除，不能自己删自己1. 获取要删除标签    var li3 = document.getElementById(&quot;li3&quot;);2. 获取父节点    var par = document.getElementById(&quot;ul&quot;);3. 删除    par.removeChild(li3);</code></pre><h4 id="replaceChild-newnode-oldnode-替换节点"><a href="#replaceChild-newnode-oldnode-替换节点" class="headerlink" title="replaceChild(newnode, oldnode)替换节点"></a>replaceChild(newnode, oldnode)替换节点</h4><pre><code>只能通过父节点进行替换，不能自己替换自己1. 创建新节点    var li = document.createElement(&quot;li&quot;);    var text = document.createTextNode(&quot;文本内容&quot;);    li.appenChild(text);2. 获取旧节点    var oldli = document.getElementById(&quot;oldli&quot;);3. 获取父标签    var ul = document.getElementById(&quot;ul&quot;);4. 替换标签    ul.replaceChild(li, oldli);</code></pre><h4 id="cloneNode-boolean-复制节点"><a href="#cloneNode-boolean-复制节点" class="headerlink" title="cloneNode(boolean) 复制节点"></a>cloneNode(boolean) 复制节点</h4><pre><code>//复制ul列表到另一个div中1. 获取ul    var ul = document.getElementById(&quot;ul&quot;);2. 复制ul，放到类似于剪切板里面    var copyul = ul.cloneNode(true);3. 获取新的div    var newdiv = document.getElementById(&quot;newdiv&quot;);4. 复制进去    newdiv.appendChild(copyul);            因为 copyul 是复制的新的，所以appendChild的剪贴方法并不会删除掉原 ul</code></pre><h3 id="innerHTML属性"><a href="#innerHTML属性" class="headerlink" title="innerHTML属性"></a>innerHTML属性</h3><pre><code>1. 浏览器几乎都支持该属性，但不是DOM标准的组成部分2. innerHTML属性可以用来读某给定元素里的HTML内容    var span1 = document.getElementById(&quot;span1&quot;);    alert(span1.innerHTML);//获取文本内容3. innerHTML属性可以用来写给定元素里的html内容    var div1 = document.getElementById(&quot;div1&quot;);    div1.innerHTML += &quot;&lt;h1&gt;AAA&lt;/h1&gt;&quot;;</code></pre><h3 id="案例：动态显示时间"><a href="#案例：动态显示时间" class="headerlink" title="案例：动态显示时间"></a>案例：动态显示时间</h3><pre><code>1. 获取当前时间：    var date = new Date();    date = date.toLocaleString();2. 需要让页每秒执行    setInterval()方法3. 用一个&lt;span&gt;来承接时间    function gettime(){        var date = new Date();        date = date.toLocaleString();        var div = document.getElementsById(&quot;time&quot;);        div.innerHtml = date;     }    //使用定时器，每秒写一次    setInterval(&quot;gettime();&quot;, 1000);</code></pre><h3 id="案例：一键全选"><a href="#案例：一键全选" class="headerlink" title="案例：一键全选"></a>案例：一键全选</h3><pre><code>&lt;input type=&quot;checkbox&quot; name=&quot;lova&quot; /&gt;    排球&lt;input type=&quot;checkbox&quot; name=&quot;lova&quot; /&gt;    篮球&lt;input type=&quot;checkbox&quot; name=&quot;lova&quot; /&gt;    足球&lt;input type=&quot;checkbox&quot; name=&quot;lova&quot; /&gt;    羽毛球&lt;input type=&quot;button&quot; value=&quot;全选&quot; onclick=&quot;setall();&quot;/&gt;&lt;input type=&quot;button&quot; value=&quot;全不选&quot; onclick=&quot;setNo();&quot;/&gt;&lt;script&gt;    // 复选框中 的 chexked = true 即为选中，反之为没选中    function setall(){        //获取复选框        var loves = document.getElementsByName(&quot;love&quot;);        //遍历 loves 数组，整体修改值        for(var i=0; i&lt;loves.length; i++)        {            var love1 = loves[i];            love1.checked = true;        }    }&lt;/script&gt;</code></pre><h3 id="案例：省市联动"><a href="#案例：省市联动" class="headerlink" title="案例：省市联动"></a>案例：省市联动</h3><pre><code>选择 湖北省的时候，只会显示湖北省的市，选择湖南省的时候，只会显示湖南省的市&lt;select id=&quot;sheng&quot; onchange=&quot;add1();&quot;&gt;    &lt;option&gt;湖北省&lt;/option&gt;    &lt;option&gt;湖南省&lt;/option&gt;    &lt;option&gt;山西省&lt;/option&gt;    &lt;option&gt;江西省&lt;/option&gt;&lt;/select&gt;&lt;select id=&quot;shi&quot;&gt;&lt;/select&gt;// onchange 是 当 select 改变的时候执行的操作&lt;script&gt;    //通过数据库，可以获得每个省份，有哪些城市    var arr = [];//arr存的读取的城市    var select = document.getElementById(&quot;shi&quot;);    //一定要先清空 select，否则第二次选择会进行二次添加    var chils = select.getElementsByTagName(&quot;option&quot;);    for(var i=child.length-1; i&gt;=0; i--){        var op = option[i];        select.removeChild(op);    }    for(int i=0; i&lt;arr.length; i++){        var opt = document.createElement(&quot;option&quot;);        var text = document.createTextNode(arr[i]);        opt.appendChild(text);        select.appendChild(opt);    }&lt;/script&gt;</code></pre><h2 id="XML文档"><a href="#XML文档" class="headerlink" title="XML文档"></a>XML文档</h2><h3 id="什么是xml"><a href="#什么是xml" class="headerlink" title="什么是xml"></a>什么是xml</h3><pre><code>eXtensible Markup Language：可扩展标记型语言1. 标记型语言：html也是标记型语言，通过使用标签来操作2. 可扩展：html里面每个标签都是固定的，有特定的含义。xml中，标签可以自定义，也可以是中文的标签3. xml技术是W3C组织发部分，目前遵循的是2000发布的XML1.0规范</code></pre><h3 id="xml的用途"><a href="#xml的用途" class="headerlink" title="xml的用途"></a>xml的用途</h3><pre><code>html用于显示数据，xml也可以用来显示数据，但是更主要的功能和目的是同来存储数据。1. 用于不同系统之间传输数据    1. 如果数据直接用 字符串 传输，接收方并不能解析数据         例如：&quot;120.0.0.1;2018.10.01;hello world&quot;发送方知道这是 &quot;ip地址，时间，内容&quot;，但是接收方并不知道    2.  &lt;message&gt;            &lt;ip&gt;120.0.0.1&lt;/ip&gt;            &lt;time&gt;2018.10.01&lt;time&gt;            &lt;content&gt;hello world&lt;/content&gt;        &lt;/message&gt;    3. 这样写接收方能懂，并且可以扩展更多标签在&lt;message&gt;中2. 同来表示生活中有关系的数据    例如：    &lt;中国&gt;        &lt;湖北&gt;            &lt;武汉&gt;&lt;/武汉&gt;                &lt;荆州&gt;&lt;/荆州&gt;        &lt;/湖北&gt;        &lt;湖南&gt;        &lt;/湖南&gt;    &lt;中国&gt;3. 经常用在配置文件    1. 用于链接数据库，例如用于存储用户密码，修改密码值用修改xml中的密码、</code></pre><h3 id="xml的语法"><a href="#xml的语法" class="headerlink" title="xml的语法"></a>xml的语法</h3><h4 id="xml的文档声明"><a href="#xml的文档声明" class="headerlink" title="xml的文档声明"></a>xml的文档声明</h4><pre><code>创建文件，后缀名为 .xml</code></pre><p>#####写一个文档声明，必须写在第一行第一列<br>    &lt;?xml version=”1.0” encoding=”utf-8”?&gt;</p><h6 id="属性-4"><a href="#属性-4" class="headerlink" title="属性"></a>属性</h6><pre><code>version：xml的版本 1.0，1.1encoding：xml 编码  gbk utf-8 iso8859-1standalone：yes/no 表示xml文件是否可以独立存在</code></pre><h4 id="声明元素（标签）"><a href="#声明元素（标签）" class="headerlink" title="声明元素（标签）"></a>声明元素（标签）</h4><h5 id="标签的定义"><a href="#标签的定义" class="headerlink" title="标签的定义"></a>标签的定义</h5><pre><code>1. 标签定义有开始必须有结束：&lt;person&gt;&lt;/person&gt;2. 标签没有内容，也可以标签内结束：&lt;person /&gt;3. 标签可以嵌套，必须要合理嵌套4. 一个xml文档有且必须只有一个根标签5. 标签的包含的空格和换行会被解析成文本内容处理：&lt;person&gt;   1&lt;person&gt; 和 &lt;person&gt;1&lt;/person&gt;是不一样的6. xml文档区分大小写。所以，开始标签和结束标签必须绝对相同，大小写也要完全一致7. 标签名可以字母（包括非西欧字符），数字，下划线，中划线，冒号，点号组成，但是不能以数字，中划线和点号开头8. 不能包括 ‘&lt; &gt; , $’9. 标签名尽量不要出现英文冒号“:”, 除非是在使用名空间10. 标签名不能以字符“xml”等任意大小写组合开始11. 标签名不能包含空格</code></pre><h4 id="定义属性"><a href="#定义属性" class="headerlink" title="定义属性"></a>定义属性</h4><pre><code>html是标记型文档，所以标签有属性。同理，xml也可以用属性&lt;person id1=&quot;aa&quot;&gt;&lt;/person&gt;</code></pre><h5 id="属性定义的要求"><a href="#属性定义的要求" class="headerlink" title="属性定义的要求"></a>属性定义的要求</h5><pre><code>1. 一个标签上可以有多个属性2. 同一个标签，不能有属性名相同的属性3. 属性值一定要用引号，单引号，双引号都行4. 属性名的命名规范和标签命名规范相同</code></pre><h4 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h4><pre><code>写法&lt;!-- 注释的内容 --&gt;注释不能嵌套</code></pre><h4 id="特殊字符-amp-amp-CDATA区"><a href="#特殊字符-amp-amp-CDATA区" class="headerlink" title="特殊字符 &amp;&amp; CDATA区"></a>特殊字符 &amp;&amp; CDATA区</h4><pre><code>开始标签和结束标签之间的文本可以是任何Unicode字符，并且其间的任何字符都重视的传递给xml处理程序但是如果中间由 &lt; 或者 &amp; 字符，容易导致辨认错误。例如： &lt;test&gt; 1 + 1 &lt; 3&lt;/test&gt;， 这样用浏览器打开就会显示错误。解决方法：    1. 使用实体应用（xml定义了五种实体引用）（记得后面要加分号）：        &amp;lt;       ---&gt;     &quot;&lt;&quot;   小于符号        &amp;gt;      ---&gt;     &quot;&gt;&quot;   大于符号        &amp;amp;      ---&gt;     &quot;&amp;&quot;   and符号 &amp;        &amp;apos;    ---&gt;     &quot;&apos;&quot;     英文单引号        &amp;quot;    ---&gt;     &quot;&quot;&quot;     英文双引号    2. 使用CDATA标记        在特殊标记CDATA下，所有的特殊字符，甚至是有效元素都将被当成简单字符处理        实体引用也会失去作用，变成纯文本        语法：        &lt;![CDATA[文本内容]]&gt;</code></pre><h4 id="PI指令（处理指令）"><a href="#PI指令（处理指令）" class="headerlink" title="PI指令（处理指令）"></a>PI指令（处理指令）</h4><pre><code>可以在xml中设置样式，其实就是外部引入css引入css：&lt;?xml-stylesheet type=&quot;text/css&quot; href=&quot;1.css&quot;?&gt;但是，对中文的标签元素不起作用，毕竟外国人定义的东西</code></pre><h3 id="xml的约束"><a href="#xml的约束" class="headerlink" title="xml的约束"></a>xml的约束</h3><pre><code>比如定义人的信息的xml，肯定不能出现猫猫狗狗的信息，所以需要约束由于xml的标签是自定义，所以不加约束容易出现问题。</code></pre><h4 id="dtd约束"><a href="#dtd约束" class="headerlink" title="dtd约束"></a>dtd约束</h4><pre><code>创建一个后缀名为 .dtd 的dtd文件步骤：1. 查看xml中有多少个元素    例如：        &lt;message&gt;            &lt;ip&gt;120.0.0.1&lt;/ip&gt;            &lt;time&gt;2018.10.01&lt;time&gt;            &lt;content&gt;hello world&lt;/content&gt;        &lt;/message&gt;    有四个元素（标签）2. 有多少个元素，就在dtd文件中写多少个&lt;!ELEMENT&gt;3. 判断元素是简单元素还是复杂元素    1. 有子元素的元素是复杂元素        &lt;!ELEMENT 元素名称(子元素名称逗号隔开)&gt;        &lt;!ELEMENT message(ip+,time？,content*)&gt;</code></pre><p>`其中 + ? * 是选择性加上，代表子标签在根标签下出现的次数</p><pre><code>1. +    代表出现一次或多次2. ？    代表出现0次或1次 3. *    打表出现0次或多次 默认是只出现一次`  </code></pre><p><code>逗号连接子元素名称时，子元素必须按顺序出现</code><br><code>用 | 隔开时，表示只能出现范围中的一个</code>  </p><pre><code>    2. 没有子元素的元素是简单元素        &lt;!ELEMENT 元素名称 (#PCDATA)&gt;        &lt;!ELEMENT ip (#PCDATA)&gt;        &lt;!ELEMENT time (#PCDATA)&gt;        &lt;!ELEMENT content (#PCDATA)&gt;4. 在xml中引入外部dtd文件，写在&lt;xml&gt;标签行下    &lt;!DOCTYPE 根元素名称 SYSTEM &quot;dtd文件路径&quot;&gt;4. 在xml内部定义dtd    &lt;!DOCTYPE 根元素名称[        &lt;!ELEMENT 子标签 (#PCDATA)&gt;    ]&gt;    例如：        &lt;!DOCTYPE message[            &lt;!ELEMENT ip (#PCDATA)&gt;            &lt;!ELEMENT time (#PCDATA)&gt;            &lt;!ELEMENT content (#PCDATA)&gt;        ]&gt;4. 使用外部/网络的dtd文件    &lt;!DOCTYPE 根元素 PUBLIC &quot;DTD名称&quot; &quot;DTD文档的URL&quot;&gt;用浏览器打开的时候，浏览器之校验语法，不校验约束，所以用浏览器打开不能查看是否约束上</code></pre><h5 id="使用dtd定义属性"><a href="#使用dtd定义属性" class="headerlink" title="使用dtd定义属性"></a>使用dtd定义属性</h5><pre><code>语法：&lt;!ATTLIST 元素名称 属性名称 属性类型 属性的约束&gt;1. 属性类型有三种    1. CDATA：表示属性的取值为普通的文本字符串    2. ENUMERATED：表示枚举，只能从枚举列表中任选其一 例如：（鸡肉|鸭肉|鱼肉|牛肉）这种方法定义枚举    3. ID：表示属性的取值不能重复，只能是字母，下划线开始2. 属性的约束有三种    1. #REQUIRED：表示该属性必须出现    2. #IMPLIED：表示该属性可有可无    3. #FIXED：表示属性的取值为一个固定值    4. 直接写一个值上去：表示属性的默认值为你直接协商的值例如：&lt;!ATTLIST ip ID1 CDATA &quot;wwww&quot;&gt; 则ID1属性的值默认为www</code></pre><h4 id="schema约束"><a href="#schema约束" class="headerlink" title="schema约束"></a>schema约束</h4><pre><code>空</code></pre><h3 id="xml解析"><a href="#xml解析" class="headerlink" title="xml解析"></a>xml解析</h3><pre><code>xml是标记型文档js使用dom解析标记型文档    根据html的层级结构，在内存中分配一个属性结构，把html的标签属性和文本封装成对象    document对象，element对象，属性对象，文本对象，node节点对象xml的解析方式：dom 和 sax</code></pre><h4 id="dom方式解析"><a href="#dom方式解析" class="headerlink" title="dom方式解析"></a>dom方式解析</h4><pre><code>根据 xml 的层级结构在内存中分配一个树形结构，把xml的标签，属性和文本都封装成对象    缺点：如果文件过大，造成内存溢出    优点：方便实现增删改操作</code></pre><h4 id="sax方式解析"><a href="#sax方式解析" class="headerlink" title="sax方式解析"></a>sax方式解析</h4><pre><code>采用事件驱动方式，边读便解析，从上到下，一行一行的解析，解析到某个对象，返回对象名称    缺点：不能实现增删改    优点：不会造成内存溢出，方便实现查询操作</code></pre><p><img src="https://i.imgur.com/bf6pKn0.png" alt=""></p><h4 id="dom和sax方式的解析器"><a href="#dom和sax方式的解析器" class="headerlink" title="dom和sax方式的解析器"></a>dom和sax方式的解析器</h4><pre><code>不同的公司和组织提供了针对dom和sax方式的解析器，通过api方式提供    1. sun公司提供    jaxp2. dom4j组织提供    dom4j（实际开发中用的比较多）3. jdom组织提供    jdom</code></pre><h4 id="jaxp的api的查看"><a href="#jaxp的api的查看" class="headerlink" title="jaxp的api的查看"></a>jaxp的api的查看</h4><pre><code>jaxp是javase的一部分jaxp解析器在jdk的javax.xml.parsers包里面DocumentBuilder            定义API，使其从xml文档获取DOM文档实例DocumentBuilderFactory    定义工厂API，是应用程序能够从xml文档获取生成DOM对象数的解析器SAXParser                定义包装XMLReader实现类的APISAXParserFactory        定义工厂API，是应用程序能够配置和获取基于sax的解析器以解析XML文档</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Html&quot;&gt;&lt;a href=&quot;#Html&quot; class=&quot;headerlink&quot; title=&quot;Html&quot;&gt;&lt;/a&gt;Html&lt;/h2&gt;&lt;h3 id=&quot;什么是Html？&quot;&gt;&lt;a href=&quot;#什么是Html？&quot; class=&quot;headerlink&quot; title=&quot;什
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>xml</title>
    <link href="http://yoursite.com/2018/09/26/xml/"/>
    <id>http://yoursite.com/2018/09/26/xml/</id>
    <published>2018-09-26T12:59:29.000Z</published>
    <updated>2018-09-26T13:02:49.042Z</updated>
    
    <content type="html"><![CDATA[<h2 id="xml概述："><a href="#xml概述：" class="headerlink" title="xml概述："></a>xml概述：</h2><pre><code>可扩展标记语言。(Extensible Markup Language)  允许开发者自由定义标签，可以将标签和内容有效分离。  xml不再侧重于数据如何展示，二十更过的关注数据如何存储和传输。  </code></pre><h2 id="xml应用场景："><a href="#xml应用场景：" class="headerlink" title="xml应用场景："></a>xml应用场景：</h2><pre><code>1. xml把数据从HTML分离出来。那温度距离，用html注重于显示而无关数据，用xml改变数据，让html读取。  2. 简化数据共享。提供了独立于软件和硬件的存储方式。  3. 简化数据的传输。通过xml，可以在不兼容的系统之间传输数据。  4. 简化平台的变更。  </code></pre><h2 id="xml的优势："><a href="#xml的优势：" class="headerlink" title="xml的优势："></a>xml的优势：</h2><pre><code>1. 简单易用的标记预语言。xml标签可以自己自由定义。2. 严格的格式。比html标签控制更严格。3. 数据逻辑和显示逻辑分离。html注重于显示，xml注重于数据存储。</code></pre><h2 id="xml文档规则："><a href="#xml文档规则：" class="headerlink" title="xml文档规则："></a>xml文档规则：</h2><pre><code>1. 有且只有一个根元素2. 元素必须合理结束3. 元素之间必须合理嵌套4. 元素的属性必须有值</code></pre><h2 id="xml存储信息："><a href="#xml存储信息：" class="headerlink" title="xml存储信息："></a>xml存储信息：</h2><pre><code>例如：书名    作者    价格         java思想    小王    79.00          Spring指南    小李    89.00  </code></pre><h2 id="xml的写法"><a href="#xml的写法" class="headerlink" title="xml的写法"></a>xml的写法</h2><h3 id="字符集："><a href="#字符集：" class="headerlink" title="字符集："></a>字符集：</h3><pre><code>1. 简体中文：GBK 或 GB23122. 繁体中文：BIG53. 西欧字符：ISO8859-14. 通用的国际编码：Unicode5. 针对Unicode的可变长度字符编码UTF8</code></pre><h3 id="合法标签名："><a href="#合法标签名：" class="headerlink" title="合法标签名："></a>合法标签名：</h3><pre><code>xml元素由开始标签和结束标签组合，结束标签比开始标签多一条斜线xml文档区分大小写。所以，开始标签和结束标签必须绝对相同，大小写也要完全一致标签名可以字母（包括非西欧字符），数字，下划线，中划线，冒号，点号组成，但是不能以数字，中划线和点号开头不能包括 ‘&lt; &gt; , $’标签名尽量不要出现英文冒号“:”, 除非是在使用名空间标签名不能以字符“xml”等任意大小写组合开始标签名不能包含空格</code></pre><h3 id="空元素："><a href="#空元素：" class="headerlink" title="空元素："></a>空元素：</h3><pre><code>例：&lt;元素名 属性名=&quot;  &quot; /&gt;空元素不是内容为空的元素，空元素不接受子元素，也不接受字符内容&lt;?xml version=&quot;1.0&quot; encoding=&quot;GB2312&quot; standalone = &quot;yes&quot; ?&gt;&lt;书籍列表&gt;    &lt;书名&gt; java思想&lt;/书名&gt;    &lt;价格&gt;79.00&lt;/价格&gt;    &lt;作者&gt;小王&lt;/作者&gt;    &lt;书名&gt;Spring指南&lt;/书名&gt;    &lt;价格&gt;89.00&lt;/价格&gt;    &lt;作者&gt;小李&lt;/作者&gt;&lt;/书籍列表&gt;那么 &lt;书籍列表&gt; 就是根元素</code></pre><h2 id="字符数据："><a href="#字符数据：" class="headerlink" title="字符数据："></a>字符数据：</h2><pre><code>开始标签和结束标签之间的文本可以是任何Unicode字符，并且其间的任何字符都重视的传递给xml处理程序但是如果中间由 &lt; 或者 &amp; 字符，容易导致辨认错误。例如： &lt;test&gt; 1 + 1 &lt; 3&lt;/test&gt;， 这样用浏览器打开就会显示错误。解决方法：    1. 使用实体应用（xml定义了五种实体引用）（记得后面要加分号）：        &amp;lt;       ---&gt;     &quot;&lt;&quot;   小于符号        &amp;gt;      ---&gt;     &quot;&gt;&quot;   大于符号        &amp;amp;      ---&gt;     &quot;&amp;&quot;   and符号 &amp;        &amp;apos;    ---&gt;     &quot;&apos;&quot;     英文单引号        &amp;quot;    ---&gt;     &quot;&quot;&quot;     英文双引号    2. 使用CDATA标记        在特殊标记CDATA下，所有的特殊字符，甚至是有效元素都将被当成简单字符处理        实体引用也会失去作用，变成纯文本        语法：        &lt;![CDATA[文本内容]]&gt;</code></pre><h2 id="换行处理："><a href="#换行处理：" class="headerlink" title="换行处理："></a>换行处理：</h2><pre><code>目前主流的操作系统，主要由3种换行符：    1. Windows平台：回车符（CR） 和 换行符 （LF） 的组合存储换行    2. Unix和Linux平台：以换行符（LF）存储换行    3. Macintosh平台：以回车符（CR）存储换行xml同一换行符（LF） 存储换行</code></pre><h2 id="命名空间："><a href="#命名空间：" class="headerlink" title="命名空间："></a>命名空间：</h2><pre><code>同一份xml文档中可能出现多个同名的元素和属性。必须添加标记判断语法：    xmlns[:prefix]= &quot;命名空间字符串&quot;    xmlns -&gt; xml namespace例如：    xmlns:hehe = &quot;http://www.***.com&quot;    &lt;hehe:name&gt;java思想&lt;/hehe:name&gt;</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;xml概述：&quot;&gt;&lt;a href=&quot;#xml概述：&quot; class=&quot;headerlink&quot; title=&quot;xml概述：&quot;&gt;&lt;/a&gt;xml概述：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;可扩展标记语言。(Extensible Markup Language)  
允许开发者自由
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MySQL命令</title>
    <link href="http://yoursite.com/2018/09/26/MySQL%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2018/09/26/MySQL命令/</id>
    <published>2018-09-26T08:30:14.000Z</published>
    <updated>2018-09-26T08:37:54.316Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Windows下进入命令行"><a href="#Windows下进入命令行" class="headerlink" title="Windows下进入命令行"></a>Windows下进入命令行</h2><pre><code>ssh 用户名@ip地址  或者 mysql -h ip地址 -u root -p  然后输入密码  mysql -u 数据库用户名 -p  然后输入密码  </code></pre><h3 id="修改密码："><a href="#修改密码：" class="headerlink" title="修改密码："></a>修改密码：</h3><pre><code>`mysqladmin -u root -p 密码 password 新密码`  </code></pre><h3 id="增加用户："><a href="#增加用户：" class="headerlink" title="增加用户："></a>增加用户：</h3><pre><code>`insert into mysql.user(Host,User,Password)  values  (&quot;localhost&quot;,&quot;test&quot;,password(&quot;1234&quot;));（登陆地址，用户名，密码）  `</code></pre><h3 id="用户授权："><a href="#用户授权：" class="headerlink" title="用户授权："></a>用户授权：</h3><pre><code>`grant 权限 on 数据库.* to 用户名@登录主机 identified by &quot;密码&quot;;　 `   `权限包括：select,insert,update,delete，all privileges  `  `记得创建授权之后，flush privileges;//刷新系统权限表 `   </code></pre><h3 id="删除用户："><a href="#删除用户：" class="headerlink" title="删除用户："></a>删除用户：</h3><pre><code>`root权限下 Delete FROM user Where User=&apos;用户名&apos; and Host=&apos;ip地址&apos;; ``flush privileges;  `</code></pre><h3 id="修改密码：-1"><a href="#修改密码：-1" class="headerlink" title="修改密码："></a>修改密码：</h3><pre><code>`update mysql.user set password=password(&apos;新密码&apos;) where User=&quot;test&quot; and Host=&quot;localhost&quot;;  `</code></pre><h3 id="查看数据库："><a href="#查看数据库：" class="headerlink" title="查看数据库："></a>查看数据库：</h3><pre><code>`show databases;  `</code></pre><h3 id="链接数据库："><a href="#链接数据库：" class="headerlink" title="链接数据库："></a>链接数据库：</h3><pre><code>`use 库名；  `</code></pre><h3 id="查看数据表："><a href="#查看数据表：" class="headerlink" title="查看数据表："></a>查看数据表：</h3><pre><code>`show tables;  `</code></pre><h3 id="查看状态："><a href="#查看状态：" class="headerlink" title="查看状态："></a>查看状态：</h3><pre><code>`show status like &apos;%下面变量%&apos;; ` </code></pre><hr><pre><code>Aborted_clients 由于客户没有正确关闭连接已经死掉，已经放弃的连接数量。   Aborted_connects 尝试已经失败的MySQL服务器的连接的次数。   Connections 试图连接MySQL服务器的次数。   Created_tmp_tables 当执行语句时，已经被创造了的隐含临时表的数量。   Delayed_insert_threads 正在使用的延迟插入处理器线程的数量。   Delayed_writes 用INSERT DELAYED写入的行数。   Delayed_errors 用INSERT DELAYED写入的发生某些错误(可能重复键值)的行数。   Flush_commands 执行FLUSH命令的次数。   Handler_delete 请求从一张表中删除行的次数。   Handler_read_first 请求读入表中第一行的次数。   Handler_read_key 请求数字基于键读行。   Handler_read_next 请求读入基于一个键的一行的次数。   Handler_read_rnd 请求读入基于一个固定位置的一行的次数。   Handler_update 请求更新表中一行的次数。   Handler_write 请求向表中插入一行的次数。   Key_blocks_used 用于关键字缓存的块的数量。   Key_read_requests 请求从缓存读入一个键值的次数。   Key_reads 从磁盘物理读入一个键值的次数。   Key_write_requests 请求将一个关键字块写入缓存次数。       Key_writes 将一个键值块物理写入磁盘的次数。   Max_used_connections 同时使用的连接的最大数目。   Not_flushed_key_blocks 在键缓存中已经改变但是还没被清空到磁盘上的键块。   Not_flushed_delayed_rows 在INSERT DELAY队列中等待写入的行的数量。   Open_tables 打开表的数量。   Open_files 打开文件的数量。     Open_streams 打开流的数量(主要用于日志记载）   Opened_tables 已经打开的表的数量。     Questions 发往服务器的查询的数量。   Slow_queries 要花超过long_query_time时间的查询数量。   Threads_connected 当前打开的连接的数量。   Threads_running 不在睡眠的线程数量。   Uptime 服务器工作了多少秒。  </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Windows下进入命令行&quot;&gt;&lt;a href=&quot;#Windows下进入命令行&quot; class=&quot;headerlink&quot; title=&quot;Windows下进入命令行&quot;&gt;&lt;/a&gt;Windows下进入命令行&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;ssh 用户名@ip地址  
或者 
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>java的文件和时间操作</title>
    <link href="http://yoursite.com/2018/09/25/java%E7%9A%84%E6%96%87%E4%BB%B6%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/09/25/java的文件操作/</id>
    <published>2018-09-25T14:37:09.000Z</published>
    <updated>2018-09-25T15:55:52.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="File-类"><a href="#File-类" class="headerlink" title="File 类"></a>File 类</h2><h3 id="构造函数有："><a href="#构造函数有：" class="headerlink" title="构造函数有："></a>构造函数有：</h3><pre><code>传入相对路径（一个参数）  传入绝对路径（一个参数）  File类指定为当前文件的父级，当前文件的名称（两个参数）  </code></pre><h2 id="文件删除读写改名"><a href="#文件删除读写改名" class="headerlink" title="文件删除读写改名"></a>文件删除读写改名</h2><pre><code>File file = new File(&quot;hello.txt&quot;);//对于工程而言用相对路径，创建在根目录下。也可以用绝对路径指定文件夹  //File file = new File(&quot;bin/hello.txt&quot;);工程文件夹下的bin文件夹的hello.txt文件  //File file = new File(&quot;../hello.txt&quot;);工程文件夹的上一级文件中新建hello.txt文件  if(file.exists()){      System.out.printlen(file.isFile());//判断文件是文件      System.out.println(file.isDirectory());//判断文件是文件夹      File nameto = new File(&quot;new name .txt&quot;);      file.renameTo(nameto);//将file的名字改为nameti的名字      File nameto1 = new File(&quot;src/new name.txt&quot;);      file.renameTo(nameto1);//将文件移动到src目录下      file.delete();//删除文件  }else{      System.out.println(&quot;文件不存在&quot;);      try{          file.createNewFile();          System      }catch(IOException e){//抛出异常          e.printStackTrace();          System.out.println(&quot;文件无法创建&quot;);      }  }  </code></pre><h3 id="测试样例，用于文件的读取"><a href="#测试样例，用于文件的读取" class="headerlink" title="测试样例，用于文件的读取"></a>测试样例，用于文件的读取</h3><p>新建一个test.txt文件，内容随意。</p><pre><code>File file = new File(&quot;text.txt&quot;);if(file.exitst()){    try{        FileInputStream fis = new FileInputStream(file);//属于字节流        InputStreamReader isr = new InputStreamReader(fis. &quot;UTF-8&quot;);//属于字符流，在字节转换为字符的时候，需要指定编码，否则可能会出现乱码。        BufferedReader br = new BufferedReader(isr);//带有缓冲区的reader        String line;//用于存放临时数据        while ((line = br.readLine()) != null){            System.out.println(line);//输出读取的一行        }        关闭输入流，先打开的后关闭，后打开的先关闭。        br.close();        isr.close();        fis.close();    }catch (FileNotFoundException e){        该异常对应于 FileInputStream    }catch (UnsupportedEncodingException e){        该异常对应于 InputStreamReader    }catch (IOException e){        该异常对应于 ***.close()    }}</code></pre><h3 id="测试样例，用于写入文件"><a href="#测试样例，用于写入文件" class="headerlink" title="测试样例，用于写入文件"></a>测试样例，用于写入文件</h3><pre><code>File newfile = new File(&quot;newtest.txt&quot;);try{    FileOutPutStream fos = new FileOutputStream(newfile);    OutPutStreamWriter osw = new OutPutStream(fos, &quot;UTF-8&quot;);    BufferedWriter bw = new BufferedWriter(osw);    bw.write(&quot;你要写入的内容&quot;);    。。。。。。。    bw.close();    osw.close();    fos.close();    //同样，先打开的后关闭，后打开的先关闭。}</code></pre><h2 id="文件夹操作"><a href="#文件夹操作" class="headerlink" title="文件夹操作"></a>文件夹操作</h2><pre><code>File类可以表示文件或者文件夹，但是两者之间的是有区别的File folder = new File(&quot;my new folder&quot;);// folder.createNewFile()  使用该方法创建的是一个文件，只是文件没有后缀罢了folder.mkdir();//创建一个文件夹，返回值是一个bool类型，true为创建成功，false为失败//如果 已经存在 名为 “my new folder”的文件夹，则创建失败。也就是说不能出现同名的文件或者文件夹</code></pre><p><code>如果使用mkdir()，那么创建的文件夹必须是物理上存在的文件夹，也就是说，如果创建“one/two/test”这样的文件夹，但是 不存在one文件夹，那么是不会自动补全路径的。这时候我们就需要用 mkdirs()，也就是 file.mkdirs()这个语句。</code></p><pre><code>//文件夹给名字的方法跟文件改名字的方法类似File folder = new File(&quot;my new folder&quot;);File newfolder = new File(&quot;new folder&quot;);folder.renameTo(newfolder);//返回的是一个bool类型的值，可以通过if判断是否修改成功//用这种方式修改文件夹的名字forlder.delete();//删除文件夹，但是只能删除空文件夹</code></pre><p><code>在windows中，千万注意移动文件夹不要跨盘移动，否则失败。因为Windows的文件系统是森林格式，而Linux和Mac系统是数状的</code></p><h2 id="一些判断获取语句"><a href="#一些判断获取语句" class="headerlink" title="一些判断获取语句"></a>一些判断获取语句</h2><pre><code>File file = new File(&quot;test.txt&quot;);//判断文件是否存在    file.exists();//读取文件名称    file.getName();//读取文件相对路径    file.getPath();//读取文件的绝对路径    file.getAbsolutePath();//读取文件父级路径    file.getParent();//读取文件大小（字节）    file.length();//判断文件是否被隐藏（Linux和unix中，文件以 &quot; . &quot;开头代表隐藏）    file.isHidden();//判断文件是否可读    file.canRead();//判断文件是否可写    file.canWrite();//判断文件是否为文件夹    file.isDirectory();//当程序退出时将文件删除    file.deleteOnExit();</code></pre><h2 id="设置文件属性："><a href="#设置文件属性：" class="headerlink" title="设置文件属性："></a>设置文件属性：</h2><pre><code>File file = new File(&quot;test.file&quot;);//设置为可写    file.setWritable(true);//传入 true 则设置文件可写，否则设置为不可写//设置为可读    file.setReadable(true);//与上述相同。//设置为只读    file.setReadOnly();</code></pre><h2 id="遍历文件夹"><a href="#遍历文件夹" class="headerlink" title="遍历文件夹"></a>遍历文件夹</h2><pre><code>public static void printfFiles(File dir){{    if( dir.isDirectory() ){        File next[] = dir.listFiles();        for( int i = 0; i&lt;next.length; i++){            if( next[i].ifFile() ){//输出文件的名字                System.out.println(next[i].name);            }else{//递归的输出文件的名字                printfFiles(next[i]);            }        }    }}</code></pre><h2 id="时间操作"><a href="#时间操作" class="headerlink" title="时间操作"></a>时间操作</h2><p>Date表示时间，日期。但是更新jdk之后就不推荐使用了。<br>官方解释是 使用Date类<code>不利于国际化</code>。所以jdk1.1版本后推荐使用Calendar类。使用DateFormat类进行时间日期的格式化。Long类型表示时间类型。String类型表示时间日期类的显示。 </p><pre><code>Date.getTime();//获取Date对象的时间  Date.setTime(long time);//设置Date的时间  Calendar rightnow = Calendar.getInstance();//获取当前时间  long now = System.currentTimeMillis();//获得系统的当前时间，但是这个时间只有机器能读懂Date d1 = new Date(now);// 获取人能够读懂的时间  Calendar c1 = Calendar .getInstance();  System.out.print(c1.getTime().toString());//获得人能够读懂的时间  </code></pre><p><code>String -&gt; 时间  &amp;&amp; 时间 -&gt; String</code></p><pre><code>SimpleDateFormat sdf = new SimpleDateFormat(&quot;yyyy-MM-dd&quot;);//指定日期的格式  sdf.format(date);//将Date类型转换为指定格式的String类型，返回的是一个String类型  sdf.parse(&quot;2015-06-01&quot;);//将String转换为Date类型，返回的是一个Date类型  //SimpleDateFormat(&quot;yyyy-MM-dd hh:mm:ss&quot;); 时间格式为 年月日  时分秒  </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;File-类&quot;&gt;&lt;a href=&quot;#File-类&quot; class=&quot;headerlink&quot; title=&quot;File 类&quot;&gt;&lt;/a&gt;File 类&lt;/h2&gt;&lt;h3 id=&quot;构造函数有：&quot;&gt;&lt;a href=&quot;#构造函数有：&quot; class=&quot;headerlink&quot; titl
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2018/09/25/Git/"/>
    <id>http://yoursite.com/2018/09/25/Git/</id>
    <published>2018-09-25T07:47:09.511Z</published>
    <updated>2018-09-25T08:15:03.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git的起源"><a href="#Git的起源" class="headerlink" title="Git的起源"></a>Git的起源</h2><p>linux内核源代码一直在 bitkeep 上托管，但是bitkeep 突然收回对linux的授权，因为bitkeep说开源社区中的一个成员对bitkeep的协议进行逆向工程。因此，自己写了git。</p><p><code>SVN</code>-&gt;<code>集中式版本控制系统</code>：只有中央服务器有版本的数据库，其他电脑没有，所有版本控制都要通过中央服务器进行交互。（要是中央服务器当机离线，则就出大问题了）<br><code>git</code>-&gt;<code>分布式版本控制</code>：每一个台电脑上面都有一个版本的database。由于每台电脑都有数据库，所以大多数操作可以离线进行。支持比较多的控制模式-也可以安装一个中央服务器。  </p><ol><li>git每个版本存储的都是当前版本的所有内容，不需要与其他版本进行差异比较之后再进行文件的合成。  </li><li>git可以离线完成大部分操作。  </li><li>git有更优雅的分支和合并实现。  </li><li>git有更强大撤销修改和修改版本历史的能力。  </li><li>git速度更快，效率更高。</li></ol><h2 id="为什么学习git："><a href="#为什么学习git：" class="headerlink" title="为什么学习git："></a>为什么学习git：</h2><p>研究GitHub<br>越来越多的公司通过git调整</p><h2 id="git如何存储文件，历史记录："><a href="#git如何存储文件，历史记录：" class="headerlink" title="git如何存储文件，历史记录："></a>git如何存储文件，历史记录：</h2><p><code>git通过40个16进制字符的SHA-1 Hash 来唯一标识对象</code> 例如：     e98757d0598ab6eeaf1df0d87dd00826048bd80b<br>git有<code>四种对象</code>：  </p><pre><code>1. blob：文本文件或者二进制文件或者链接文件  2. tree：目录  3. commit：历史提交      4. tag：指向固定的历史提交  (-&gt;）指向的意思  </code></pre><p><code>tag</code>  <code>-&gt;</code>  <code>commit</code>  <code>-&gt;</code>  <code>tree</code>  <code>-&gt;</code>  <code>多个tree对象或者多个blob对象</code><br>对工作区的这些内容进行SHA-1 Hash 之后，就可以得到唯一标识。<br>如果两个文件内容是相同的，则他们指向同一个blob对象。而文件名这种信息会存在tree对象中。  </p><p>有了git对象之后，需要git仓库去存储对象，和操作对象。<br>git init   git clone  两种方法获取仓库。<br><img src="https://i.imgur.com/InyuRGB.png" alt=""><br>cd 到.git 文件夹中 （GIT_DIR!）-&gt; git工作区间     用 ls 查看git需要的文件<br>再退出来<br>用init方法创建一个裸仓库。然后查看仓库中有什么。<br>git init –bare git_bare_repo<br>通过–bare 方法创建一个 git_bare_repo 文件夹。这个文件夹只有git工作需要的文件。<br>git clone 克隆出一个仓库 一般来说需要远程裸仓库的地址<br>git clone git_bare_repo/ git_clone_repo （复制之前创建的本地仓库，并创建在文件夹  git_clone_repo中）  </p><h2 id="git分为三个区域："><a href="#git分为三个区域：" class="headerlink" title="git分为三个区域："></a>git分为三个区域：</h2><blockquote><ol><li>working directory（工作区，日常编辑代码的地方）  </li><li>staging area（暂存区，工作区与历史提交的缓存，维护的是虚拟的树形结构）  </li><li>history repository（历史仓库）   </li></ol></blockquote><p>（1）工作区  添加文件到  暂存区  提交整个暂存区的状态   历史纪录区<br>（2）历史记录区   检出文件到   暂存区和工作区<br>大部分时间我们都在做第一个工作<br>对应的就是 <code>git add（到暂存区）</code>  和  <code>git commit（到历史记录区）</code><br>    git status（查看工作区和暂存区的区别，确保提交是我们所需要的）<br>    git rm（从暂存区删掉我们不需要的东西）<br>    git mv（移动文件）<br>    gitignore（确保不想添加到暂存区和历史纪录区的文件不被添加）  </p><blockquote><p>先 创建  a b 两个文件<br>    touch a<br>    touch b<br>然后添加到暂存区<br>    git add a b<br>查看一下<br>    git status<br>提交到历史纪录<br>    git commit -m “initial commit” （加入一个提交的历史信息）<br>修改一下a<br>    vim a（加入一些文字信息）<br>再看一下 git status<br>    提示 a 修改了 但是没有提交到暂存区<br>提交a到暂存区中<br>    git add a<br>再status 看一下<br>    git status<br>再提交 a 就行<br>    git commit -m “modify a”<br>删除a，会删除 工作区 ，暂存区中的a<br>    git rm a<br>还原一下a<br>    git checkout a<br>如何只删除暂存区的文件，不删除工作目录的文件<br>    git rm –cached a  </p></blockquote><p><hr><br><img src="https://i.imgur.com/tAGY09M.png" alt=""></p><blockquote><p>git status 看看就会提示有一个没有跟踪的文件<br>git mv a c （将a名字命名为c）（这个命令是一系列操作的总和）<br>    如果直接再工作区修改文件名<br>        mv a c （工作目录直接 修改名字）<br>    再 git status<br>        提示 a 被删除了 ， 有个c 的文件没有被跟踪<br>    再 git add a c（添加a c 到文件中）<br>        提示文件 a 被更改为 c<br>git add -A 添加整个工作区都暂存区<br>git .gitignore    在顶层目录下创建一个.gitignore文件<br><em>.[oa]通过通配符提示git，以 o 和 a 结尾的文件不要添加到git仓库中<br>例如：加入了  </em>.~, *.pyc ， 但是如果以.pyc为后缀的文件，有一个要加到仓库，这个时候就要在文件名上加  !test.pyc，告诉 test.pyc 不要被忽略。如果需要ingore文件名第一个字符就是“！”，就要加上”\”转义字符。<br>**/res 匹配 res，所有路径下的res，任何文件夹下的res。<br>git add .gitignore<br>git commit -m “add ingore”//添加到仓库中，用于整个仓库的共享  </p></blockquote><h2 id="git暂存区"><a href="#git暂存区" class="headerlink" title="git暂存区"></a>git暂存区</h2><blockquote><p>.git/objects 对象库<br>当执行 git add 命令时，.git 目录下多了一个index文件，整个index文件就是暂存区，每条索引有个的四十位的十六进制的SHA-1 Hash，文件模式，权限，时间戳等。每个索引都对应对象库中的某个对象对应。<br>除了索引之外，还维护了提前计算好的tree对象的内容。当我们提交的时候，可以直接通过提前计算好的，直接生成索引等内容。<br>当文件名更改时，根据文件内容所计算出来的SHA-1 也不会变。<br>暂存区索引每次更新的时候，都会重新计算index 和暂存区的内容。  </p></blockquote><h2 id="git本地分支与合并"><a href="#git本地分支与合并" class="headerlink" title="git本地分支与合并"></a>git本地分支与合并</h2><pre><code>git branch（创建分支)  git tag（给commit做标记）  git checkout（分支之间的切换）  git stash（切换分支之前保存本地修改）  git merge（合并分支）</code></pre><blockquote><p>例如：git branch test  新建分支 test。但是只是新建，要切换过去才能使用<br>git checkout test 切换到test分支。<br>test分支做的修改，不会影响到master分区的工作。也就是说分支互不影响。</p></blockquote><pre><code>tag 分 轻量级 本地引用  和 annotady 带注解的tag通过 git log --online --decorate --graph -all 查看hash值，以及提交，查看历史示意图  git tag &quot;v0&quot; a1abda30   （a1abda30 就是上述命令查出的hash值）  git tag -a &quot;INITAL_COMMIT&quot; a1abda30   标注tag，提示输出tag信息。  git tag 查看以有的设置过的tag  git config --global alias.lol &quot;log --oneline --decorate --graph --all&quot; 用 git lol 代替 log --oneline --decorate --graph --all  git show v0 （v0是一个tag的名字）  </code></pre><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>提供个人或者企业的代码托管。可以查看其他的开源项目托管。<br><img src="https://i.imgur.com/qDXMcAv.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git的起源&quot;&gt;&lt;a href=&quot;#Git的起源&quot; class=&quot;headerlink&quot; title=&quot;Git的起源&quot;&gt;&lt;/a&gt;Git的起源&lt;/h2&gt;&lt;p&gt;linux内核源代码一直在 bitkeep 上托管，但是bitkeep 突然收回对linux的授权，因为bi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ACM-ICPC 2018 徐州赛区网络预赛</title>
    <link href="http://yoursite.com/2018/09/25/ACM-Icpc-%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
    <id>http://yoursite.com/2018/09/25/ACM-Icpc-徐州网络赛/</id>
    <published>2018-09-25T05:38:47.873Z</published>
    <updated>2018-09-25T06:54:20.219Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time Limit: 1000ms       Memory Limit: 262144KB</span><br></pre></td></tr></table></figure><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p> Mur loves hash algorithm, and he sometimes encrypt another one’s name, and call him with that encrypted value. For instance, he calls Kimura KMR, and calls Suzuki YJSNPI. One day he read a book about SHA-256, which can transit a string into just 256 bits. Mur thought that is really cool, and he came up with a new algorithm to do the similar work. The algorithm works this way: first we choose a single letter L as the seed, and for the input(you can regard the input as a string s, s[i] represents the i th character in the string)we calculates the value(|(int) L – s[i]|), and write down the number(keeping leading zero. The length of each answer equals to 2 because the string only contains letters and numbers). Numbers writes from left to right, finally transfer all digits into a single integer(without leading zero(s)). For instance, if we choose ‘z’ as the seed, the string “oMl” becomes “11 45 14”.  It’s easy to find out that the algorithm cannot transfer any input string into the same length. Though in despair, Mur still wants to know the length of the answer the algorithm produces. Due to the silliness of Mur, he can even not figure out this, so you are assigned with the work to calculate the answer. </p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p> First line a integer T, the number of test cases(T &lt;= 10)  For each test case:  First line contains a integer N and a character z, (N &lt;= 1000000)  Second line contains a string with length N. Problem makes sure that all characters referred in the problem are only letters. </p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p> A single number which gives the answer. </p><h3 id="Sample-input"><a href="#Sample-input" class="headerlink" title="Sample input"></a>Sample input</h3><p>2<br>3 z<br>oMl<br>6 Y<br>YJSNPI </p><h3 id="Sample-output"><a href="#Sample-output" class="headerlink" title="Sample output"></a>Sample output</h3><p>6<br>10 </p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mur喜欢哈希算法，他有时加密另一个人的名字，然后用加密值给他打电话。例如，他打电</span><br><span class="line">话给Kimura KMR，并打电话给Suzuki YJSNPI。有一天，他读了一本关于SHA-256的</span><br><span class="line">书，它可以将字符串转换成256位。 Mur认为这很酷，他想出了一个新的算法来完成类似的</span><br><span class="line">工作。算法以这种方式工作：首先我们选择单个字母L作为种子，对于输入（您可以将输入</span><br><span class="line">视为字符串s，s [i]表示字符串中的第i个字符）我们计算值（ |（int）L - s [i] </span><br><span class="line">|），并记下数字（保持前导零。每个答案的长度等于2，因为字符串只包含字母和数字）。</span><br><span class="line">数字从左到右写入，最后将所有数字转换为单个整数（不带前导零）。例如，如果我们选</span><br><span class="line">择&apos;z&apos;作为种子，则字符串“oMl”变为“11 45 14”。很容易发现该算法无法将任何输入字</span><br><span class="line">符串转换为相同的长度。虽然在绝望中，Mur仍然想知道算法产生的答案的长度。由于穆尔</span><br><span class="line">的愚蠢，他甚至无法弄清楚这一点，所以你被分配了计算答案的工作。</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p> 第一行是整数T，测试用例数（T &lt;= 10）对于每个测试用例：第一行包含整数N和字符z，（N &lt;= 1000000）第二行包含长度为N的字符串。确保问题中提到的所有字符都只是字母。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p> 一个数字给出了答案。</p><h3 id="样本输入"><a href="#样本输入" class="headerlink" title="样本输入"></a>样本输入</h3><p>2<br>3 z<br>oMl<br>6 Y<br>YJSNPI</p><h3 id="样本输出"><a href="#样本输出" class="headerlink" title="样本输出"></a>样本输出</h3><p>6<br>10</p><blockquote><p>水题，但是特别坑。<br>这里先讲第二个样例： 减出来的结果是  00  15  06  11  09  16<br>这样去除前面的0，得出来的结果就是1506110916，这10位<br>如果全部都是0呢 比如 <br>4 z<br>zzzz<br> 这个时候就要输出 1 而不是 0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line">while(T--)&#123;</span><br><span class="line">int sum = 0;</span><br><span class="line">int len;</span><br><span class="line">char Seed, s;</span><br><span class="line">cin &gt;&gt; len &gt;&gt; Seed;</span><br><span class="line">        bool flag = false, fir = true;</span><br><span class="line">for(int i=0; i&lt;len; i++)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">int t = Seed - s;</span><br><span class="line">t = abs(t);</span><br><span class="line">            if(t != 0)</span><br><span class="line">                flag = true;</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">                if(fir)&#123;</span><br><span class="line">                    if(t &gt;= 1 &amp;&amp; t &lt;= 9)</span><br><span class="line">                        sum += 1;</span><br><span class="line">                    else </span><br><span class="line">                        sum += 2;</span><br><span class="line">                    fir = false;</span><br><span class="line">                &#125;</span><br><span class="line">                else sum += 2;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">        if(flag == false)</span><br><span class="line">            sum = 1;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p> Ryuji is not a good student, and he doesn’t want to study. But there are n books he should learn, each book has its knowledge a[i]. Unfortunately, the longer he learns, the fewer he gets. That means, if he reads books from l to r, he will get a[l]<em>L+a[l+1]</em>(L-1)+…+a[r1]*2+a[r] (L is the length of [l, r] that equals to r-l+1).  Now Ryuji has q questions, you should answer him: 1. If the question type is 1, you should answer how much knowledge he will get after he reads books [l, r] 2. If the question type is 2, Ryuji will change the ith book’s knowledge to a new value. </p><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p> First line contains two integers n and q (n, q &lt;= 100000).  The next line contains n integers represent a<a href="a[i] &lt;= 1e9">i</a>  Then in next q line each line contains three integers a, b, c, if a = 1, it means question type is 1, and b, c represents [l, r]. if a = 2, it means question type is 2, and b, c means Ryuji changes the bth book’ knowledge to c. </p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p> For each question, output one line with one integer represent the answer.<br>Sample Input<br>5 3<br>1 2 3 4 5<br>1 1 3<br>2 5 0<br>1 4 5 </p><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>10<br>8 </p><h2 id="翻译-1"><a href="#翻译-1" class="headerlink" title="翻译"></a>翻译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  Ryuji不是一个好学生，他不想学习。 但他应该学习n本书，每本书都有自己的知识[i]。 不幸的是，他学的越久，得到的就越少。</span><br><span class="line">   这意味着，如果他从l到r读书，他将获得a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]（L 是[l，r]的长度，等于r-l + 1）。 现在Ryuji有q问题.</span><br><span class="line">   你应该回答他： </span><br><span class="line">    1。如果问题类型是1，你应该回答他读书后会得到多少知识[l，r]</span><br><span class="line">    2.如果问题类型是2，Ryuji会改变 ith书对新价值的认识。</span><br><span class="line"> </span><br><span class="line">输入</span><br><span class="line">  第一行包含两个整数n和q（n，q &lt;= 100000）。 </span><br><span class="line">  下一行包含n个整数表示a [i]（a [i] &lt;= 1e9） </span><br><span class="line">  然后在下一个q行中每行包含三个整数a，b，c， </span><br><span class="line">  如果a = 1，则表示问题类型为1，b ，c代表[l，r]。 </span><br><span class="line">  如果a = 2，则表示问题类型为2，b，c表示Ryuji将bth book的知识更改为c。</span><br></pre></td></tr></table></figure><p>这里我维护的两个数组。一个是输入的数组x，另一个是数组z。<br>定义数组<code>z[i] = x[i] * (n-i+1)（i从1开始）</code><br>然后定义两个数组 y 和 shu。其中 y数组用于维护x，shu数组用于维护z。<br>这个解释一下z数组的用途，以及如何维护z数组。<br>题目求的是<code>a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]</code>，如果暴力求解绝对超时。所以有个z数组。<br>用样例来说：<br>输入的 1 2 3 4 5<br>那么 x 数组中就是  1 2 3 4 5<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z 数组中就是 5 8 9 8 5<br>求 1~3 的和。那么如果直接加上 z[1~3] ，那么就是a[1]<em>5 + a[2]</em>4 + a[3]<em>3。但是题目要求的是  a[1]</em>3+a[2]<em>2+a[3]</em>1，也就是减去2倍的(a[1]+a[2]+a[3])。而这个2倍其实就是 区间 （l，r）中r距离尾部的单位值。这里是5 - 3 = 2。<br>上面的例子很容易发现 z 数组的用途，提前预处理了题目要求的<code>a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]</code>。如此一来就可以用0（1）的时间求出要求的值，而不需要遍历。<br>再来看，题目有两种状态一个是区间求和，另一个是修改值。碰到这种题目很容易想到的就是树状数组或者线段树，我这里用的是树状数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int sm = 400000+10;</span><br><span class="line">long long int x[sm];</span><br><span class="line">long long int n, q;</span><br><span class="line">long long int z[sm];// x存n个数，z ai*(n-i) i 从0 开始 </span><br><span class="line">long long int y[sm], shu[sm];// y 求区间和， 树状数组</span><br><span class="line"></span><br><span class="line">long long int lowbit(int x)&#123;</span><br><span class="line">return x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long long find_sum(long long int i, long long zu[])&#123;//区间求和 </span><br><span class="line">long long int ret =0 ;</span><br><span class="line">for(; i&gt;0 ; ret += zu[i], i -= lowbit(i));</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void update(long long int i, long long int val, long long zu[])&#123;//建树, 更新值 </span><br><span class="line">for(;i &lt;= n; zu[i] += val, i += lowbit(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">for(int i =1 ; i&lt;=n; i++)</span><br><span class="line">cin &gt;&gt; x[i];</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">update(i, x[i], y);//建立y，维护x数组</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">z[i] = x[i] * (n-i+1);</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">update(i, z[i], shu);//建立shu，维护z数组</span><br><span class="line"></span><br><span class="line">for(int i=1; i&lt;=q; i++)</span><br><span class="line">&#123;</span><br><span class="line">long long int t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line">if(t == 1)&#123;</span><br><span class="line">long long int l, r, suml, sumr;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">long long int s1 = find_sum(r, shu) - find_sum(l-1, shu);//获得z数组的区间和</span><br><span class="line">long long int s2 = find_sum(r, y) - find_sum(l-1, y);//获取x数组的区间和</span><br><span class="line">cout &lt;&lt; s1 - s2*(n-r) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">if(t == 2)&#123;</span><br><span class="line">long long int new_num, where;</span><br><span class="line">cin &gt;&gt; where &gt;&gt; new_num;//where代表位置，new_num代表值</span><br><span class="line">long long int mid = new_num - x[where]; </span><br><span class="line">update(where, mid, y);//更新y数组</span><br><span class="line">update(where, mid*(n - where + 1), shu);//更新shu数组</span><br><span class="line">x[where] = new_num;//更新x数组中的值</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>！！！！着重强调，如果用我这种方法做的人，一定要用`</code>long long<code></code> ！！！！`<br>本来觉得部分数据不大可以部分不用long long，结果不知道那块就是卡住了死交不过去，wa了四五发都是因为这个。</p><p>ACM本就是逆天而行，死在路上很正常。真的，看到别人大佬一队AK了，我才做了两题，就感觉对不起队友，对不起老师。天赋上的差距没办法，自己还是很菜，再加上最近在搭建服务器，导致算法上面没用心，最后一年了，好好搞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
  </entry>
  
</feed>
