<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lc_love_myh</title>
  
  <subtitle>&lt;b style=&quot;background-color:white;&quot; &gt;往后余生 心底温柔是你，目光所至也是你。&lt;/b&gt;</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-03-18T14:33:16.384Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lc_love_myh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>思科命令</title>
    <link href="http://yoursite.com/2019/03/18/%E6%80%9D%E7%A7%91%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2019/03/18/思科命令/</id>
    <published>2019-03-18T13:43:37.000Z</published>
    <updated>2019-03-18T14:33:16.384Z</updated>
    
    <content type="html"><![CDATA[<p>建立VLAN的命令格式：vlan&lt;vlan_ID&gt; name &lt;vlan_name&gt; 为端口分配VLAN的命令格式为：switchport access vlan&lt;vlan_num&gt; </p><p>配置交换机Catalyst 6500管理IP地址命令格式：Switch-6500&gt; (enable)set interface sc0&lt;ip_addr&gt;&lt;ip_mask&gt;&lt;ip_addr&gt;(broadcast address 广播地址)。<br>配置缺省路由命令格式为“Switch-6500&gt; (enable)Set ip route 0.0.0.0 ”。</p><p>路由器分组转发过程中，数据包中包含目的主机网络地址（IP地址）和下一跳路由物理地址（MAC地址），也就是说数据分组通过每一个路由器转发时，分组中目的MAC地址是变化的，但目的网络地址始终不变。</p><p>弹性分组环（RPR）中每一个节点都执行SRP公平算法，与FDDI一样使用双环结构。传统的FDDI环中，当源结点向目的结点成功发送一个数据帧之后，这个数据帧要由源结点从环中回收，而RPR环限制数据帧只在源结点与目的结点之间的光纤段上传输，当源结点成功发送一个数据帧之后，这个数据帧由目的结点从环中回收。RPR采用自愈环设计思路，能在50ms时间内，隔离出现故障的结点和光纤段，提供SDH级的快速保护和恢复。</p><p>提供用户访问Internet所需要的路由服务的是核心交换层。汇聚层的基本功能是：（1）汇聚接入层的用户流量，进行数据分组传输的汇聚、转发和交换。（2）根据接入层的用户流量，进行本地路由、过滤、流量均衡、QoS优先级管理，以及安全控制、IP地址转换、流量整形等处理。（3）根据处理结果把用户流量转发到核心交换层或本地进行路由处理。</p><p>无源光纤网PON，按照ITU标准可分为两部分：（1）OC3，155.520 Mbps 的对称业务。（2)上行OC3，155.520 Mbps，下行OC12,622.080 Mbps的不对称业务。</p><p>光纤传输信号可通过很长的距离，无需中继。例如T1线路的中继距离为1.7 km，典型的CATV网络要求在同轴电缆上每隔500 ~ 700 m加一个放大器，而光纤传输系统的中继距离可达100 km 以上。Cable Modom使计算机发出的数据信号于电缆传输的射频信号实现相互之间的转换，并将信道分为上行信道和下行信道。ASDL提供的非对称宽带特性，上行速率在64 kbps~640 kbps，下行速率在500 kbps~ 7 Mbps。802.11b定义了使用直序扩频技术，传输速率为1 Mbps、2 Mbps、</p><p>评价高性能存储技术的指标主要是I/O速度和磁盘存储容量。集群(Cluster)技术是向一组独立的计算机提供高速通信线路，组成一个共享数据存储空间的服务器系统，如果一台主机出现故障，它所运行的程序将转移到其他主机。因此集群计算机技术可以大大提高服务器的可靠性、可用性和容灾能力。热插拔功能允许用户在不切断电源的情况下，更换存在故障的硬盘、板卡等部件，从而提高系统应对突发事件的能力。服务器总体性能不仅仅取决于CPU数量，而且与CPU主频、系统内存、网络速度等都有关系。</p><p>全双工端口带宽的计算方法是：端口数×端口速率×2。即24×100mbps×2+2×1000mbps×2=8.8Gbps</p><p>如果系统高可靠性达到99.9%，那么每年的停机时间≤8.8小时;系统高可靠性达到99.99%,那么每年的停机时间≤53分钟;如果系统高可靠性达到99.999%,那么每年的停机时间≤5分钟。</p><p>：由IP地址块59.67.159.125/11可知，网络号为前11位，则子网掩码为前11位全1、后21位为0，即为11111111 11100000 00000000 00000000，点分十进制为255.224.0.0。</p><p>用IPV6地址表示需要注意：在使用零压缩法时，不能把一个位段内部的有效0也压缩掉；双冒号：：在一个地址中只能出现一次；在得到一个一个IPV6地址时，经常会遇到如何确定双冒号：：之间被压缩0的位数的问题；IPV6不支持子网掩码，它只支持前缀长度表示法。本题中D选项已经有8个位段，没有全0位段压缩，不应该使用双冒号：：。</p><p>外部网关协议是不同的自治系统的路由器之间交换路由信息的协议。一个BGP发言人与其他自治系统中的BGP发言人要交换路由信息就要先建立TCP连接，然后在此连接上交换BGP报文以建立BGP会话。BGP协议交换路由信息的结点数是以自治系统数为单位的，所以不会小于自治系统数。BGP4采用路由向量路由协议。</p><p>为了适应大规模的网络，并使更新过程收敛的很快，OSPF协议将一个自治系统划分为若干个更小的范围，每个范围叫做区域。每个区域有一个32位的区域标识符（点分十进制表示），在一个区域内的路由器数目不超过200个。划分区域的好处是将利用洪泛法交换链路状态信息的范围局限在每一个区域内，而不是整个自治系统，因此区域内部路由器只知道本区域的完整网络拓扑，而不知道其他区域的网络拓扑情况。</p><p>结点通过双绞线连接到一个集线器上，当其中一个结点发送数据的时候，任何一个结点都可以收到消息，所以链路中串接集线器可以监听该链路中的数据包。由于集线器工作在物理层，所以每次只能有一个结点能够发送数据，而其他的结点都处于接收数据的状态。连接到一个集线器的所有结点共享一个冲突域，这些结点执行CSMA/CD介质访问控制方法。</p><p>双绞线扭绞的目的是使对外的电磁辐射和遭受到外部的电磁干扰减少到最小。嵌入式安装插座是用来连接双绞线的，多介质信息插座用来连接铜缆和光纤。新建筑通常采用嵌入式（暗装）信息插座，现有建筑则采用表面安装（明装）的信息插座。建筑群布线子系统可以是架空布线、巷道布线、直埋布线、地下管道布线。综上可知，B项中描述错误。</p><p>交换机具有三种交换模式：快速转发直通式，交换机接收到帧的前14个字节时就立刻转发数据帧。碎片丢弃式，它缓存每个帧的前64个字节，检查冲突过滤碎片。存储转发式，转发之前将整个帧读取到内存里。</p><p>VLAN name用32个字符表示，可以是字母和数字。不给定名字的VLAN，系统自动按缺省的VLAN名（VLAN00×××）建立，“×××”是VLAN ID。题目中ID是999，因此缺省VLAN名是VLAN00999。</p><p>在全局配置模式下进入虚拟终端配置模式： Router (config)# line vty 0 15 Router (configline)#</p><p>全局配置模式： Router (config)#accesslist &lt;accesslist_num&gt;&lt;deny|permit&gt;&lt;ip_addr&gt;&lt;wildcard_mask&gt; log 配置应用接口： Router (config)#interface &lt;接口名&gt; Router (config-if)#ip accessgroup &lt;accesslist_num&gt;&lt;in|out&gt; 此外，IP标准访问控制列表对应的表号范围是：1~99、1300~1999；IP扩展访问控制列表对应的表号范围是：100~199、2000~2699；wildcard_mask为通配符，也即子网掩码的反码。 标准访问控制列表只能检查数据包的源地址，但是扩展访问控制列表可以检查数据包的源地址、目的地址和端口号。题目中要求是标准访问控制列表，所以C项错。B项中应该是子网掩码的反码，所以B错。D中kouter<config-if>应在kouter<config>下一层。</config></config-if></p><p>IEEE 802.11最初定义的三个物理层包括了两个扩频技术和一个红外传播规范，无线传输的频道定义在2.4GHz的ISM波段内。IEEE 802.11无线标准定义的传输速率是1Mbps和2Mbps，可以使用FHSS（跳频扩频）和DSSS（自序扩频）技术。为了解决“隐藏结点”问题，IEEE 802.11在MAC层上引入了一个新的RTS/CTS选项。综上所述，选项A错误。</p><p>IEEE 802.11b的运作模式分为点对点模式和基本模式。点对点模式是指无线网卡和无线网卡之间的通信方式。这种连接方式对于小型的网络来说是非常方便的，它最多可以允许256台PC连接。基本模式是指无线网络规模扩充或无线和有线网络并存时的通信方式，这也是IEEE 802.11b现在最普及的方式。接入点负责频段管理及漫游等指挥工作，一个接入点最多可连接1024台PC。综上所述，D选项错误。</p><p>第一次配置无线接入点一般采用本地配置方式，此时因为没有连接到DHCP服务器而无法获得IP地址，它的默认IP地址是10.0.0.1，并成为小型DHCP服务器可为覆盖范围内的PC以及连接到接入点的以太网端口的PC分配IP地址实现无线连接，此时不配置SSID或SSID配置为tsunami。在PC的浏览器中输入接入点的IP地址和密码后，出现接入点汇总状态页面。</p><p>动态更新允许DNS客户端在发生更改的任何时候，都能使用DNS服务器注册和动态地更新其资源记录，它减少了对区域记录进行手动管理的需要，适用于频繁改变位置并使用DHCP获取IP地址的DNS客户端。</p><p>“ipconfig /release”命令可以释放已获得的地址租约，使其IP Address和Subnet Mask均为0.0.0.0。</p><p>网站性能选项中，带宽限制选项限制该网站的可使用带宽，以控制该站点允许的流量。网站性能选项中，网站连接选项可设置客户端Web连接数量B中没有说明限制客户端的什么功能，而且并不是通过访问列表限制的，而是通过微调框。建立Web站点时，必须为每个站点指定一个主目录，也可以是虚拟的子目录，所以C错。设置Web站点时，只有设置了默认页面，访问时才会直接打开default.html等设置的默认页面。如果没有设置默认页面，访问站点时需要提供首页内容的文件名，所以D错。综上选项A正确。</p><p>网站性能选项中，带宽限制选项限制该网站的可使用带宽，以控制该站点允许的流量。网站性能选项中，网站连接选项可设置客户端Web连接数量B中没有说明限制客户端的什么功能，而且并不是通过访问列表限制的，而是通过微调框。建立Web站点时，必须为每个站点指定一个主目录，也可以是虚拟的子目录，所以C错。设置Web站点时，只有设置了默认页面，访问时才会直接打开default.html等设置的默认页面。如果没有设置默认页面，访问站点时需要提供首页内容的文件名，所以D错。综上选项A正确。</p><p>防火墙的访问模式有非特权模式、特权模式、配置模式和监视模式四种，其中监视模式下可以进行操作系统映像更新、口令恢复等操作。因此C选项符合要求。</p><p>可信计算机系统评估准则将计算机系统的安全可信度从低到高分为四类，共七个级别：D级，最小保护，该级的计算机系统除了物理上的安全设施外没有任何安全措施，任何人只要启动系统就可以访问系统的资源和数据；C1级，自主保护类，具有自主访问控制机制，用户登录时需要进行身份鉴别；C2级，自主保护类，具有审计和验证机制；B1级，强制安全保护类，引入强制访问控制机制，能够对主体和客体的安全标记进行管理；B2级，结构保护，要求计算机系统所有的对象都加标签，而且给设备分配单个或多个安全级别；B3级，具有硬件支持的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;建立VLAN的命令格式：vlan&amp;lt;vlan_ID&amp;gt; name &amp;lt;vlan_name&amp;gt; 为端口分配VLAN的命令格式为：switchport access vlan&amp;lt;vlan_num&amp;gt; &lt;/p&gt;
&lt;p&gt;配置交换机Catalyst 6500管
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Git</title>
    <link href="http://yoursite.com/2018/09/25/Git/"/>
    <id>http://yoursite.com/2018/09/25/Git/</id>
    <published>2018-09-25T07:47:09.511Z</published>
    <updated>2018-09-25T08:15:03.585Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Git的起源"><a href="#Git的起源" class="headerlink" title="Git的起源"></a>Git的起源</h2><p>linux内核源代码一直在 bitkeep 上托管，但是bitkeep 突然收回对linux的授权，因为bitkeep说开源社区中的一个成员对bitkeep的协议进行逆向工程。因此，自己写了git。</p><p><code>SVN</code>-&gt;<code>集中式版本控制系统</code>：只有中央服务器有版本的数据库，其他电脑没有，所有版本控制都要通过中央服务器进行交互。（要是中央服务器当机离线，则就出大问题了）<br><code>git</code>-&gt;<code>分布式版本控制</code>：每一个台电脑上面都有一个版本的database。由于每台电脑都有数据库，所以大多数操作可以离线进行。支持比较多的控制模式-也可以安装一个中央服务器。  </p><ol><li>git每个版本存储的都是当前版本的所有内容，不需要与其他版本进行差异比较之后再进行文件的合成。  </li><li>git可以离线完成大部分操作。  </li><li>git有更优雅的分支和合并实现。  </li><li>git有更强大撤销修改和修改版本历史的能力。  </li><li>git速度更快，效率更高。</li></ol><h2 id="为什么学习git："><a href="#为什么学习git：" class="headerlink" title="为什么学习git："></a>为什么学习git：</h2><p>研究GitHub<br>越来越多的公司通过git调整</p><h2 id="git如何存储文件，历史记录："><a href="#git如何存储文件，历史记录：" class="headerlink" title="git如何存储文件，历史记录："></a>git如何存储文件，历史记录：</h2><p><code>git通过40个16进制字符的SHA-1 Hash 来唯一标识对象</code> 例如：     e98757d0598ab6eeaf1df0d87dd00826048bd80b<br>git有<code>四种对象</code>：  </p><pre><code>1. blob：文本文件或者二进制文件或者链接文件  2. tree：目录  3. commit：历史提交      4. tag：指向固定的历史提交  (-&gt;）指向的意思  </code></pre><p><code>tag</code>  <code>-&gt;</code>  <code>commit</code>  <code>-&gt;</code>  <code>tree</code>  <code>-&gt;</code>  <code>多个tree对象或者多个blob对象</code><br>对工作区的这些内容进行SHA-1 Hash 之后，就可以得到唯一标识。<br>如果两个文件内容是相同的，则他们指向同一个blob对象。而文件名这种信息会存在tree对象中。  </p><p>有了git对象之后，需要git仓库去存储对象，和操作对象。<br>git init   git clone  两种方法获取仓库。<br><img src="https://i.imgur.com/InyuRGB.png" alt=""><br>cd 到.git 文件夹中 （GIT_DIR!）-&gt; git工作区间     用 ls 查看git需要的文件<br>再退出来<br>用init方法创建一个裸仓库。然后查看仓库中有什么。<br>git init –bare git_bare_repo<br>通过–bare 方法创建一个 git_bare_repo 文件夹。这个文件夹只有git工作需要的文件。<br>git clone 克隆出一个仓库 一般来说需要远程裸仓库的地址<br>git clone git_bare_repo/ git_clone_repo （复制之前创建的本地仓库，并创建在文件夹  git_clone_repo中）  </p><h2 id="git分为三个区域："><a href="#git分为三个区域：" class="headerlink" title="git分为三个区域："></a>git分为三个区域：</h2><blockquote><ol><li>working directory（工作区，日常编辑代码的地方）  </li><li>staging area（暂存区，工作区与历史提交的缓存，维护的是虚拟的树形结构）  </li><li>history repository（历史仓库）   </li></ol></blockquote><p>（1）工作区  添加文件到  暂存区  提交整个暂存区的状态   历史纪录区<br>（2）历史记录区   检出文件到   暂存区和工作区<br>大部分时间我们都在做第一个工作<br>对应的就是 <code>git add（到暂存区）</code>  和  <code>git commit（到历史记录区）</code><br>    git status（查看工作区和暂存区的区别，确保提交是我们所需要的）<br>    git rm（从暂存区删掉我们不需要的东西）<br>    git mv（移动文件）<br>    gitignore（确保不想添加到暂存区和历史纪录区的文件不被添加）  </p><blockquote><p>先 创建  a b 两个文件<br>    touch a<br>    touch b<br>然后添加到暂存区<br>    git add a b<br>查看一下<br>    git status<br>提交到历史纪录<br>    git commit -m “initial commit” （加入一个提交的历史信息）<br>修改一下a<br>    vim a（加入一些文字信息）<br>再看一下 git status<br>    提示 a 修改了 但是没有提交到暂存区<br>提交a到暂存区中<br>    git add a<br>再status 看一下<br>    git status<br>再提交 a 就行<br>    git commit -m “modify a”<br>删除a，会删除 工作区 ，暂存区中的a<br>    git rm a<br>还原一下a<br>    git checkout a<br>如何只删除暂存区的文件，不删除工作目录的文件<br>    git rm –cached a  </p></blockquote><p><hr><br><img src="https://i.imgur.com/tAGY09M.png" alt=""></p><blockquote><p>git status 看看就会提示有一个没有跟踪的文件<br>git mv a c （将a名字命名为c）（这个命令是一系列操作的总和）<br>    如果直接再工作区修改文件名<br>        mv a c （工作目录直接 修改名字）<br>    再 git status<br>        提示 a 被删除了 ， 有个c 的文件没有被跟踪<br>    再 git add a c（添加a c 到文件中）<br>        提示文件 a 被更改为 c<br>git add -A 添加整个工作区都暂存区<br>git .gitignore    在顶层目录下创建一个.gitignore文件<br><em>.[oa]通过通配符提示git，以 o 和 a 结尾的文件不要添加到git仓库中<br>例如：加入了  </em>.~, *.pyc ， 但是如果以.pyc为后缀的文件，有一个要加到仓库，这个时候就要在文件名上加  !test.pyc，告诉 test.pyc 不要被忽略。如果需要ingore文件名第一个字符就是“！”，就要加上”\”转义字符。<br>**/res 匹配 res，所有路径下的res，任何文件夹下的res。<br>git add .gitignore<br>git commit -m “add ingore”//添加到仓库中，用于整个仓库的共享  </p></blockquote><h2 id="git暂存区"><a href="#git暂存区" class="headerlink" title="git暂存区"></a>git暂存区</h2><blockquote><p>.git/objects 对象库<br>当执行 git add 命令时，.git 目录下多了一个index文件，整个index文件就是暂存区，每条索引有个的四十位的十六进制的SHA-1 Hash，文件模式，权限，时间戳等。每个索引都对应对象库中的某个对象对应。<br>除了索引之外，还维护了提前计算好的tree对象的内容。当我们提交的时候，可以直接通过提前计算好的，直接生成索引等内容。<br>当文件名更改时，根据文件内容所计算出来的SHA-1 也不会变。<br>暂存区索引每次更新的时候，都会重新计算index 和暂存区的内容。  </p></blockquote><h2 id="git本地分支与合并"><a href="#git本地分支与合并" class="headerlink" title="git本地分支与合并"></a>git本地分支与合并</h2><pre><code>git branch（创建分支)  git tag（给commit做标记）  git checkout（分支之间的切换）  git stash（切换分支之前保存本地修改）  git merge（合并分支）</code></pre><blockquote><p>例如：git branch test  新建分支 test。但是只是新建，要切换过去才能使用<br>git checkout test 切换到test分支。<br>test分支做的修改，不会影响到master分区的工作。也就是说分支互不影响。</p></blockquote><pre><code>tag 分 轻量级 本地引用  和 annotady 带注解的tag通过 git log --online --decorate --graph -all 查看hash值，以及提交，查看历史示意图  git tag &quot;v0&quot; a1abda30   （a1abda30 就是上述命令查出的hash值）  git tag -a &quot;INITAL_COMMIT&quot; a1abda30   标注tag，提示输出tag信息。  git tag 查看以有的设置过的tag  git config --global alias.lol &quot;log --oneline --decorate --graph --all&quot; 用 git lol 代替 log --oneline --decorate --graph --all  git show v0 （v0是一个tag的名字）  </code></pre><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p>提供个人或者企业的代码托管。可以查看其他的开源项目托管。<br><img src="https://i.imgur.com/qDXMcAv.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Git的起源&quot;&gt;&lt;a href=&quot;#Git的起源&quot; class=&quot;headerlink&quot; title=&quot;Git的起源&quot;&gt;&lt;/a&gt;Git的起源&lt;/h2&gt;&lt;p&gt;linux内核源代码一直在 bitkeep 上托管，但是bitkeep 突然收回对linux的授权，因为bi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>ACM-ICPC 2018 徐州赛区网络预赛</title>
    <link href="http://yoursite.com/2018/09/25/ACM-Icpc-%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
    <id>http://yoursite.com/2018/09/25/ACM-Icpc-徐州网络赛/</id>
    <published>2018-09-25T05:38:47.873Z</published>
    <updated>2018-09-25T06:54:20.219Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time Limit: 1000ms       Memory Limit: 262144KB</span><br></pre></td></tr></table></figure><h3 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h3><p> Mur loves hash algorithm, and he sometimes encrypt another one’s name, and call him with that encrypted value. For instance, he calls Kimura KMR, and calls Suzuki YJSNPI. One day he read a book about SHA-256, which can transit a string into just 256 bits. Mur thought that is really cool, and he came up with a new algorithm to do the similar work. The algorithm works this way: first we choose a single letter L as the seed, and for the input(you can regard the input as a string s, s[i] represents the i th character in the string)we calculates the value(|(int) L – s[i]|), and write down the number(keeping leading zero. The length of each answer equals to 2 because the string only contains letters and numbers). Numbers writes from left to right, finally transfer all digits into a single integer(without leading zero(s)). For instance, if we choose ‘z’ as the seed, the string “oMl” becomes “11 45 14”.  It’s easy to find out that the algorithm cannot transfer any input string into the same length. Though in despair, Mur still wants to know the length of the answer the algorithm produces. Due to the silliness of Mur, he can even not figure out this, so you are assigned with the work to calculate the answer. </p><h3 id="Input"><a href="#Input" class="headerlink" title="Input"></a>Input</h3><p> First line a integer T, the number of test cases(T &lt;= 10)  For each test case:  First line contains a integer N and a character z, (N &lt;= 1000000)  Second line contains a string with length N. Problem makes sure that all characters referred in the problem are only letters. </p><h3 id="Output"><a href="#Output" class="headerlink" title="Output"></a>Output</h3><p> A single number which gives the answer. </p><h3 id="Sample-input"><a href="#Sample-input" class="headerlink" title="Sample input"></a>Sample input</h3><p>2<br>3 z<br>oMl<br>6 Y<br>YJSNPI </p><h3 id="Sample-output"><a href="#Sample-output" class="headerlink" title="Sample output"></a>Sample output</h3><p>6<br>10 </p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mur喜欢哈希算法，他有时加密另一个人的名字，然后用加密值给他打电话。例如，他打电</span><br><span class="line">话给Kimura KMR，并打电话给Suzuki YJSNPI。有一天，他读了一本关于SHA-256的</span><br><span class="line">书，它可以将字符串转换成256位。 Mur认为这很酷，他想出了一个新的算法来完成类似的</span><br><span class="line">工作。算法以这种方式工作：首先我们选择单个字母L作为种子，对于输入（您可以将输入</span><br><span class="line">视为字符串s，s [i]表示字符串中的第i个字符）我们计算值（ |（int）L - s [i] </span><br><span class="line">|），并记下数字（保持前导零。每个答案的长度等于2，因为字符串只包含字母和数字）。</span><br><span class="line">数字从左到右写入，最后将所有数字转换为单个整数（不带前导零）。例如，如果我们选</span><br><span class="line">择&apos;z&apos;作为种子，则字符串“oMl”变为“11 45 14”。很容易发现该算法无法将任何输入字</span><br><span class="line">符串转换为相同的长度。虽然在绝望中，Mur仍然想知道算法产生的答案的长度。由于穆尔</span><br><span class="line">的愚蠢，他甚至无法弄清楚这一点，所以你被分配了计算答案的工作。</span><br></pre></td></tr></table></figure><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p> 第一行是整数T，测试用例数（T &lt;= 10）对于每个测试用例：第一行包含整数N和字符z，（N &lt;= 1000000）第二行包含长度为N的字符串。确保问题中提到的所有字符都只是字母。</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p> 一个数字给出了答案。</p><h3 id="样本输入"><a href="#样本输入" class="headerlink" title="样本输入"></a>样本输入</h3><p>2<br>3 z<br>oMl<br>6 Y<br>YJSNPI</p><h3 id="样本输出"><a href="#样本输出" class="headerlink" title="样本输出"></a>样本输出</h3><p>6<br>10</p><blockquote><p>水题，但是特别坑。<br>这里先讲第二个样例： 减出来的结果是  00  15  06  11  09  16<br>这样去除前面的0，得出来的结果就是1506110916，这10位<br>如果全部都是0呢 比如 <br>4 z<br>zzzz<br> 这个时候就要输出 1 而不是 0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line">while(T--)&#123;</span><br><span class="line">int sum = 0;</span><br><span class="line">int len;</span><br><span class="line">char Seed, s;</span><br><span class="line">cin &gt;&gt; len &gt;&gt; Seed;</span><br><span class="line">        bool flag = false, fir = true;</span><br><span class="line">for(int i=0; i&lt;len; i++)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">int t = Seed - s;</span><br><span class="line">t = abs(t);</span><br><span class="line">            if(t != 0)</span><br><span class="line">                flag = true;</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">                if(fir)&#123;</span><br><span class="line">                    if(t &gt;= 1 &amp;&amp; t &lt;= 9)</span><br><span class="line">                        sum += 1;</span><br><span class="line">                    else </span><br><span class="line">                        sum += 2;</span><br><span class="line">                    fir = false;</span><br><span class="line">                &#125;</span><br><span class="line">                else sum += 2;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">        if(flag == false)</span><br><span class="line">            sum = 1;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Description-1"><a href="#Description-1" class="headerlink" title="Description"></a>Description</h3><p> Ryuji is not a good student, and he doesn’t want to study. But there are n books he should learn, each book has its knowledge a[i]. Unfortunately, the longer he learns, the fewer he gets. That means, if he reads books from l to r, he will get a[l]<em>L+a[l+1]</em>(L-1)+…+a[r1]*2+a[r] (L is the length of [l, r] that equals to r-l+1).  Now Ryuji has q questions, you should answer him: 1. If the question type is 1, you should answer how much knowledge he will get after he reads books [l, r] 2. If the question type is 2, Ryuji will change the ith book’s knowledge to a new value. </p><h3 id="Input-1"><a href="#Input-1" class="headerlink" title="Input"></a>Input</h3><p> First line contains two integers n and q (n, q &lt;= 100000).  The next line contains n integers represent a<a href="a[i] &lt;= 1e9">i</a>  Then in next q line each line contains three integers a, b, c, if a = 1, it means question type is 1, and b, c represents [l, r]. if a = 2, it means question type is 2, and b, c means Ryuji changes the bth book’ knowledge to c. </p><h3 id="Output-1"><a href="#Output-1" class="headerlink" title="Output"></a>Output</h3><p> For each question, output one line with one integer represent the answer.<br>Sample Input<br>5 3<br>1 2 3 4 5<br>1 1 3<br>2 5 0<br>1 4 5 </p><h3 id="Sample-Output"><a href="#Sample-Output" class="headerlink" title="Sample Output"></a>Sample Output</h3><p>10<br>8 </p><h2 id="翻译-1"><a href="#翻译-1" class="headerlink" title="翻译"></a>翻译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  Ryuji不是一个好学生，他不想学习。 但他应该学习n本书，每本书都有自己的知识[i]。 不幸的是，他学的越久，得到的就越少。</span><br><span class="line">   这意味着，如果他从l到r读书，他将获得a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]（L 是[l，r]的长度，等于r-l + 1）。 现在Ryuji有q问题.</span><br><span class="line">   你应该回答他： </span><br><span class="line">    1。如果问题类型是1，你应该回答他读书后会得到多少知识[l，r]</span><br><span class="line">    2.如果问题类型是2，Ryuji会改变 ith书对新价值的认识。</span><br><span class="line"> </span><br><span class="line">输入</span><br><span class="line">  第一行包含两个整数n和q（n，q &lt;= 100000）。 </span><br><span class="line">  下一行包含n个整数表示a [i]（a [i] &lt;= 1e9） </span><br><span class="line">  然后在下一个q行中每行包含三个整数a，b，c， </span><br><span class="line">  如果a = 1，则表示问题类型为1，b ，c代表[l，r]。 </span><br><span class="line">  如果a = 2，则表示问题类型为2，b，c表示Ryuji将bth book的知识更改为c。</span><br></pre></td></tr></table></figure><p>这里我维护的两个数组。一个是输入的数组x，另一个是数组z。<br>定义数组<code>z[i] = x[i] * (n-i+1)（i从1开始）</code><br>然后定义两个数组 y 和 shu。其中 y数组用于维护x，shu数组用于维护z。<br>这个解释一下z数组的用途，以及如何维护z数组。<br>题目求的是<code>a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]</code>，如果暴力求解绝对超时。所以有个z数组。<br>用样例来说：<br>输入的 1 2 3 4 5<br>那么 x 数组中就是  1 2 3 4 5<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z 数组中就是 5 8 9 8 5<br>求 1~3 的和。那么如果直接加上 z[1~3] ，那么就是a[1]<em>5 + a[2]</em>4 + a[3]<em>3。但是题目要求的是  a[1]</em>3+a[2]<em>2+a[3]</em>1，也就是减去2倍的(a[1]+a[2]+a[3])。而这个2倍其实就是 区间 （l，r）中r距离尾部的单位值。这里是5 - 3 = 2。<br>上面的例子很容易发现 z 数组的用途，提前预处理了题目要求的<code>a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]</code>。如此一来就可以用0（1）的时间求出要求的值，而不需要遍历。<br>再来看，题目有两种状态一个是区间求和，另一个是修改值。碰到这种题目很容易想到的就是树状数组或者线段树，我这里用的是树状数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int sm = 400000+10;</span><br><span class="line">long long int x[sm];</span><br><span class="line">long long int n, q;</span><br><span class="line">long long int z[sm];// x存n个数，z ai*(n-i) i 从0 开始 </span><br><span class="line">long long int y[sm], shu[sm];// y 求区间和， 树状数组</span><br><span class="line"></span><br><span class="line">long long int lowbit(int x)&#123;</span><br><span class="line">return x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long long find_sum(long long int i, long long zu[])&#123;//区间求和 </span><br><span class="line">long long int ret =0 ;</span><br><span class="line">for(; i&gt;0 ; ret += zu[i], i -= lowbit(i));</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void update(long long int i, long long int val, long long zu[])&#123;//建树, 更新值 </span><br><span class="line">for(;i &lt;= n; zu[i] += val, i += lowbit(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">for(int i =1 ; i&lt;=n; i++)</span><br><span class="line">cin &gt;&gt; x[i];</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">update(i, x[i], y);//建立y，维护x数组</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">z[i] = x[i] * (n-i+1);</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">update(i, z[i], shu);//建立shu，维护z数组</span><br><span class="line"></span><br><span class="line">for(int i=1; i&lt;=q; i++)</span><br><span class="line">&#123;</span><br><span class="line">long long int t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line">if(t == 1)&#123;</span><br><span class="line">long long int l, r, suml, sumr;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">long long int s1 = find_sum(r, shu) - find_sum(l-1, shu);//获得z数组的区间和</span><br><span class="line">long long int s2 = find_sum(r, y) - find_sum(l-1, y);//获取x数组的区间和</span><br><span class="line">cout &lt;&lt; s1 - s2*(n-r) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">if(t == 2)&#123;</span><br><span class="line">long long int new_num, where;</span><br><span class="line">cin &gt;&gt; where &gt;&gt; new_num;//where代表位置，new_num代表值</span><br><span class="line">long long int mid = new_num - x[where]; </span><br><span class="line">update(where, mid, y);//更新y数组</span><br><span class="line">update(where, mid*(n - where + 1), shu);//更新shu数组</span><br><span class="line">x[where] = new_num;//更新x数组中的值</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>！！！！着重强调，如果用我这种方法做的人，一定要用`</code>long long<code></code> ！！！！`<br>本来觉得部分数据不大可以部分不用long long，结果不知道那块就是卡住了死交不过去，wa了四五发都是因为这个。</p><p>ACM本就是逆天而行，死在路上很正常。真的，看到别人大佬一队AK了，我才做了两题，就感觉对不起队友，对不起老师。天赋上的差距没办法，自己还是很菜，再加上最近在搭建服务器，导致算法上面没用心，最后一年了，好好搞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cocos 2d游戏——I wanna save the princess</title>
    <link href="http://yoursite.com/2018/09/25/I%20wanna%20save%20the%20princess/"/>
    <id>http://yoursite.com/2018/09/25/I wanna save the princess/</id>
    <published>2018-09-25T03:13:41.577Z</published>
    <updated>2018-09-27T02:14:04.750Z</updated>
    
    <content type="html"><![CDATA[<h2 style="text-align: center;">基于cocos-2dx的游戏制作——I wanna save the princess</h2><p><b>在进行了两周的cocos学习之后，可以开始进行游戏的创作了。<br>I wanna主要复杂的地方在于地图的设计以及逻辑实现。下面依次进行介绍。（使用c++）</b></p><p></p><h3 style="text-align: left">一．    瓦片地图——tile map</h3><p></p><h4 style="text-align: left">1.    地图整体的大小。</h4><p>配合电脑可以全屏显示，设置为1080X1920的大小。<br><img src="https://i.imgur.com/nxXJgh7.png" alt=""></p><h4 style="text-align: left">2.    图块的大小。</h4><br><img src="https://i.imgur.com/PIXpNM7.png" alt=""><br>使用Tile map制作地图，因为它非常方便，可以将图片素材直接放到图块中，并且大小可以随意调节。<br><img src="https://i.imgur.com/XM4Csd9.png" alt=""><br><br><br><br>比如：所有的地图图块设置为30X30像素，因此普通的土块和草地都是30X30的大小。<br><img src="https://i.imgur.com/ApNK9MW.png" alt=""><br><br>但是在下面的场景中，因为水是直接在tile map中显示的，所以设置为了1920X900的大小。<br><img src="https://i.imgur.com/wUayzYq.png" alt=""><br><br><br><h4 style="text-align: left">3.    图层的设置。</h4><p>在这个界面中，可以新建多个图层，将不同属性的图块放入。<br><img src="https://i.imgur.com/yWCTAQL.png" alt=""></p><p>比如：土块和刺是分开的两个图层。<br><img src="https://i.imgur.com/ZdfvPzJ.png" alt=""></p><p><img src="https://i.imgur.com/XNNeWdU.png" alt=""><br>每一个形状的刺分别的一个图层。<br>向上的刺。<br><img src="https://i.imgur.com/F1SWGPV.png" alt=""></p><p>向左的刺。<br><img src="https://i.imgur.com/9ExyVbC.png" alt=""></p><p>隐藏的刺与可以触发的刺也是不同的图层。<br>地图上直接可见的，向上的刺。<br><img src="https://i.imgur.com/c439TCn.png" alt=""><br>并非直接可见，需要触发条件的，向上的刺。<br><img src="https://i.imgur.com/ADV21xM.png" alt=""></p><p>在图层的设置中，可以将同一属性的图层用一个新的图层覆盖，并且设置不可穿透的属性，这样在导入图层的时候会比较方便。<br><img src="https://i.imgur.com/P0Z1Y5h.png" alt=""><br>在所有不可穿透的图层中，覆盖了一层红色图层，在vs中导入的同时，设置为不可穿透。<br><img src="https://i.imgur.com/DSlwma2.png" alt=""><br>（不可穿透是利用下文中掩码的作用。）</p><h4 style="text-align: left">4.    人物图层。</h4><p>在建立图层的时候，选择添加对象层，然后选择建立矩形，在地图上的任一个地方画出任意大小的矩形，代表人物。<br><img src="https://i.imgur.com/tsLqFmW.png" alt=""><br>（相应操作在图上用红色方框表示。）</p><h4 style="text-align: left">5.    特殊图层。</h4><p>因为I wanna游戏的特殊，经常有不同的隐藏刺。这个部分首先需要在不同的图层中实现，然后需要一个对应的触发图层。</p><p>观察红色方框中图层的顺序，现在的位置是游戏地图中正常图层的位置，即土块将隐藏刺遮住了。<br><img src="https://i.imgur.com/2GKSLCB.png" alt=""></p><p>调整顺序后可以看到隐藏刺。<br><img src="https://i.imgur.com/zQZWbdh.png" alt=""></p><p>地图中红色图层的作用是，判断人物当前的位置x坐标是否与此图层中的某一个相同，相同则触发刺向上飞的事件。<br><img src="https://i.imgur.com/yf5xcJK.png" alt=""></p><p>这个触发图层的作用是，在地图中，人物在触碰到这个图层的同时，触发对应tag中的事件，比如让刺飞出，或是在踩到触发图层时冒出。</p><p><img src="https://i.imgur.com/gGIJNJK.png" alt=""><br>导入的图层为上一张图片中的yincang图层，设置tag为4。<br><img src="https://i.imgur.com/8UA4TaN.png" alt=""></p><p>人物的tag为1，当两个物体的tag分别为1和4的时候，触发事件。<br><img src="https://i.imgur.com/Tjxnvns.png" alt=""></p><p>在导入隐藏刺的同时设置冒出的移动，当人物与刺所在的图块接触，刺冒出。<br><img src="https://i.imgur.com/LSQgR0s.png" alt=""></p><p>触发刺飞出的事件。<br><img src="https://i.imgur.com/cUsSdHQ.png" alt=""></p><p></p><h3 style="text-align: left">二．    物理引擎</h3><p></p><h4 style="text-align: left">1．    建立物理世界。</h4><br><img src="https://i.imgur.com/I2FgNHO.png" alt=""><br><br><br><br><h4 style="text-align: left">2．    重力的添加以及改变。</h4><p>添加在创建物理世界时写入。<br>在第三个场景的水中，需要更改重力的大小。<br><img src="https://i.imgur.com/U22rqfa.png" alt=""></p><h4 style="text-align: left">3．    添加不同的刚体。</h4><p>普通的刚体，是矩形的。<br><img src="https://i.imgur.com/mHgHJV6.png" alt=""></p><p>因为刺是三角形的，所以需要建立一个数组存储三角形的三个顶点坐标，然后再附给物体，这样就是一个三角形的刚体。<br><img src="https://i.imgur.com/lAvxPE3.png" alt=""></p><h4 style="text-align: left">4．    介绍三种掩码。</h4><p>类别掩码setCategoryBitMask，接触检测掩码setContactTestBitmask，碰撞掩码setCollisionBitmask。<br>分别将两个物体的类别掩码与接触检测掩码进行逻辑与运算，可以判断是否触发接触事件，类似的，可以判断是否穿透或者碰撞。</p><p>人物的三种掩码。<br><img src="https://i.imgur.com/Osfqstw.png" alt=""></p><h4 style="text-align: left">5．    重新开始。</h4><p>将当前场景舍弃，重新生成一个新的场景，进行替换。<br><img src="https://i.imgur.com/X5PN8wP.png" alt=""></p><h4 style="text-align: left">6．    键盘事件。</h4><p>人物可以进行向左前进，向右前进，跳跃这三种动作，在此函数中，按下不同的键实现不同的事件。<br><img src="https://i.imgur.com/HsIWwV6.png" alt=""></p><p><img src="https://i.imgur.com/TUX2A2C.png" alt=""></p><h4 style="text-align: left">7．    标签的添加。</h4><p>在导入图层的时候就分别设置不同的tag，以便于在函数中进行相应的判断。<br><img src="https://i.imgur.com/lSDe7rU.png" alt=""></p><p>人物与刺碰撞，触发游戏结束的事件，在界面中添加游戏结束的图片，并且取消键盘事件，但可以按R键重新开始。（所有的刺tag都为3）<br><img src="https://i.imgur.com/k7Cmekz.png" alt=""></p><p>在最后切换场景时，有一个被隐藏了的触发图层，在人物接触到的同时进行tag的比较，从而可以切换场景。<br><img src="https://i.imgur.com/FONa3EU.png" alt=""><br><img src="https://i.imgur.com/uuU7qTS.png" alt=""><br><img src="https://i.imgur.com/MmH6mhx.png" alt=""></p><h4 style="text-align: left">8．    计时器函数</h4><p>进行场景中物理引擎的手动更新。<br><img src="https://i.imgur.com/lVQVhFL.png" alt=""></p><h4 style="text-align: left">9．    碰撞检测。</h4><p>利用三种掩码进行判断。<br>人物与土块。（人物的掩码在上方，三个都是7）<br><img src="https://i.imgur.com/dCYH27I.png" alt=""><br>（这个图层就是上方介绍过的覆盖图层）<br>进行判断后为不可穿透。</p><p>人物与水。<br><img src="https://i.imgur.com/VYZNULt.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 style=&quot;text-align: center;&quot;&gt;基于cocos-2dx的游戏制作——I wanna save the princess&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;在进行了两周的cocos学习之后，可以开始进行游戏的创作了。&lt;br&gt;I wanna主要复杂的地方在于地图
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/25/hello-world/"/>
    <id>http://yoursite.com/2018/09/25/hello-world/</id>
    <published>2018-09-25T00:51:53.263Z</published>
    <updated>2018-09-25T00:51:53.263Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C#</title>
    <link href="http://yoursite.com/2018/02/18/CSharp/"/>
    <id>http://yoursite.com/2018/02/18/CSharp/</id>
    <published>2018-02-18T11:00:53.000Z</published>
    <updated>2019-02-24T17:52:06.857Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CSharp"><a href="#CSharp" class="headerlink" title="CSharp"></a>CSharp</h1><h2 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h2><h3 id="输入，输出"><a href="#输入，输出" class="headerlink" title="输入，输出"></a>输入，输出</h3><ul><li>输出</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.WriteLine();<span class="comment">//输出</span></span><br></pre></td></tr></table></figure><ul><li>输入</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Console.ReadLine();//输入</span><br></pre></td></tr></table></figure><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><ul><li><p>整型即整数</p></li><li><p>整型可以分为有符号和无符号整行 </p><ul><li><p>有符号整型</p><ul><li>可以表示负数和正数</li></ul><ol><li>字节型    sbyte</li><li>短整型    short </li><li>整型        int</li><li>长整行    long</li></ol></li><li><p>无符号整型</p><ul><li>只能表示大于等于0的数</li></ul><ol><li>字节型    byte</li><li>短整型    ushort</li><li>整型    uint</li><li>长整型    ulong</li></ol></li></ul></li></ul><ul><li>有符号整型</li></ul><table><thead><tr><th style="text-align:center"><strong>整型</strong></th><th style="text-align:center"><strong>关键字</strong></th><th style="text-align:center"><strong>字节数</strong></th><th style="text-align:center">取值范围</th></tr></thead><tbody><tr><td style="text-align:center">字节型</td><td style="text-align:center">sbyte</td><td style="text-align:center">1</td><td style="text-align:center">-128~127</td></tr><tr><td style="text-align:center">短整型</td><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-2^15~2^15-1</td></tr><tr><td style="text-align:center">整型</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2^31~2^31-1</td></tr><tr><td style="text-align:center">长整型</td><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-2^63~2^63-1</td></tr></tbody></table><ul><li>无符号整型<br>| <strong>整型</strong> | <strong>关键字</strong> | <strong>字节数</strong> | 取值范围 |<br>| :——: | :——–: | :——–: | :——: |<br>|  字节型  |    byte    |     1      |  0~255   |<br>|  短整型  |   ushort   |     2      | 0~2^16-1 |<br>|   整型   |    uint    |     4      | 0~2^32-1 |<br>|  长整型  |   ulong    |     8      | 0~2^64-1 |</li></ul><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><ul><li>单精度浮点型        float</li><li>双精度浮点型        double</li><li>高精度            decimal</li></ul><table><thead><tr><th style="text-align:center"><strong>浮点型</strong></th><th style="text-align:center"><strong>关键字</strong></th><th style="text-align:center"><strong>字节数</strong></th></tr></thead><tbody><tr><td style="text-align:center">单精度</td><td style="text-align:center">float</td><td style="text-align:center">4</td></tr><tr><td style="text-align:center">双精度</td><td style="text-align:center">double</td><td style="text-align:center">8</td></tr><tr><td style="text-align:center">高精度</td><td style="text-align:center">decimal</td><td style="text-align:center">16</td></tr></tbody></table><h3 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h3><ul><li><p>布尔型    bool    1字节</p></li><li><p>只有两个值</p><ul><li>true</li><li>false</li></ul></li></ul><h3 id="字符型"><a href="#字符型" class="headerlink" title="字符型"></a>字符型</h3><ul><li>字符型 char 两个字节</li></ul><h2 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h2><ul><li>用来表示内存中的一个数据</li><li>一个由字符数据下划线和@符号组成的一个有序列</li></ul><h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><ol><li>只能由数字字母下划线和@符号组成</li><li>不能已数字开头</li><li>如果包含@，那么@必须放在首位</li><li>不能与关键字重名</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">xiaoming符合</span><br><span class="line">xiao_ming符合</span><br><span class="line">xiaoming_9符合</span><br><span class="line">_xiaoming符合</span><br><span class="line">xiaoming@163符合</span><br><span class="line">1xiaoming符合</span><br><span class="line">INT符合</span><br></pre></td></tr></table></figure><h3 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h3><ol><li><p>望文知意</p><ul><li><p>username    用户名</p></li><li><p>password    密码</p></li><li><p>……这种</p></li></ul></li><li><p>遵循驼峰命名法</p><ol><li><p>如果一个标识符由多个单词组成，那么单词首字母都要大写</p><ul><li><p>UserName</p></li><li><p>UserID</p></li></ul></li><li><p>如果一个标识符由多个单词组成，那么从第二个单词开始，后面的单词首字母大写</p><ul><li>userName</li><li>userID</li></ul></li><li><p>默认使用小驼峰</p></li></ol></li></ol><h3 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h3><ul><li>标识符的组成部分也可以是汉字或者部分中文字符</li><li>不推荐使用汉字</li><li>少使用@来作为标识符的一部分</li></ul><h2 id="变量与常亮"><a href="#变量与常亮" class="headerlink" title="变量与常亮"></a>变量与常亮</h2><ul><li>如果一个标识符所表示的数据，在程序运行的过程中是可以被修改的，那么这个数据就是变量</li><li>程序运行中不能被修改的就是常亮 </li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace ConsolApplication&#123;</span><br><span class="line">    class Program&#123;</span><br><span class="line">        static void Main(String[] args)&#123;</span><br><span class="line">            Console.WriteLine(&quot;Hello World&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>using 表示应用命名空间</li><li>namespace 表示命名空间</li><li>class 代表一个类</li></ul><h2 id="代码语法"><a href="#代码语法" class="headerlink" title="代码语法"></a>代码语法</h2><h3 id="变量声明"><a href="#变量声明" class="headerlink" title="变量声明"></a>变量声明</h3><h4 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 数据类型 标识符 </span><br><span class="line">int age;</span><br><span class="line">long time;</span><br><span class="line">bool flag = true;</span><br><span class="line">age = 10;</span><br><span class="line">time = 123412341234;</span><br><span class="line">// 数据类型 标识符 = 初始值</span><br><span class="line">int age = 10;</span><br><span class="line">double pi = 3.1315926535;</span><br><span class="line">// 声明多个变量</span><br><span class="line">int length, width, height;</span><br><span class="line">int length = 10, width = 10, height = 10;</span><br></pre></td></tr></table></figure><h4 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h4><ul><li><code>必须声明的同时赋初值</code></li><li><code>一旦声明，未来的代码中不能更改</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// const关键字声明常量</span><br><span class="line">// 修饰的常量不能更改且必须赋初值</span><br><span class="line">const int PI = 3.1415926535;</span><br></pre></td></tr></table></figure><h2 id="数据类型转换"><a href="#数据类型转换" class="headerlink" title="数据类型转换"></a>数据类型转换</h2><ul><li>数据类型转换并不是把一个变量的类型直接转换成其他的类型</li><li>是生命一个要转型的变量，然后将变量的值给这个新的类型的变量赋值</li></ul><h3 id="自动类型转换（隐式类型转换）"><a href="#自动类型转换（隐式类型转换）" class="headerlink" title="自动类型转换（隐式类型转换）"></a>自动类型转换（隐式类型转换）</h3><ul><li>由数据范围小的数据类型转型为取值范围大的数据类型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 自动类型转换的实例</span><br><span class="line">sbyte num0 = 10;</span><br><span class="line">int num1 = num0;</span><br><span class="line">// 自动完成不需要额外操作</span><br></pre></td></tr></table></figure><h3 id="强制类型转换（显式类型转换）"><a href="#强制类型转换（显式类型转换）" class="headerlink" title="强制类型转换（显式类型转换）"></a>强制类型转换（显式类型转换）</h3><ul><li>由数据范围大的数据类型转换为取值范围小的数据类型<ul><li>long -&gt; int</li><li>int -&gt; byte</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 强制类型转换</span><br><span class="line">int num2 = 1111;</span><br><span class="line">sbyte num3 = num2; // 此处会报错</span><br><span class="line">sbyte num3 = (sbyte)num2; // 加上要转换的类型，强制类型转换</span><br></pre></td></tr></table></figure><ul><li>sbyte 和 short 在参与运算的时候，会自动转成int型</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sbyte n1 = 10, n2 = 20;</span><br><span class="line">sbyte result = n1+n2; // 报错，因为上述的 sbyte 在参与运算的时候返回的是int型</span><br><span class="line">sbyte result = (sbyte)(n1 + n2); // 对</span><br></pre></td></tr></table></figure><ul><li><p>string 和 int 的转换</p><ul><li>方法一</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string srt = &quot;89&quot;;</span><br><span class="line">int mathInt = Convert.ToInt32(str)；</span><br><span class="line">double mathFloat = ConvertDouble(str);</span><br><span class="line">str = Convert.ToString(mathInt);</span><br></pre></td></tr></table></figure><ul><li><ul><li>方法二</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string srt = &quot;89&quot;;</span><br><span class="line">int mathInt = int.Parse(str);// 字符串转换为int</span><br><span class="line">string str2 = mathInt.ToString(); // 转换为字符串类型</span><br><span class="line">// 任何数据类型都有这种方法</span><br></pre></td></tr></table></figure><h2 id="分支语句"><a href="#分支语句" class="headerlink" title="分支语句"></a>分支语句</h2><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ul><li><strong>&gt;</strong>大于</li><li><strong>&lt;</strong>小于</li><li><strong>&lt;=</strong>小于等于</li><li><strong>&gt;=</strong>大于等于</li><li><strong>==</strong>等于等于</li><li><strong>!=</strong>不等于</li></ul><h3 id="if语句"><a href="#if语句" class="headerlink" title="if语句"></a>if语句</h3><ol><li>仅能判断满足条件的情况</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if(条件)&#123;</span><br><span class="line">    //满足条件执行的语句</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>判断满足条件和不满足条件的情况</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">if(条件)&#123;</span><br><span class="line">    //满足条件执行</span><br><span class="line">&#125; else &#123;</span><br><span class="line">    //不满足条件执行</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="3"><li>判断多种情况，分别进行处理</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">if(条件1)&#123;</span><br><span class="line">    //满足条件1的处理方式</span><br><span class="line">&#125; else if(条件2)&#123;</span><br><span class="line">    //满足条件2的处理方式</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    //上述两种条件都不满足的处理方式</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="switch-语句"><a href="#switch-语句" class="headerlink" title="switch 语句"></a>switch 语句</h3><ul><li>只有当 switch的值与某个case的值相等才会执行对应的case</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">switch(一个变量)&#123;</span><br><span class="line">    case 值1:</span><br><span class="line">        值1对应的操作</span><br><span class="line">        break;</span><br><span class="line">    case 值2:</span><br><span class="line">        值2对应的操作</span><br><span class="line">        break;</span><br><span class="line">    case 值3:</span><br><span class="line">        值3对应的操作</span><br><span class="line">        break;</span><br><span class="line">    default:</span><br><span class="line">        以上都不是对应的操作</span><br><span class="line">        break;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h2><h3 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h3><ul><li>当while括号中的值是真值的时候，就会执行循环，否则不执行</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">while(值活着吧表达式)&#123;</span><br><span class="line">    // 循环执行的语句</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 求 1~10的和</span><br><span class="line">int i=0;</span><br><span class="line">int sum = 0;</span><br><span class="line">while(i &lt;= 10)&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">    i ++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h3><ul><li>考虑到循环的有限性都需要一个变量的递增或递减</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for(定义变量或不写;变量的条件限制;变量的操作加减乘除等)&#123;</span><br><span class="line">    // 循环体</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>求1~10的和</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int sum = 0;</span><br><span class="line">for(int i=1; i&lt;=10; i++)&#123;</span><br><span class="line">    sum += i;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-while循环"><a href="#do-while循环" class="headerlink" title="do-while循环"></a>do-while循环</h3><ul><li>与while不同的是，while是执行判断语句再执行一遍循环体；do-while是执行一遍循环体，再执行判断语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">do&#123;</span><br><span class="line">    //循环体</span><br><span class="line">&#125;while(判断语句);</span><br></pre></td></tr></table></figure><ul><li>判断输入密码是否正确</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">string mima = &quot;mima&quot;;</span><br><span class="line">do&#123;</span><br><span class="line">    string inMima = Console.ReadLine();</span><br><span class="line">&#125;while(mima != inMima);</span><br></pre></td></tr></table></figure><h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><ul><li>存储同一种数据类型的一组数据</li><li>数组中每个成员，成为数组元素</li></ul><h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><ul><li>定义一维数组<ul><li>int [] number;</li></ul></li><li>定义后需要初始化才能使用<ul><li>数组的动态初始化<ul><li>int[] number = new int[5]; 整型数组，表示数组中每个元素都是int的默认值</li><li>int[] number = new int[3]{1,2,3}; 整型数组，表示数组中第一个元素是1，第二个元素是2，第三个元素是3</li></ul></li><li>数组的静态初始化<ul><li>int[] number =  {1,2,3}; 直接给数组赋值</li></ul></li></ul></li><li>访问数组通过数组的下标<ul><li>number[2]</li><li>下边从0开始，不能为负数，不能超过定义数组的长度</li></ul></li></ul><ul><li>求数组的最大值最小值</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line">using System.Collections.Generic;</span><br><span class="line">using System.Linq;</span><br><span class="line">using System.Text;</span><br><span class="line">using System.Threading.Tasks;</span><br><span class="line"></span><br><span class="line">namespace LcTest</span><br><span class="line">&#123;</span><br><span class="line">    class Program&#123;</span><br><span class="line">        static void Main(string[] args)&#123;</span><br><span class="line">            int[] number = new int[10]&#123;1,2,3,4,5,6,7,8,9,10&#125;;</span><br><span class="line">            int max = -1;</span><br><span class="line">            int min = 100;</span><br><span class="line">            for(int i=0; i&lt;number.Length; i++)&#123;</span><br><span class="line">                if(number[i] &gt; max)</span><br><span class="line">                    max = number[i];</span><br><span class="line">                if(number[i] &lt; min)</span><br><span class="line">                    min = number[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><ul><li>int[,] number = new int[2,3];<ul><li>其中2是行数，3是列数</li></ul></li><li>获取行数列数<ul><li>获取行数：number.GetLength(0)</li><li>获取列数：number.GetLength(1) </li></ul></li></ul><h2 id="ref和out关键字"><a href="#ref和out关键字" class="headerlink" title="ref和out关键字"></a>ref和out关键字</h2><ul><li><p>ref和out用起来还是非常简单的，就是在普通的按值传递的参数前加个ref或者out就行，方法定义和调用的时候都得加</p></li><li><p>ref/out 可以修饰任何参数</p></li><li>如果形参用ref/out来修饰，那么实参也要用ref/out来修饰</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">static void Change(ref int a)&#123;</span><br><span class="line">    a = 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Change2(out int a)&#123;</span><br><span class="line">    a = 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Main(string[] args)&#123;</span><br><span class="line">    int num = 10;</span><br><span class="line">    Change(ref num);</span><br><span class="line">    Console.WriteLine(num); // 输出了20，num的值被修改了</span><br><span class="line">    </span><br><span class="line">    int x = 5;</span><br><span class="line">    Change2(out x);</span><br><span class="line">    Console.WriteLine(x);// 也是输出20，x的值被修改了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="ref和out的区别"><a href="#ref和out的区别" class="headerlink" title="ref和out的区别"></a>ref和out的区别</h3><ul><li>控制离开当前方法之前必须对out参数进行赋值，又一丢丢类似返回值，必须对传入的参数进行赋值操作<ul><li>这里把 a=20 注释掉了，然后就报错了，作为形参的a 必须被赋值</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">static void Change2(out int a)&#123;</span><br><span class="line">    //a = 20;</span><br><span class="line">&#125;</span><br><span class="line">static void Main(string[] args)&#123;</span><br><span class="line">    int x = 5;</span><br><span class="line">    Change2(out x);</span><br><span class="line">    Console.WriteLine(x);// 也是输出20，x的值被修改了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ref 修饰的必须在 作为实参传递之前就赋值<ul><li>这里不给 number 赋初值，然后就报错了，作为实参的number必须被赋值</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">static void Change(ref int a)&#123;</span><br><span class="line">    a = 20;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">static void Main(string[] args)&#123;</span><br><span class="line">    int num ;</span><br><span class="line">    Change(ref num);</span><br><span class="line">    Console.WriteLine(num); // 输出了20，num的值被修改了    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>ref在函数中默认是有值的，out在函数中默认无值的参数，必须被先赋值才能使用</li></ul><h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h1><h2 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h2><ul><li>具有一定的功能，能够帮助解决特定问题的实体，就是对象</li><li>具有一定功能和特征的对象的集合，就是类</li></ul><h2 id="类的设计"><a href="#类的设计" class="headerlink" title="类的设计"></a>类的设计</h2><ul><li>关键字 class，类名是个标识符，遵循大驼峰命名法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    // 类体</span><br><span class="line">    // 特征</span><br><span class="line">    public string name;//类的字段，成员变量</span><br><span class="line">    public int age;</span><br><span class="line">    public char gender;</span><br><span class="line">    </span><br><span class="line">    // 行为</span><br><span class="line">    public void eat()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    public void sleep()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>字段：用来描述这个类所有的对象共有的特征</li><li>方法：用来描述这个类所有的对象共有的行为</li><li>访问权限：public,private,protected,internal</li></ul><h2 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h2><ul><li>构造方法不能显示调用</li><li>构造方法必须与类同名</li><li>实例化对象的时候就自动调用构造方法</li><li>必须是public修饰</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    // 类体</span><br><span class="line">    // 特征</span><br><span class="line">    private string name;//类的字段，成员变量</span><br><span class="line">    private int age;</span><br><span class="line">    </span><br><span class="line">    public Person()&#123;</span><br><span class="line">        Console.WriteLine(&quot;无参构造&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(int a)&#123; // 函数重载</span><br><span class="line">        this.age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(string name_, int age_)&#123;</span><br><span class="line">        this.age = age_;</span><br><span class="line">        this.name = name_;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    // 行为</span><br><span class="line">    void setName(string name_)&#123;</span><br><span class="line">        this.name = name_;</span><br><span class="line">    &#125;</span><br><span class="line">    string getName()&#123;</span><br><span class="line">        return this.name;</span><br><span class="line">    &#125;</span><br><span class="line">    void setAge(int age_)&#123;</span><br><span class="line">        this.age = age_;</span><br><span class="line">    &#125;</span><br><span class="line">    int getAge()&#123;</span><br><span class="line">        return this.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>如果想要 在 构造函数中 调用 构造方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    // 类体</span><br><span class="line">    // 特征</span><br><span class="line">    private string name;//类的字段，成员变量</span><br><span class="line">    private int age;</span><br><span class="line">    </span><br><span class="line">    public Person()&#123;</span><br><span class="line">        Console.WriteLine(&quot;无参构造&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(int a)&#123; // 函数重载</span><br><span class="line">        this.age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(string name_, int age_):this() // 这里this后面无参，所以先调用无参构造方法，再调用这个两个参数的构造方法</span><br><span class="line">    &#123;</span><br><span class="line">        this.age = age_;</span><br><span class="line">        this.name = name_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="静态构造方法"><a href="#静态构造方法" class="headerlink" title="静态构造方法"></a>静态构造方法</h3><ul><li>由static 修饰的静态构造方法</li><li>该静态构造方法无论生成多少个对象都只执行一次，在第一次加载这个类到内存中的时候执行</li><li>静态构造方法不能有参数</li><li>静态构造函数执行优先于非静态的构造哈函数</li></ul><h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul><li>一种封装：将某段具有特殊功能的代码提取出来，做成方法</li><li>另一种封装：将某些具有特殊格式的数据做成一个类的对象。<ul><li>例如：json 转换成一个类，json中的数据为类的成员变量赋值</li></ul></li><li>例如上述的get,set方法就是一种封装，通过方法来设置属性的值，可以添加判断——判断设置的值是否符合我们的要求……</li></ul><h2 id="属性访问器"><a href="#属性访问器" class="headerlink" title="属性访问器"></a>属性访问器</h2><ul><li>设置了一个Age方法，里面又get和set两种，分别是获取和设置</li><li>节省的代码的书写，不用特地写get和set方法</li><li>一个属性 至少要有一个访问器 get/set</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">    // 类体</span><br><span class="line">    // 特征</span><br><span class="line">    private string name;//类的字段，成员变量</span><br><span class="line">    private int age;</span><br><span class="line">    public int Age&#123;</span><br><span class="line">        set &#123;</span><br><span class="line">            if(value &lt;= 150)// value为传入的 参数</span><br><span class="line">                age = value;</span><br><span class="line">        &#125;</span><br><span class="line">        get &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    </span><br><span class="line">    public Person()&#123;</span><br><span class="line">        Console.WriteLine(&quot;无参构造&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(int a)&#123; // 函数重载</span><br><span class="line">        this.age = a;</span><br><span class="line">    &#125;</span><br><span class="line">    public Person(string name_, int age_):this() // 这里this后面无参，所以先调用无参构造方法，再调用这个两个参数的构造方法</span><br><span class="line">    &#123;</span><br><span class="line">        this.age = age_;</span><br><span class="line">        this.name = name_;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">static void Main(string[] args)&#123;</span><br><span class="line">    Person person = new Person();</span><br><span class="line">    person.Age = 10; // 赋值即调用set方法</span><br><span class="line">    Console.WriteLine(person.Age);//直接获得则为get</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul><li>把多个具有相同字段的内容提取出来，形成一个新的类，这个类被称为父类</li><li>子类继承父类</li><li>子类拥有父类所有的属性和方法，不包括构造方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">class Hardware&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int cost;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  Cpu : HardWare&#123;</span><br><span class="line">    // Cpu 继承 HardWare 类</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>一个类只能有一个父类，C#是单继承</li><li>C#所有的类都直接或间接继承自Object类</li></ul><h3 id="继承中的构造方法"><a href="#继承中的构造方法" class="headerlink" title="继承中的构造方法"></a>继承中的构造方法</h3><ul><li>继承中，默认调用父类的无参构造方法，因此要么父类中要有无参，要么手动调用父类构造函数base()</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">class Hardware&#123;</span><br><span class="line">    string name;</span><br><span class="line">    int cost;</span><br><span class="line">    HardWare(string name_, int cose_)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    HardWare()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class  Cpu : HardWare&#123;</span><br><span class="line">    // Cpu 继承 HardWare 类</span><br><span class="line">    public Cpu(string name_, int cost_):base(name_, cost_)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="访问权限修饰符"><a href="#访问权限修饰符" class="headerlink" title="访问权限修饰符"></a>访问权限修饰符</h2><ul><li>用于修饰属性，方法，类，修饰可以被访问的范围</li><li>分为五种：<ul><li>public<ul><li>在整个解决方案中都生效</li></ul></li><li>internal<ul><li>默认类是internal的访问权限</li><li>用于修饰字段，属性，类和方法</li><li>可以在当前的整个项目中的任何位置都能访问</li></ul></li><li>protected<ul><li>用于修饰字段，属性，和方法</li><li>可以在当前类中访问，可以在子类中访问</li><li>甚至可以通过跨项目的继承子类中访问</li></ul></li><li>private 私有权限<ul><li>用于修饰字段，属性，和方法</li><li>只能在当前类中访问</li><li>无法在类外访问，无论是子类或者是实例化都不能直接访问</li><li>只能在当前类中由方法来访问修改设置</li></ul></li><li>protected internal<ul><li>在当前类中生效</li><li>在跨项目的子类中生效</li></ul></li></ul></li><li>访问权限：private &lt; protected &lt; internal &lt; protected internal &lt; public </li><li>父类的访问权限不得低于子类的访问权限</li><li>在public权限的类中，如果某个字段或者某个方法中使用到了非public权限的类型，程序会要求一定要将用到的这个类型改为public</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Point&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">public class Circle&#123;</span><br><span class="line">    public Point center; // 这里会报错，因为 Point 的访问权限低于Circle的访问权限</span><br><span class="line">    public void SetCenter(Point C)&#123;// 这里报错，因为Point权限低于Circle</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul><li>向上转型<ul><li>子类类型转为父类类型</li><li>隐式转型，肯定成功</li><li>父类的引用可以指向子类的对象</li></ul></li><li>向下转型<ul><li>父类类型转为子类类型</li><li>可能失败</li><li>需要强制类型转换 </li><li><code>如果向下转型失败 则变为null</code></li></ul></li><li>父类的引用可以指向子类的对象</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">class Animal&#123;&#125;</span><br><span class="line">class Dog:Animal&#123;&#125;</span><br><span class="line">class Hashiqi:Dog&#123;&#125;</span><br><span class="line"></span><br><span class="line">public class Program&#123;</span><br><span class="line">    public static void Main(string[] args)&#123;</span><br><span class="line">        Dog d = new Dog();</span><br><span class="line">        </span><br><span class="line">        // 向上转型</span><br><span class="line">        // 隐式转型，肯定成功</span><br><span class="line">        Animal a = d;// 父类的引用指向子类的对象</span><br><span class="line">        </span><br><span class="line">        // 向下转型</span><br><span class="line">        Dog b = new Animal();// 这句话报错</span><br><span class="line">        Dog E = (Dog)new Animal();// 强制类型转换</span><br><span class="line">        Dog F = new Animal() as Dog;// as 仅用于引用数据类型，即基本数据类型不能使用as</span><br><span class="line">        // 如果转型失败，则为 其值 null 即 F = null</span><br><span class="line">        </span><br><span class="line">        Dog G = a as Dog;</span><br><span class="line">        // 这样一般不会转型失败</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在什么地方用呢<ul><li>有的时候使用重载是很傻的选择</li><li>传入一个线下转型的参数，我们再向上转型，转回去就可以不用重新写函数了</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">class Animal&#123;&#125;</span><br><span class="line">class Dog : Animal&#123;&#125;</span><br><span class="line">class Cat : Animal&#123;&#125;</span><br><span class="line">class Elephant : Animal&#123;&#125;</span><br><span class="line"></span><br><span class="line">class Program&#123;</span><br><span class="line">    </span><br><span class="line">    public static void SetAnimal(Dog dog)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void SetAnimal(Cat cat)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void SetAnimal(Elephant elephant)&#123;</span><br><span class="line">    &#125;</span><br><span class="line">    // 像上述使用一个重载，显得是很傻的，如果工程后面需要再加一个动物，那么又得写一个函数，代码利用率低</span><br><span class="line">    public static void SetAnimal(Animal animal)&#123;// 如果我们需要传入一个动物的参数</span><br><span class="line">        // 传入一个线下转型的参数，我们再向上转型，转回去就可以不用重新写函数了</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    static void Main(string[] args)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>用is关键判断变量的类</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class Person&#123;</span><br><span class="line">&#125;</span><br><span class="line">class Program&#123;</span><br><span class="line">    static void Main(string[] args)&#123;</span><br><span class="line">        Person person = new Person();</span><br><span class="line">        if ( person is Person)&#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="方法的隐藏与重写"><a href="#方法的隐藏与重写" class="headerlink" title="方法的隐藏与重写"></a>方法的隐藏与重写</h2><h3 id="隐藏"><a href="#隐藏" class="headerlink" title="隐藏"></a>隐藏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Animal&#123;</span><br><span class="line">    public void show()&#123;</span><br><span class="line">        Console.WirteLine(&quot;animal show&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class Cat:Animal&#123;</span><br><span class="line">    Console.WirteLine(&quot;cat show&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Program&#123;</span><br><span class="line">    public static void Mai(String[] args)&#123;</span><br><span class="line">        Animal c = new Cat();</span><br><span class="line">        c.show(); // 输出 animal show</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Cat类中，如果不考虑重载，能够重写一个show方法吗？<ul><li>答案是可以的，其操作为“方法隐藏”，把从父类继承的方法隐藏了</li><li>需要使用关键字new</li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Cat:Animal&#123;</span><br><span class="line">    public new void show()&#123;</span><br><span class="line">        Console.WirteLine(&quot;cat show&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写"><a href="#重写" class="headerlink" title="重写"></a>重写</h3><ul><li>需要关键字 override</li><li><p>只能重写父类中virtual的函数</p></li><li><p>把父类中实现的方法丢掉，自己写</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">class Animal&#123;</span><br><span class="line">    public virtual void show()&#123;</span><br><span class="line">        Console.WirteLine(&quot;animal show&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Cat&#123;</span><br><span class="line">    public override void show()&#123;</span><br><span class="line">        Console.WirteLine(&quot;cat show&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void Main(String[] args)&#123;</span><br><span class="line">    Animal c = new Cat();</span><br><span class="line">    c.show(); // 输出cat show</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>注意上述两个输出并不一样，一个输出anima 一个 输出 cat</strong></p><h1 id="枚举"><a href="#枚举" class="headerlink" title="# 枚举"></a># 枚举</h1><ul><li>[访问权限控制符] enum 枚举名 { 值 }</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">public enum Season &#123;</span><br><span class="line">    spring,summer,autumn,winter</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static void Main(String[] args)&#123;</span><br><span class="line">    Season s = Season.autumn;</span><br><span class="line">    Concole.WirteLines(s);//输出utumn</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>枚举类型的值，从0开始，spring的值是0，summer的值是1</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public enum Season &#123;</span><br><span class="line">    spring = 3,summer,autumn,winter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>手动修改 spring=3，那么summer=4，以此类推</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public enum Season : long&#123;</span><br><span class="line">    spring,summer,autumn,winter</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上述方法，设置值为long型，默认是int</li></ul><h1 id="Unity实战"><a href="#Unity实战" class="headerlink" title="Unity实战"></a>Unity实战</h1><h2 id="记录所有标签的lags文件"><a href="#记录所有标签的lags文件" class="headerlink" title="记录所有标签的lags文件"></a>记录所有标签的lags文件</h2><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 该脚本用于 封装 tags/标签</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Tags</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 以下string 就是工程中所有用到的标签</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> player = <span class="string">"Player"</span>; <span class="comment">// 游戏角色</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> gameController = <span class="string">"GameController"</span>; <span class="comment">//游戏控制器</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> enemy = <span class="string">"Enemy"</span>; <span class="comment">// 敌人</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> fader = <span class="string">"Fader"</span>; <span class="comment">// 淡入淡出的画布</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">const</span> <span class="keyword">string</span> mainCamera = <span class="string">"MainCamera"</span>; <span class="comment">// 主摄像机</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="淡隐淡显"><a href="#淡隐淡显" class="headerlink" title="淡隐淡显"></a>淡隐淡显</h2><ol><li>创建一个空物体 左边Hierachy栏目下右键 create Empty</li><li>重命名为FadeInOut</li><li>重置坐标为0，0，0</li><li>右边 Inspector 中Add Component 添加 Gui Texture</li><li>color 设为黑色</li><li>Texture 选择一张纯黑色图片拖到框中</li><li>由于版本问题，Camera 摄像机需要添加 GUI Layer 组件，否则 渐隐渐显无效</li></ol><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"><span class="keyword">using</span> UnityEngine.SceneManagement;</span><br><span class="line"><span class="comment">// 控制屏幕渐隐渐显的脚本</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">FadeInOut</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> fadeSpeed = <span class="number">1.5</span>f;<span class="comment">// 渐隐渐显的速率</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">bool</span> sceneStarting = <span class="literal">true</span>; <span class="comment">// 标志场景是否开始，如果开始要让屏幕有一个渐显的效果</span></span><br><span class="line">    <span class="keyword">private</span> GUITexture tex;<span class="comment">// 就是 之前给 FadeInOut这个对象 添加 的Gui textrue组件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tex = <span class="keyword">this</span>.GetComponent&lt;GUITexture&gt;();<span class="comment">//获取挂载对象的 GUI Texture 组件</span></span><br><span class="line">        tex.pixelInset = <span class="keyword">new</span> Rect(<span class="number">0</span>, <span class="number">0</span>, Screen.width, Screen.height); <span class="comment">// 0,0 是坐标位置， width height 是屏幕宽高</span></span><br><span class="line">        <span class="comment">// GUITexture.pixelInset = Rect (x, y, width, height); </span></span><br><span class="line">        <span class="comment">// 此变量用于划定GUITexture的位置及宽高，Rect中x，y的值都为0的时候，所在的位置居于屏幕中心</span></span><br><span class="line">        <span class="comment">// 即的坐标中心是以屏幕中心为（0，0）坐标，它的正负情况符合二维坐标系的四个象限。</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FadeToClear</span>(<span class="params"></span>) <span class="comment">// 渐隐的方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tex.color = Color.Lerp(tex.color, Color.clear, fadeSpeed * Time.deltaTime);</span><br><span class="line">        <span class="comment">// 属性叫做插值, 两个向量之间的线性插值。</span></span><br><span class="line">        <span class="comment">// 意思是 从Lerp(a, b, m_time) 值从a到b 只有当m_time 值达到1时才会达到目标彻底到b</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">FadeToBlack</span>(<span class="params"></span>)<span class="comment">// 渐显的方法</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tex.color = Color.Lerp(tex.color, Color.black, fadeSpeed * Time.deltaTime);</span><br><span class="line">        <span class="comment">// Time.deltaTime 增量时间 保证1s的时间是实际的1s，很多时候屏幕帧率是跳动的，也就是说我要求1s移动10s，根据帧率来算的话 游戏中的1s现实可能不是1s</span></span><br><span class="line">        <span class="comment">// 造成了 1s 移动 多于或少于10m，这时引入 增量时间的概念，保证 现实中的1s和游戏中的1s是一样的</span></span><br><span class="line">        <span class="comment">// 这里 想要渐隐渐显时间为1.5s，所以就是 1.5*Time,dektaTime</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">StartScene</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        FadeToClear();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (tex.color.a &lt;= <span class="number">0.05</span>f)</span><br><span class="line">        &#123;</span><br><span class="line">            tex.color = Color.clear; <span class="comment">// 如果 a 通道 小于等于 0.05 那么默认是透明的了，就直接让他彻底透明，a通道 就是RGBA的透明度通道</span></span><br><span class="line">            tex.enabled = <span class="literal">false</span>;<span class="comment">// 设置 组件 为不可用状态            </span></span><br><span class="line">            sceneStarting = <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">EndScene</span>(<span class="params"></span>)<span class="comment">// 由于该脚本要其他脚本调用因此 设置public</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        tex.enabled = <span class="literal">true</span>;<span class="comment">// 激活Gui Texture </span></span><br><span class="line">        FadeToBlack();</span><br><span class="line">        <span class="keyword">if</span> (tex.color.a &gt;= <span class="number">0.95</span>f)</span><br><span class="line">        &#123;</span><br><span class="line">            SceneManager.LoadScene(<span class="string">"SampleScene"</span>);<span class="comment">// 加载场景，默认 要么死了重来 要么通关重来，因此加载初始场景就行了\</span></span><br><span class="line">            <span class="comment">// 如果 说 SceneManager 不可用 那么 导入头文件 using UnityEngine.SceneManagement;</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)<span class="comment">// GUI Texture.Lerp 必须在update函数中调用才有用</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (sceneStarting)</span><br><span class="line">        &#123;</span><br><span class="line">            Debug.Log(<span class="number">1</span>);</span><br><span class="line">            StartScene(); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>SceneManager.LoadScene(“SampleScene”)<ul><li>加载场景，默认 要么死了重来 要么通关重来，因此加载初始场景就行了</li><li>如果 说 SceneManager 不可用 那么 导入头文件 using UnityEngine.SceneManagement;</li></ul></li><li><p>Color.Lerp(tex.color, Color.black, fadeSpeed * Time.deltaTime)</p><ul><li>Time.deltaTime 增量时间 保证1s的时间是实际的1s，很多时候屏幕帧率是跳动的，也就是说我要求1s移动10s，根据帧率来算的话 游戏中的1s现实可能不是1s</li><li>造成了 1s 移动 多于或少于10m，这时引入 增量时间的概念，保证 现实中的1s和游戏中的1s是一样的</li><li>这里 想要渐隐渐显时间为1.5s，所以就是 1.5*Time,dektaTime</li></ul></li><li><p>this.GetComponent<guitexture>()</guitexture></p><ul><li>获取挂载对象的 GUI Texture 组件</li></ul></li></ul><h2 id="按键输入封装"><a href="#按键输入封装" class="headerlink" title="按键输入封装"></a>按键输入封装</h2><ul><li>之前封装了tag标签，那么物体FadeInOut设置标签为Fader</li><li><p>记得之前封装的tag标签的cs脚本吗，注意名字一定要一致</p></li><li><p>游戏中用户的输入分为三种</p><ol><li>按键：鼠标，键盘</li><li>自定义轴向：正向，负向</li><li>unity提供的轴向 <ul><li>菜单栏-&gt;Edit-&gt;Input 中是unity给提供的轴向</li></ul></li></ol></li></ul><blockquote><p>新建脚本 fps_Input<br>用于管理游戏按键</p></blockquote><ul><li>创建一个空物体，重命名为GameController</li><li>将GameController标签设置为GameController</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">fps_Input</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 用户输入分为三个部分，分别用东西对其进行存储</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">class</span> <span class="title">fps_InputAxis</span><span class="comment">// 用于存储自定义轴的信息的类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">public</span> KeyCode positive; <span class="comment">// 正向</span></span><br><span class="line">        <span class="keyword">public</span> KeyCode nagetive; <span class="comment">// 负向</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="keyword">string</span>, KeyCode&gt; buttons = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, KeyCode&gt;(); <span class="comment">// 以按键名称以及对应的键位进行键值对存储</span></span><br><span class="line">    <span class="keyword">public</span> Dictionary&lt;<span class="keyword">string</span>, fps_InputAxis&gt; axis = <span class="keyword">new</span> Dictionary&lt;<span class="keyword">string</span>, fps_InputAxis&gt;(); <span class="comment">// 存储自定义轴的信息</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;<span class="keyword">string</span>&gt; unityAxis = <span class="keyword">new</span> List&lt;<span class="keyword">string</span>&gt;(); <span class="comment">// 存储Unity 提供的轴向</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddButton</span>(<span class="params"><span class="keyword">string</span> name, KeyCode k</span>) <span class="comment">// 添加按钮，名称和其对应的键位</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (buttons.ContainsKey(name)) <span class="comment">// 判断 buttons 字典中是否有存储过name，如果有则更新其值，如果没有则添加进字典</span></span><br><span class="line">            buttons[name] = k;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            buttons.Add(name, k);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddAxis</span>(<span class="params"><span class="keyword">string</span> name, KeyCode pk, KeyCode nk</span>)<span class="comment">// 参数对应 按键名称，其正向和负向</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (axis.ContainsKey(name))<span class="comment">//判断有无对应名称 有则改之 无则添加</span></span><br><span class="line">        &#123;</span><br><span class="line">            axis[name] = <span class="keyword">new</span> fps_InputAxis() &#123; positive = pk, nagetive = nk &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            axis.Add(name, <span class="keyword">new</span> fps_InputAxis() &#123; positive = pk, nagetive = nk &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">AddunityAxis</span>(<span class="params"><span class="keyword">string</span> name</span>) <span class="comment">// 添加到Unity自带的轴向列表中</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!unityAxis.Contains(name))<span class="comment">// 如果unityAxis不存在则添加</span></span><br><span class="line">            unityAxis.Add(name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">SetUpDefaults</span>(<span class="params"><span class="keyword">string</span> type=<span class="string">""</span></span>) <span class="comment">// 设置默认按键, 根据传入type的数值，初始化按键按钮</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(type == <span class="string">""</span> || type == <span class="string">"buttons"</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span>(buttons.Count == <span class="number">0</span>) <span class="comment">// 如果 字典中没有 key ，则可以认为没有初始化过，那么初始化它</span></span><br><span class="line">            &#123;</span><br><span class="line">                AddButton(<span class="string">"Fire"</span>, KeyCode.Mouse0); <span class="comment">// Mouse0 鼠标左键，按左键 开火</span></span><br><span class="line">                AddButton(<span class="string">"Reload"</span>, KeyCode.R); <span class="comment">// 按 R 键，装填弹药</span></span><br><span class="line">                AddButton(<span class="string">"Jump"</span>, KeyCode.Space); <span class="comment">// Space 空格， 空格键跳跃</span></span><br><span class="line">                AddButton(<span class="string">"Crouch"</span>, KeyCode.C); <span class="comment">// 按C键蹲下</span></span><br><span class="line">                AddButton(<span class="string">"Sprint"</span>, KeyCode.LeftShift); <span class="comment">// 按左边的shift 加速跑</span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(type == <span class="string">""</span> || type == <span class="string">"Axis"</span>) <span class="comment">// 初始化自定义轴</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(axis.Count == <span class="number">0</span>) <span class="comment">// 没有键默认没有初始化</span></span><br><span class="line">                &#123;</span><br><span class="line">                    AddAxis(<span class="string">"Horizontal"</span>, KeyCode.W, KeyCode.S);<span class="comment">// 角色横向移动，w前进 s 后退</span></span><br><span class="line">                    AddAxis(<span class="string">"Vertical"</span>, KeyCode.A, KeyCode.D); <span class="comment">// 角色竖向移动， 左右</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(type == <span class="string">""</span> || type == <span class="string">"UnityAxis"</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (unityAxis.Count == <span class="number">0</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    AddunityAxis(<span class="string">"Mouse X"</span>);</span><br><span class="line">                    AddunityAxis(<span class="string">"Mouse Y"</span>);</span><br><span class="line">                    AddunityAxis(<span class="string">"Horizontal"</span>);</span><br><span class="line">                    AddunityAxis(<span class="string">"Vertical"</span>);</span><br><span class="line">                    <span class="comment">// Mouse X 鼠标沿屏幕X移动时触发 </span></span><br><span class="line">                    <span class="comment">// Mouse Y 鼠标沿屏幕Y移动时触发</span></span><br><span class="line">                    <span class="comment">// Vertical 键盘按上或下键时触发 </span></span><br><span class="line">                    <span class="comment">// Horizontal 键盘按左或右键时触发</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        SetUpDefaults(); <span class="comment">// 一次性初始化所有按键</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">GetButton</span>(<span class="params"><span class="keyword">string</span> buttonName</span>) <span class="comment">// 这个是给外界调用的，所以设置为public</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (buttons.ContainsKey(buttonName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Input.GetKey(buttons[buttonName]); <span class="comment">// 只要当前按钮被按下则返回 true 否则返回false，这里获取一个持续的按下信息</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果传入的名称没有对应的动作则 无反应</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">bool</span> <span class="title">GetButtonDown</span>(<span class="params"><span class="keyword">string</span> buttonName</span>) <span class="comment">// 只获取按下的事件</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (buttons.ContainsKey(buttonName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Input.GetKeyDown(buttons[buttonName]); <span class="comment">// 如果当前按钮刚刚被按下则返回 true 否则返回false</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>; <span class="comment">// 如果传入的名称没有对应的动作则 无反应</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">GetAxis</span>(<span class="params"><span class="keyword">string</span> axisName</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.unityAxis.Contains(axisName))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Input.GetAxis(axisName);</span><br><span class="line">            <span class="comment">// Mouse X 鼠标沿屏幕X移动时触发 </span></span><br><span class="line">            <span class="comment">// Mouse Y 鼠标沿屏幕Y移动时触发</span></span><br><span class="line">            <span class="comment">// Vertical 键盘按上或下键时触发 </span></span><br><span class="line">            <span class="comment">// Horizontal 键盘按左或右键时触发</span></span><br><span class="line">            <span class="comment">// Input.GetAxis 返回值是一个数，正负代表方向 </span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">GetAxisRaw</span>(<span class="params"><span class="keyword">string</span> axisName</span>) <span class="comment">// 只返回 -1 0 1，代表方向</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.axis.ContainsKey(axisName)) <span class="comment">// 先在自定义轴向中找</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">float</span> val = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span> (Input.GetKey(<span class="keyword">this</span>.axis[axisName].positive))<span class="comment">// 如果按下了正向 返回1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span> (Input.GetKey(<span class="keyword">this</span>.axis[axisName].nagetive))<span class="comment">// 如果按下了负向 返回-1</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (unityAxis.Contains(axisName)) <span class="comment">// 如果自定义轴向没有就到unity定义的轴向中找</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Input.GetAxisRaw(axisName); <span class="comment">// 只返回 -1 0 1，代表方向</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上述脚本挂载到 GameController 上</li></ul><h2 id="用户输入参数的封装及赋值"><a href="#用户输入参数的封装及赋值" class="headerlink" title="用户输入参数的封装及赋值"></a>用户输入参数的封装及赋值</h2><ul><li>创建一个空物体作为player主角</li><li>添加 Character Controller 角色控制器</li><li>设置位置以及参数</li></ul><ul><li>存储输入信息的脚本</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 存储一些变量，表示用户的输入状态</span></span><br><span class="line"></span><br><span class="line">[<span class="meta">RequireComponent(typeof(CharacterController))</span>]</span><br><span class="line"><span class="comment">// 当你添加的一个用了RequireComponent组件的脚本，需要的组件将会自动被添加到game object（游戏物体）。</span></span><br><span class="line"><span class="comment">// 这个可以有效的避免组装错误。举个例子一个脚本可能需要刚体总是被添加在相同的game object（游戏物体）上。</span></span><br><span class="line"><span class="comment">// 用RequireComponent属性的话，这个过程将被自动完成，因此你可以永远不会犯组装错误。</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">fps_PlayerParameter</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector2 inputSmoothLook;<span class="comment">// 表示鼠标的输入</span></span><br><span class="line">    <span class="keyword">public</span> Vector2 inputMoveVector;<span class="comment">// player 移动的向量</span></span><br><span class="line"></span><br><span class="line">    [<span class="meta">HideInInspector</span>] <span class="comment">// 隐藏随后的变量，不在面板中可见</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> inputCrouch; <span class="comment">// 是否是 蹲下的状态 </span></span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> inputJump; <span class="comment">// 是否跳跃</span></span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> inputSprint; <span class="comment">// 是否 冲刺</span></span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> inputFire; <span class="comment">// 是否 开火</span></span><br><span class="line">    [<span class="meta">HideInInspector</span>]</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> inputReload; <span class="comment">// 是否重新装弹</span></span><br><span class="line">    <span class="comment">// 上述变量通过用户输入进行赋值，有因为是public 会在面板中显示出来，因此 用了 HideInInspector 隐藏面板显示</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 为之前所写的 状态信息脚本进行赋值</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">fps_FPinput</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">bool</span> LockCursor</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">get</span> &#123; <span class="keyword">return</span> Cursor.lockState == CursorLockMode.Locked ? <span class="literal">true</span> : <span class="literal">false</span>; &#125; <span class="comment">// 判断当前光标状态，如果锁定则为true，否则为false</span></span><br><span class="line">        <span class="keyword">set</span></span><br><span class="line">        &#123;</span><br><span class="line">            Cursor.visible = <span class="keyword">value</span>;<span class="comment">// 根据赋值设置光标是否可见</span></span><br><span class="line">            Cursor.lockState = <span class="keyword">value</span> ? CursorLockMode.Locked : CursorLockMode.None; <span class="comment">// 根据输入的值 设置 光标</span></span><br><span class="line">            <span class="comment">//当锁定时，光标将自动居视图中间，并使其从不离开视图</span></span><br><span class="line">            <span class="comment">//这将主要用于Cursor.visible = false，隐藏光标</span></span><br><span class="line">            <span class="comment">// CursorLockMode.none是解锁光标，但是不会把隐藏的光标显示出来</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> fps_PlayerParameter parameter;<span class="comment">// 需要给 角色信息赋值，所以需要一个对象</span></span><br><span class="line">    <span class="keyword">private</span> fps_Input input; <span class="comment">// 输入信息记录的脚本</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        LockCursor = <span class="literal">true</span>;<span class="comment">// 锁定光标</span></span><br><span class="line">        parameter = <span class="keyword">this</span>.GetComponent&lt;fps_PlayerParameter&gt;(); <span class="comment">// 获取组件</span></span><br><span class="line">        input = GameObject.FindGameObjectWithTag(Tags.gameController).GetComponent&lt;fps_Input&gt;();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        InitialInput();<span class="comment">// 每帧都要监听的，查看状态是否改变</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">InitialInput</span>(<span class="params"></span>)<span class="comment">// 初始化赋值</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        parameter.inputMoveVector = <span class="keyword">new</span> Vector2(input.GetAxis(<span class="string">"Horizontal"</span>), input.GetAxis(<span class="string">"Vertical"</span>));<span class="comment">// 移动的输入</span></span><br><span class="line">        parameter.inputSmoothLook = <span class="keyword">new</span> Vector2(input.GetAxisRaw(<span class="string">"Mouse X"</span>), input.GetAxisRaw(<span class="string">"Mouse Y"</span>));<span class="comment">// 相机的旋转，也就是角色的旋转</span></span><br><span class="line">        parameter.inputCrouch = input.GetButton(<span class="string">"Crouch"</span>); <span class="comment">// 是否处于蹲下状态</span></span><br><span class="line">        parameter.inputJump = input.GetButton(<span class="string">"Jump"</span>); <span class="comment">// 是否跳跃</span></span><br><span class="line">        parameter.inputSprint = input.GetButton(<span class="string">"Sprint"</span>);</span><br><span class="line">        parameter.inputSprint = input.GetButton(<span class="string">"Fire"</span>);</span><br><span class="line">        parameter.inputReload = input.GetButtonDown(<span class="string">"Reload"</span>); <span class="comment">// 因为 换弹只要按下一次就行了，所以只鉴定按下的信息</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>挂载上述两个脚本到player上</li></ul><h2 id="第一人称相机的控制"><a href="#第一人称相机的控制" class="headerlink" title="第一人称相机的控制"></a>第一人称相机的控制</h2><ul><li>新建一个camera，tag设置为MainCamera</li><li>将camera设为player的子物体</li><li>设置camera位置，让其在player合适的位置</li></ul><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System.Collections;</span><br><span class="line"><span class="keyword">using</span> System.Collections.Generic;</span><br><span class="line"><span class="keyword">using</span> UnityEngine;</span><br><span class="line"></span><br><span class="line">[<span class="meta">RequireComponent(typeof(Camera))</span>]</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">fps_FPCamera</span> : <span class="title">MonoBehaviour</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> Vector2 mouseLookSensitivity = <span class="keyword">new</span> Vector2(<span class="number">5</span>, <span class="number">5</span>);<span class="comment">//鼠标灵敏度</span></span><br><span class="line">    <span class="keyword">public</span> Vector2 rotationXLimit = <span class="keyword">new</span> Vector2(<span class="number">-87</span>, <span class="number">87</span>); <span class="comment">// x轴为相机的上下仰角，player 头向上向下都有上限，故限制一下</span></span><br><span class="line">    <span class="keyword">public</span> Vector2 rotationYLimit = <span class="keyword">new</span> Vector2(<span class="number">-360</span>, <span class="number">360</span>); <span class="comment">// y轴水平方向转动几乎没有限制，就当是人转圈圈的，但是角度可以大于360 所以限制一下</span></span><br><span class="line">    <span class="keyword">public</span> Vector3 positionOffset = <span class="keyword">new</span> Vector3(<span class="number">0</span>, <span class="number">0.36</span>f, <span class="number">0</span>); <span class="comment">// 相机的位置，自己定义参数，这里不需要一样</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Vector2 currentMonseLook = Vector2.zero; <span class="comment">// 当前的状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> x_Angle = <span class="number">0</span>;<span class="comment">//x轴偏转角度</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> y_Angle = <span class="number">0</span>;<span class="comment">//y轴偏转角度</span></span><br><span class="line">    <span class="keyword">private</span> fps_PlayerParameter parameter;<span class="comment">// 获取鼠标输入</span></span><br><span class="line">    <span class="keyword">private</span> Transform m_Trasform; <span class="comment">// 缓存 Transform组件，就是 位置信息和角度信息等，Inspector框中可以看到该组件</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Start</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        parameter = GameObject.FindGameObjectWithTag(Tags.player).GetComponent&lt;fps_PlayerParameter&gt;();<span class="comment">// 获取输入信息，该组件存储了player的状态</span></span><br><span class="line">        m_Trasform = transform; <span class="comment">// 由于transform是该挂载对象的组件，故直接赋值</span></span><br><span class="line">        m_Trasform.localPosition = positionOffset;<span class="comment">// 初始情况下赋值，当然在控制面板赋值也可以，这里赋值更安全，防止误操作</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">GetMouseLook</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        currentMonseLook.x = parameter.inputSmoothLook.x * mouseLookSensitivity.x;</span><br><span class="line">        currentMonseLook.y = parameter.inputSmoothLook.y * mouseLookSensitivity.x;<span class="comment">// 获取鼠标输入的信息，再乘以鼠标灵敏度</span></span><br><span class="line"></span><br><span class="line">        currentMonseLook.y *= <span class="number">-1</span>;<span class="comment">// 修改y轴方向</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">UpdateInput</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(parameter.inputSmoothLook == Vector2.zero) <span class="comment">// 如果为zero 则没有用户输入</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        GetMouseLook();</span><br><span class="line">        y_Angle += currentMonseLook.x;<span class="comment">// 鼠标x轴的偏移量 改变的是 camera y 轴的旋转角度</span></span><br><span class="line">        x_Angle += currentMonseLook.y; <span class="comment">// 鼠标 y轴的偏移量 改变的是 camera x 轴的旋转角度</span></span><br><span class="line"></span><br><span class="line">        y_Angle = y_Angle &lt; <span class="number">-360</span> ? y_Angle += <span class="number">360</span> : y_Angle;</span><br><span class="line">        y_Angle = y_Angle &gt; <span class="number">360</span> ? y_Angle -= <span class="number">360</span> : y_Angle;</span><br><span class="line">        y_Angle = Mathf.Clamp(y_Angle, rotationYLimit.x, rotationYLimit.y);</span><br><span class="line">        <span class="comment">// Mathf.Clamp 为一个限制函数，Clamp (value : float, min : float, max : float) </span></span><br><span class="line">        <span class="comment">// 限制value的值在min和max之间， 如果value小于min，返回min。 如果value大于max，返回max，否则返回value</span></span><br><span class="line"></span><br><span class="line">        x_Angle = x_Angle &gt; <span class="number">360</span> ? x_Angle<span class="number">-360</span> : x_Angle;</span><br><span class="line">        x_Angle = x_Angle &lt; <span class="number">-360</span> ? x_Angle += <span class="number">360</span> : x_Angle;</span><br><span class="line">        x_Angle = Mathf.Clamp(x_Angle, rotationXLimit.x, rotationXLimit.y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">Update</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        UpdateInput();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">LateUpdate</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        Quaternion xQuaternion = Quaternion.AngleAxis(y_Angle, Vector3.up); <span class="comment">// 绕 Vector3.up 这个轴旋转，即水平偏移</span></span><br><span class="line">        Quaternion yQuaternion = Quaternion.AngleAxis(<span class="number">0</span>, Vector3.left);<span class="comment">// 由于player正题不会上下旋转，所以旋转角度设为0</span></span><br><span class="line">        <span class="comment">//AngleAxis (angle : float, axis : Vector3)</span></span><br><span class="line">        <span class="comment">//绕axis轴旋转angle，创建一个旋转</span></span><br><span class="line"></span><br><span class="line">        m_Trasform.parent.rotation = xQuaternion * yQuaternion; <span class="comment">// 让camera父辈 即 camera 旋转</span></span><br><span class="line"></span><br><span class="line">        yQuaternion = Quaternion.AngleAxis(-x_Angle, Vector3.left);<span class="comment">// player 不会旋转，但是人会旋转的</span></span><br><span class="line"></span><br><span class="line">        m_Trasform.rotation = xQuaternion * yQuaternion;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>记得将上述脚本挂载到 carema中</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CSharp&quot;&gt;&lt;a href=&quot;#CSharp&quot; class=&quot;headerlink&quot; title=&quot;CSharp&quot;&gt;&lt;/a&gt;CSharp&lt;/h1&gt;&lt;h2 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python计算机视觉</title>
    <link href="http://yoursite.com/2018/02/02/python%E8%AE%A1%E7%AE%97%E6%9C%BA%E8%A7%86%E8%A7%89/"/>
    <id>http://yoursite.com/2018/02/02/python计算机视觉/</id>
    <published>2018-02-02T12:59:01.000Z</published>
    <updated>2019-02-07T07:04:50.274Z</updated>
    
    <content type="html"><![CDATA[<h1 id="基本的图像操作和处理"><a href="#基本的图像操作和处理" class="headerlink" title="基本的图像操作和处理"></a>基本的图像操作和处理</h1><h2 id="PIL-python-图像处理类库"><a href="#PIL-python-图像处理类库" class="headerlink" title="PIL python 图像处理类库"></a>PIL python 图像处理类库</h2><ul><li>PIL (python imageing library ) <ul><li>提供了通用的图像处理功能</li><li>以及大量有用的基本图像操作<ul><li>比如图像的</li><li>缩放</li><li>裁剪</li><li>旋转</li><li>颜色转换</li><li>等等</li></ul></li></ul></li><li>从<a href="http://www.python.com/products/pil/下载" target="_blank" rel="noopener">http://www.python.com/products/pil/下载</a></li></ul><ul><li>读取一副图像</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line">pil_im = Image.open(<span class="string">'1234.jpg'</span>)</span><br></pre></td></tr></table></figure><ul><li>图像的<code>颜色转换</code> 使用 convert() 方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pil_im = Image.open(<span class="string">'1234.jpg'</span>).convert(<span class="string">'L'</span>)</span><br></pre></td></tr></table></figure><ul><li>更多例子参见 <a href="http://www.pythonware.com/library/pil/handbook/index.htm" target="_blank" rel="noopener">http://www.pythonware.com/library/pil/handbook/index.htm</a></li></ul><h3 id="转换图像格式"><a href="#转换图像格式" class="headerlink" title="转换图像格式"></a>转换图像格式</h3><ul><li>通过save方法，PIL可以将图像保存成多种格式的文件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">filelist = []</span><br><span class="line">filelist.append(<span class="string">'1234.jpg'</span>)</span><br><span class="line"><span class="keyword">for</span> infile <span class="keyword">in</span> filelist:</span><br><span class="line">    outfile = os.path.splitext(infile)[<span class="number">0</span>]+<span class="string">'.jpg'</span></span><br><span class="line">    <span class="keyword">if</span> infile != outfile:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            Image.open(infile).save(outfile)</span><br><span class="line"><span class="keyword">except</span> IOError:</span><br><span class="line">            print(<span class="string">"outfile error"</span>)</span><br></pre></td></tr></table></figure><ul><li>除了后缀变成了 <code>jpg</code>  ，上述代码的新文件名和原文件名相同</li><li>PIL函数会进行简单的检查，如果文件不是JPEG格式，会自动将其转换成JPEG格式<ul><li>如果转换失败，则会在控制台输出一个失败消息</li></ul></li></ul><h3 id="获取目录中所有jpg图像的文件名列表"><a href="#获取目录中所有jpg图像的文件名列表" class="headerlink" title="获取目录中所有jpg图像的文件名列表"></a>获取目录中所有jpg图像的文件名列表</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_imlist</span><span class="params">(path)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> [os.path.join(path,f) <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(path) <span class="keyword">if</span> f.endswith(<span class="string">'jpg'</span>)]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(get_imlist(<span class="string">'./'</span>))</span><br></pre></td></tr></table></figure><h3 id="创建缩略图"><a href="#创建缩略图" class="headerlink" title="创建缩略图"></a>创建缩略图</h3><ul><li>使用thumbnail()方法接受一个元祖参数（该参数指定生成缩略图的大小）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pil_im.thumbnail((<span class="number">128</span>,<span class="number">128</span>))</span><br></pre></td></tr></table></figure><h3 id="复制和粘贴图像区域"><a href="#复制和粘贴图像区域" class="headerlink" title="复制和粘贴图像区域"></a>复制和粘贴图像区域</h3><ul><li>使用crop()方法可以从一幅图像中裁剪指定区域</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">pil_im = Image.open(<span class="string">'123.jpg'</span>)</span><br><span class="line">print(pil_im)</span><br><span class="line">pil_im = pil_im.crop((<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>))</span><br><span class="line">pil_im.save(os.path.splitext(<span class="string">'12345'</span>)[<span class="number">0</span>] + <span class="string">'.jpg'</span>)</span><br><span class="line">print(pil_im)</span><br></pre></td></tr></table></figure><h3 id="调整尺寸和旋转"><a href="#调整尺寸和旋转" class="headerlink" title="调整尺寸和旋转"></a>调整尺寸和旋转</h3><ul><li>使用resize() 方法 可以调整一幅图像的尺寸，该方法的参数是一个元祖，利用指新图像的大小</li><li>使用 rotate() 方法 可以使用逆时针方式 表示 旋转角度， 参数是角度</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">pil_im = Image.open(<span class="string">'123.jpg'</span>)</span><br><span class="line">print(pil_im)</span><br><span class="line">pil_im = pil_im.resize((<span class="number">128</span>,<span class="number">128</span>))</span><br><span class="line">print(pil_im)</span><br><span class="line">pil_im.save(os.path.splitext(<span class="string">'1234'</span>)[<span class="number">0</span>] + <span class="string">'.jpg'</span>)</span><br><span class="line"></span><br><span class="line">pil_im = pil_im.rotate(<span class="number">50</span>)</span><br><span class="line">print(pil_im)   </span><br><span class="line">pil_im.save(os.path.splitext(<span class="string">'12345'</span>)[<span class="number">0</span>] + <span class="string">'.jpg'</span>)</span><br></pre></td></tr></table></figure><h2 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a>Matplotlib</h2><ul><li><p>Matplotlib 是一个 处理数学运算，绘制图表，或者在图像上绘制 点，直线和曲线很好的类库</p></li><li><p>安装 matplotlib</p><ul><li>python -m pip install matplotlib</li></ul></li></ul><h3 id="绘制-图像，点和线"><a href="#绘制-图像，点和线" class="headerlink" title="绘制 图像，点和线"></a>绘制 图像，点和线</h3><ul><li>Matplotlib 可以绘制出比较好的 条形图，饼状图，散点图等</li><li>但是，对于大多处计算机视觉应用来说，仅仅需要几个绘图命令</li></ul><ul><li>用画几个点和一条线</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像到数组中</span></span><br><span class="line">im = array(Image.open(<span class="string">'123.jpg'</span>))</span><br><span class="line">print(type(im))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制图像</span></span><br><span class="line">imshow(im)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 一些点</span></span><br><span class="line">x = [<span class="number">100</span>,<span class="number">100</span>,<span class="number">400</span>,<span class="number">400</span>]</span><br><span class="line">y = [<span class="number">200</span>,<span class="number">500</span>,<span class="number">200</span>,<span class="number">500</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用红色星状标记绘制点</span></span><br><span class="line">plot(x, y, <span class="string">'r*'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 绘制连接前两个点的线</span></span><br><span class="line">plot(x[:<span class="number">2</span>], y[:<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加标题，显示绘制的图像</span></span><br><span class="line">title(<span class="string">'Plotting:"empire.jpg"'</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><ul><li>绘制的四个点 分别对应 (x[0], y[0])，(x[1],y[1])，(x[2],[y2])，(x[3],y[3])</li><li>连接的是数组中的 前两个 x[:2] 就是 x[0],x[1]，y同理</li><li>show()命令首先打开图形用户界面（GUI），然后新建一个图像窗口，在每个脚本中仅能<code>调用一次</code>，而且一般在结尾调用</li><li><p>加上 <code>axis(&#39;off&#39;)</code> 可以不显示 x，y 轴</p></li><li><p>还有一些其他的命令</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">plot(x, y) <span class="comment"># 默认是蓝色实线</span></span><br><span class="line">plot(x, y, <span class="string">'r*'</span>) <span class="comment"># 红色星状标记</span></span><br><span class="line">plot(x, y, <span class="string">'go-'</span>) <span class="comment"># 带有圆圈标记的绿线</span></span><br><span class="line">plot(x, y, <span class="string">'ks:'</span>) <span class="comment"># 带有正方形标记的褐色虚线</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>命令</th><th>颜色</th></tr></thead><tbody><tr><td>‘b’</td><td>蓝色</td></tr><tr><td>‘g’</td><td>绿色</td></tr><tr><td>‘r’</td><td>红色</td></tr><tr><td>‘c’</td><td>青色</td></tr><tr><td>‘m’</td><td>品红</td></tr><tr><td>‘y’</td><td>黄色</td></tr><tr><td>‘k’</td><td>黑色</td></tr><tr><td>‘w’</td><td>白色</td></tr></tbody></table><table><thead><tr><th>命令</th><th>线的形状</th></tr></thead><tbody><tr><td>‘-‘</td><td>实线</td></tr><tr><td>‘–’</td><td>虚线</td></tr><tr><td>‘:’</td><td>点线</td></tr></tbody></table><table><thead><tr><th>命令</th><th>点的形状</th></tr></thead><tbody><tr><td>‘.’</td><td>点</td></tr><tr><td>‘o’</td><td>圆圈</td></tr><tr><td>‘s’</td><td>正方形</td></tr><tr><td>‘*’</td><td>星形</td></tr><tr><td>‘+’</td><td>加号</td></tr><tr><td>‘x’</td><td>×号</td></tr></tbody></table><h3 id="图像轮廓和直方图"><a href="#图像轮廓和直方图" class="headerlink" title="图像轮廓和直方图"></a>图像轮廓和直方图</h3><ul><li>因为绘制轮廓需要对每个坐标[x, y] 的像素值施加同一个阀值，所以需要将图像<code>灰度化</code> 即 convert(‘L’) </li><li>图像的直方图涌来表征该图像像素值的分布情况<ul><li>用一定数目的小区间（bin）来指定表征像素值的方位，每个小区间都会得到落入该小区间表示范围的像素数目</li><li>该（灰度）图像的<code>直方图</code>可以使用<code>hist()</code>函数绘制</li><li>hits() 函数的第二个参数指定小区间的数目</li><li>hits()函数只接受一维数组作为输入，所以在绘制图像直方图之前，必须对图像进行压平处理<ul><li>flatten()方法将任意数组按照优先准则转换成一维数组</li></ul></li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像到数组中</span></span><br><span class="line">im = array(Image.open(<span class="string">'12345.jpg'</span>).convert(<span class="string">'L'</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 新建一个图像</span></span><br><span class="line">figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不使用颜色信息</span></span><br><span class="line">gray()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在原点的左上角显示轮廓图像</span></span><br><span class="line">contour(im, origin=<span class="string">'image'</span>)</span><br><span class="line">axis(<span class="string">'equal'</span>)</span><br><span class="line">axis(<span class="string">'off'</span>)</span><br><span class="line">figure()</span><br><span class="line">hist(im.flatten(), <span class="number">128</span>)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><p><img src="./assets/show.png" alt="show"></p><h3 id="交互式标注"><a href="#交互式标注" class="headerlink" title="交互式标注"></a>交互式标注</h3><ul><li>有时候用户需要和某些应用交互，例如在一副图像中标记一些点，或者标注一些训练数据</li><li>PyLab库中的ginput() 函数就可以实现交互式标注</li><li>这里首先绘制图象，然后等待用户在绘图窗口区域点击三次</li><li>程序会自动将这些点击的坐标[x, y] 自动保存到 x 列表中</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像到数组中</span></span><br><span class="line">im = array(Image.open(<span class="string">'12345.jpg'</span>))</span><br><span class="line"></span><br><span class="line">imshow(im)</span><br><span class="line">print(<span class="string">'click 3 point'</span>)</span><br><span class="line">x = ginput(<span class="number">3</span>) <span class="comment"># 标记点有三个</span></span><br><span class="line">print(<span class="string">'you clicked'</span>, x)</span><br><span class="line">show()</span><br></pre></td></tr></table></figure><h2 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a>Numpy</h2><ul><li>NumPy 是非常有名的Python科学计算工具包，包含大量有用的思想<ul><li>数组对象（用来表示向量，矩阵，图象等）</li><li>线性代数等</li></ul></li><li>NumPy 中的 数组对象可以实现很多重要操作<ul><li>矩阵乘积</li><li>转置</li><li>解方程系统</li><li>向量乘积</li><li>归一化</li></ul></li><li>为图形变形，对变化进行建模，图象分类，图象聚类等提供了基础</li></ul><h3 id="图象数组表示"><a href="#图象数组表示" class="headerlink" title="图象数组表示"></a>图象数组表示</h3><ul><li>先前的例子中 使用 <code>array()</code>方法将图象转换为NumPy 的数组对象</li><li>NumPy中的数组对象是多维的，可以用来表示向量，矩阵和图象</li><li>一个数组对象很像一个列表(或者是列表的列表)，但是数组中所有元素必须具有相同的数据类型</li></ul><p><strong>小例子</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image</span><br><span class="line"><span class="keyword">from</span> pylab <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取图像到数组中</span></span><br><span class="line">im = array(Image.open(<span class="string">'12345.jpg'</span>))</span><br><span class="line"></span><br><span class="line">print(im.shape, im.dtype)</span><br><span class="line"></span><br><span class="line">im = array(Image.open(<span class="string">'12345.jpg'</span>).convert(<span class="string">'L'</span>), <span class="string">'f'</span>)</span><br><span class="line">print(im.shape, im.dtype)</span><br></pre></td></tr></table></figure><ul><li>输出为</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(2976, 3968, 3) uint8</span><br><span class="line">(2976, 3968) float32</span><br></pre></td></tr></table></figure><ul><li>每行的第一个元祖表示 图象数组的大小 (行，列，颜色通道)</li><li>紧接着的字符串表示数组元素的数据类型<ul><li>图象通道通常被编码为<code>无符号八位整数(uint8)</code></li><li>第二个因为进行过灰度处理，并且在创建数组时进行了额外的类型转换’f’，所以是float32(浮点型)</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;基本的图像操作和处理&quot;&gt;&lt;a href=&quot;#基本的图像操作和处理&quot; class=&quot;headerlink&quot; title=&quot;基本的图像操作和处理&quot;&gt;&lt;/a&gt;基本的图像操作和处理&lt;/h1&gt;&lt;h2 id=&quot;PIL-python-图像处理类库&quot;&gt;&lt;a href=&quot;#PIL-
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Spring Security 为了安全</title>
    <link href="http://yoursite.com/2018/01/31/Spring%20Security%20%E4%B8%BA%E4%BA%86%E5%AE%89%E5%85%A8/"/>
    <id>http://yoursite.com/2018/01/31/Spring Security 为了安全/</id>
    <published>2018-01-31T10:39:24.000Z</published>
    <updated>2019-02-07T07:05:40.688Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Spring-Security"><a href="#Spring-Security" class="headerlink" title="Spring Security"></a>Spring Security</h1><ul><li>Spring Security 支持：<ul><li>用户名+密码登录</li><li>手机号+短信认证</li></ul></li><li>Spring Social 支持：<ul><li>第三方认证(微信，qq等)</li></ul></li><li>Spring Security OAuth<ul><li>支持APP的上述三种登录方式</li><li>用户名+短信登录</li><li>手机号+短信认证</li><li>第三方认证</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Spring-Security&quot;&gt;&lt;a href=&quot;#Spring-Security&quot; class=&quot;headerlink&quot; title=&quot;Spring Security&quot;&gt;&lt;/a&gt;Spring Security&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Spring Secur
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>骚鸡儿的 Python</title>
    <link href="http://yoursite.com/2018/01/30/Python%E5%B0%8F%E8%BF%90%E7%94%A8/"/>
    <id>http://yoursite.com/2018/01/30/Python小运用/</id>
    <published>2018-01-30T10:39:24.000Z</published>
    <updated>2019-02-07T07:04:42.291Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Github上关注的库，定时检查是否更新"><a href="#Github上关注的库，定时检查是否更新" class="headerlink" title="Github上关注的库，定时检查是否更新"></a>Github上关注的库，定时检查是否更新</h1><h2 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h2><ul><li>通过访问 <a href="https://api.github.com/repos/usuiforhe/2048" target="_blank" rel="noopener">https://api.github.com/repos/usuiforhe/2048</a> 可以知道，github提供了一套API</li><li>即 “<a href="https://api.github.com/repose/&quot;" target="_blank" rel="noopener">https://api.github.com/repose/&quot;</a> + “用户名” + “/“ + “仓库名”<ul><li>可以查询 仓库发布时间</li><li>更新时间</li><li>所用语言</li><li>仓库大小</li><li>等等</li></ul></li><li>通过记录上次更新时间，可以与当前更新时间进行对比，如果不同则更新了</li></ul><p><img src="./assets/githubAPI.png" alt=""></p><ul><li>从图可以看出，返回的是一个json的数据格式</li><li>“updated_at” 即 更新时间</li></ul><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> webbrowser</span><br><span class="line"></span><br><span class="line">api_url = <span class="string">'https://api.github.com/repos/usuiforhe/2048'</span></span><br><span class="line">visit_url = <span class="string">'https://github.com/usuiforhe/2048'</span></span><br><span class="line"></span><br><span class="line">last_time = <span class="string">'2019-01-10T15:44:05Z'</span> <span class="comment"># 初始化时间</span></span><br><span class="line"></span><br><span class="line">headher = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    data = requests.get(api_url, headers=headher).json() <span class="comment"># 请求数据</span></span><br><span class="line"></span><br><span class="line">    new_time = data[<span class="string">'updated_at'</span>] <span class="comment"># 获取当前时间</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> new_time &gt; last_time:</span><br><span class="line">        last_time = new_time <span class="comment"># 更新时间</span></span><br><span class="line">        webbrowser.open(visit_url) <span class="comment"># 之后打开浏览器</span></span><br><span class="line"></span><br><span class="line">    time.sleep(<span class="number">3600</span>) <span class="comment"># 休息事件 3600s， 也就是说每一小时请求一次</span></span><br></pre></td></tr></table></figure><h1 id="展示特意隐藏起来的文件的小工具"><a href="#展示特意隐藏起来的文件的小工具" class="headerlink" title="展示特意隐藏起来的文件的小工具"></a>展示特意隐藏起来的文件的小工具</h1><h2 id="原理-1"><a href="#原理-1" class="headerlink" title="原理"></a>原理</h2><ul><li>在 linux/mac 系统中，只要文件夹或文件前面带有 ‘.’ 例如 ‘.text.py’ 则代表这是隐藏文件</li><li>在windows 系统中，不好实现…… 简单方法是将文件夹/文件名前面都加一个一个标识符，表示这个是被隐藏起来的</li></ul><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Tk()<span class="comment"># 创建窗口</span></span><br><span class="line"><span class="comment"># btn = Button(text='click me') # 实例化按钮</span></span><br><span class="line"><span class="comment"># btn.pack() # 显示按钮</span></span><br><span class="line"><span class="comment"># app.mainloop() </span></span><br><span class="line"></span><br><span class="line">label = Label(text=<span class="string">'All Hidden files'</span>, font=(<span class="string">'Hack'</span>, <span class="number">25</span>, <span class="string">'bold'</span>))<span class="comment"># 创建文字标签，内容为all hidden files，字体为font 中的 hack，大小为25，粗体</span></span><br><span class="line">label.pack()</span><br><span class="line"></span><br><span class="line">listbox = Listbox(height=<span class="number">5</span>) <span class="comment"># 展示列表</span></span><br><span class="line"><span class="comment"># listbox.insert(END, 'something') # end 代表末尾， 加入 something</span></span><br><span class="line"><span class="comment"># END 是 (0,0) 坐标，tkinter 里面将 END 定义为常量</span></span><br><span class="line">listbox.pack(fill=BOTH, expand=<span class="keyword">True</span>) <span class="comment"># fill 填充的意思，有 X 填充， Y轴填充，BOTH xy都填充，expand 为true则扩展到整个x或y</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_files</span><span class="params">(path)</span>:</span></span><br><span class="line">    files = os.listdir(path)</span><br><span class="line">    <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">        <span class="keyword">if</span> file.startswith(<span class="string">'.'</span>): <span class="comment"># linux 和 mac 隐藏文件是以 '.' 开头的</span></span><br><span class="line">            <span class="comment"># print(file)</span></span><br><span class="line">            listbox.insert(END, file)</span><br><span class="line"></span><br><span class="line">find_files(<span class="string">'/home/cong'</span>)</span><br><span class="line">app.mainloop()</span><br></pre></td></tr></table></figure><p><img src="./assets/tk_listbox.png" alt=""></p><h1 id="压缩图片的小工具"><a href="#压缩图片的小工具" class="headerlink" title="压缩图片的小工具"></a>压缩图片的小工具</h1><h2 id="原理-2"><a href="#原理-2" class="headerlink" title="原理"></a>原理</h2><ul><li>有一个库 PIL 库，可以实现压缩</li><li>以界面的形式与用户交互<ul><li>路径由用户决定</li><li>压缩大小由用户决定</li><li>即变量大都由用户决定</li></ul></li><li>用listbox显示路径中选中的图片</li><li>使用 grid() 方法设置 布局</li><li>PIL有个Image类，而tkinter中也有Image类<ul><li>因此 要 from PIL import Image as Img 这样就不会冲突了</li></ul></li><li>tkiner中的珊格布局有几种：pack(), grid() 等<ul><li>这几种不能混合使用，一个窗口中的布局 仅能使用一个</li></ul></li></ul><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image <span class="keyword">as</span> Img</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">path = []</span><br><span class="line"></span><br><span class="line"><span class="comment"># width 单位像素</span></span><br><span class="line"><span class="comment"># height 单位像素</span></span><br><span class="line"><span class="comment"># opcity 单位百分比 1~100</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_new_image</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> file_path <span class="keyword">in</span> path:</span><br><span class="line">        image = Img.open(file_path) <span class="comment"># 打开路径中的图片</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> window.children[<span class="string">'entry_width'</span>].get() == <span class="string">''</span>: <span class="comment"># 如果没有输入目标宽度，则保留宽度</span></span><br><span class="line">            width = image.size[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            width = int(window.children[<span class="string">'entry_width'</span>].get())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> window.children[<span class="string">'entry_height'</span>].get() == <span class="string">''</span>:<span class="comment"># 如果没有输入目标高度，则保留高度</span></span><br><span class="line">            height = image.size[<span class="number">1</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            height = int(window.children[<span class="string">'entry_height'</span>].get())</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> window.children[<span class="string">'entry_opcity'</span>].get() == <span class="string">''</span>:<span class="comment"># 如果没有输入目标压缩比，则默认不压缩</span></span><br><span class="line">            opcity = <span class="number">100</span></span><br><span class="line">        <span class="keyword">else</span> :</span><br><span class="line">            opcity = int(window.children[<span class="string">'entry_opcity'</span>].get())</span><br><span class="line">        </span><br><span class="line">        image.resize((width, height)).save(file_path+<span class="string">'new.jpg'</span>, quality=opcity) <span class="comment"># 设置图片宽高 将图片保存到新路径，并压缩 quality的 百分比</span></span><br><span class="line">    window.children[<span class="string">'listbox'</span>].delete(<span class="number">0</span>, END)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_path</span><span class="params">()</span>:</span></span><br><span class="line">    file_Names = askopenfilenames() <span class="comment"># 可以框选多个</span></span><br><span class="line">    lbox = window.children[<span class="string">'listbox'</span>] <span class="comment"># 获取window的子控件中name为 listbox 的</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> path</span><br><span class="line">    path = file_Names</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> file_Names:</span><br><span class="line">        <span class="keyword">if</span> name.split(<span class="string">'/'</span>)[<span class="number">-1</span>].endswith(<span class="string">'jpg'</span>) <span class="keyword">or</span> name.split(<span class="string">'/'</span>)[<span class="number">-1</span>].endswith(<span class="string">'png'</span>) <span class="keyword">or</span> name.split(<span class="string">'/'</span>)[<span class="number">-1</span>].endswith(<span class="string">'jpeg'</span>): </span><br><span class="line">            lbox.insert(END, name.split(<span class="string">'/'</span>)[<span class="number">-1</span>]) <span class="comment"># name为一个路径，所以以 '/' 为分隔符，获取文件名</span></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># def do()&#123;</span></span><br><span class="line"><span class="comment">#   print('1')</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"><span class="comment"># button = Button(text='click, command=do) 后面的参数 command 则是回调函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_window</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    window = Tk()</span><br><span class="line">    <span class="comment"># pack() 和 grid() 不能同时使用</span></span><br><span class="line">    Label(text=<span class="string">'Image compress tool'</span>, font=(<span class="string">'Hack'</span>, <span class="number">25</span>, <span class="string">'bold'</span>)).grid(row=<span class="number">0</span>, rowspan=<span class="number">2</span>, column=<span class="number">0</span>, columnspan=<span class="number">6</span>) <span class="comment"># 标题</span></span><br><span class="line"></span><br><span class="line">    Label(window, text=<span class="string">'宽度'</span>).grid(row=<span class="number">6</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>)</span><br><span class="line">    Label(window, text=<span class="string">'高度'</span>).grid(row=<span class="number">6</span>, column=<span class="number">2</span>, columnspan=<span class="number">2</span>)</span><br><span class="line">    Label(window, text=<span class="string">'压缩比'</span>).grid(row=<span class="number">6</span>, column=<span class="number">4</span>, columnspan=<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">    Entry(window, name=<span class="string">'entry_width'</span>).grid(row=<span class="number">7</span>, column=<span class="number">0</span>, columnspan=<span class="number">2</span>) <span class="comment"># 宽度输入框</span></span><br><span class="line">    Entry(window, name=<span class="string">'entry_height'</span>).grid(row=<span class="number">7</span>, column=<span class="number">2</span>, columnspan=<span class="number">2</span>) <span class="comment"># 高度输入框</span></span><br><span class="line">    Entry(window, name=<span class="string">'entry_opcity'</span>).grid(row=<span class="number">7</span>, column=<span class="number">4</span>, columnspan=<span class="number">2</span>) <span class="comment"># 压缩比</span></span><br><span class="line"></span><br><span class="line">    Listbox(window, name=<span class="string">'listbox'</span>, bg=<span class="string">'#f2f2f2'</span>,font=(<span class="string">'Hack'</span>, <span class="number">15</span>)).grid(row=<span class="number">2</span>, rowspan=<span class="number">4</span>, column=<span class="number">0</span>, columnspan=<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line">    Button(window, text=<span class="string">'打开'</span>, command=find_path).grid(row=<span class="number">8</span>,rowspan=<span class="number">2</span>, column=<span class="number">0</span>, columnspan=<span class="number">3</span>)</span><br><span class="line">    Button(window, text=<span class="string">'压缩'</span>, command=save_new_image).grid(row=<span class="number">8</span>,rowspan=<span class="number">2</span>, column=<span class="number">3</span>, columnspan=<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">    window.geometry(<span class="string">'450x350'</span>) <span class="comment"># 窗口大小</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> window</span><br><span class="line"></span><br><span class="line">window = make_window()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="./assets/save_pic.png" alt=""></p><h1 id="实时测速网络小工具"><a href="#实时测速网络小工具" class="headerlink" title="实时测速网络小工具"></a>实时测速网络小工具</h1><h2 id="原理-3"><a href="#原理-3" class="headerlink" title="原理"></a>原理</h2><ol><li><p>如何实现检测实时网速</p><ul><li>单位时间内电脑得到的数据量的大小</li><li><p>安装 psutil</p><ul><li>pip install psutil</li><li>process and system utilities</li><li>不仅可以通过一两行代码实现系统监控</li><li>还可以跨平台使用，支持Linux／UNIX／OSX／Windows等</li><li>是系统管理员和运维小伙伴不可或缺的必备模块</li></ul></li><li>psutil.net_io_counters() # 获取网络读写字节／包的个数<ul><li>获取的是累计数据量，因此需要前一秒减去后一秒，得到这一秒的数据量</li><li>电脑有很多网卡，我们只关心其中一个的话，需要加入参数net_io_counters(pernic=True)<ul><li>返回的是字典类型，比如我们只要 ‘en0’ 这个网络接口的数据，则是net_io_counters(pernic=True)[‘en0’]</li></ul></li></ul></li><li>不过psutil需要走系统接口，因此需要权限，因此必须sudo 启动</li></ul></li></ol><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> psutil</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">old_time = psutil.net_io_counters(pernic=<span class="keyword">True</span>)[<span class="string">'wlp7s0'</span>].bytes_recv <span class="comment"># 记录上次的数据量</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">update_bytes</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    new_time = psutil.net_io_counters(pernic=<span class="keyword">True</span>)[<span class="string">'wlp7s0'</span>].bytes_recv <span class="comment"># 当前记录量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> old_time</span><br><span class="line"></span><br><span class="line">    result = new_time-old_time </span><br><span class="line">    old_time = new_time <span class="comment"># 更新数据量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> result &gt; <span class="number">1024</span>*<span class="number">1024</span>:</span><br><span class="line">        byte.config(text=str(int(result/<span class="number">1024</span>/<span class="number">1024</span>)) + <span class="string">'MB/s'</span>)</span><br><span class="line">    <span class="keyword">elif</span> result &gt; <span class="number">1024</span>:</span><br><span class="line">        byte.config(text=str(int(result/<span class="number">1024</span>)) + <span class="string">'KB/s'</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        byte.config(text=str(result) + <span class="string">'B/s'</span>) <span class="comment"># 通过config 更改属性</span></span><br><span class="line"></span><br><span class="line">    byte.after(<span class="number">1000</span>, update_bytes) <span class="comment"># 设置一秒后一直函数，则语句每次调用，实现了一秒一次调用</span></span><br><span class="line"></span><br><span class="line">window = Tk()</span><br><span class="line">byte = Label(text=<span class="string">'0'</span>, font=(<span class="string">'Hack'</span>, <span class="number">25</span>, <span class="string">'bold'</span>))</span><br><span class="line">byte.pack()</span><br><span class="line">byte.after(<span class="number">1000</span>, update_bytes)<span class="comment"># 定时器，单位为 毫秒</span></span><br><span class="line">window.geometry(<span class="string">'180x30'</span>)</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="./assets/net_count.png" alt=""></p><h2 id="特殊情况"><a href="#特殊情况" class="headerlink" title="特殊情况"></a>特殊情况</h2><p><strong><em>如果 after 中的函数想要带有形式参数，但规定是不能加上括号</em></strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">after(<span class="number">1000</span>, <span class="keyword">lambda</span>:update_bytes(a))</span><br></pre></td></tr></table></figure><h1 id="能够运行脚本的工具"><a href="#能够运行脚本的工具" class="headerlink" title="能够运行脚本的工具"></a>能够运行脚本的工具</h1><h2 id="原理-4"><a href="#原理-4" class="headerlink" title="原理"></a>原理</h2><ol><li>展示有哪些脚本，直接用listbox存储，展示</li><li>运行，停止脚本<ul><li>python中有个库runpy 运行py脚本</li><li>自己运行自己run_path(‘copy.py’) 运行指定py文件</li></ul></li><li>如果直接执行该函数，会导致自身程序无法正常运行<ul><li>即 程序按 顺序执行，弹出的新窗口，新窗口是一个无限循环(mainloop) 的程序</li><li>导致 自身程序被卡死在 run_path() 这句号</li><li>需要用到多进程</li><li>from multiprocessing import Process</li><li>每个进程都要自己的ID即pid</li></ul></li></ol><h2 id="大坑"><a href="#大坑" class="headerlink" title="大坑"></a><strong><code>大坑</code></strong></h2><p><code>在网上搜了一下，说是由于两个线程抢占GUI资源导致的，去除其中一个线程中的控件句柄，说白了就是只能有一个线程来画界面。</code></p><ul><li>如果你选中的脚本也是需要绘制图形界面的话，就会出现下面的错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">XIO:  fatal IO error <span class="number">11</span> (Resource temporarily unavailable) on X server <span class="string">":0"</span></span><br><span class="line">      after <span class="number">6014</span> requests (<span class="number">6014</span> known processed) <span class="keyword">with</span> <span class="number">0</span> events remaining.</span><br><span class="line">[xcb] Unknown sequence number <span class="keyword">while</span> processing queue</span><br><span class="line">[xcb] Most likely this <span class="keyword">is</span> a multi-threaded client <span class="keyword">and</span> XInitThreads has <span class="keyword">not</span> been called</span><br><span class="line">[xcb] Aborting, sorry about that.</span><br><span class="line">python3: ../../src/xcb_io.c:<span class="number">259</span>: poll_for_event: Assertion `!xcb_xlib_threads_sequence_lost<span class="string">' failed.</span></span><br><span class="line"><span class="string">已放弃 (核心已转储)</span></span><br></pre></td></tr></table></figure><ul><li><code>只能有一个线程来画界面</code></li></ul><h2 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> runpy <span class="keyword">import</span> run_path</span><br><span class="line"><span class="keyword">from</span> tkinter <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> tkinter.filedialog <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> multiprocessing <span class="keyword">import</span> Process</span><br><span class="line"><span class="keyword">import</span> multiprocessing</span><br><span class="line"></span><br><span class="line"><span class="comment"># run_path('copy.py') 运行指定py文件</span></span><br><span class="line"><span class="comment"># 如果直接执行该函数，会导致自身程序无法正常运行</span></span><br><span class="line"></span><br><span class="line">path_pys = []</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run_path_py</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> py <span class="keyword">in</span> path_pys:</span><br><span class="line">        print(py)</span><br><span class="line">        p = multiprocessing.Process(name=<span class="string">'my_process'</span>,target = <span class="keyword">lambda</span>:run_path(py   )) <span class="comment"># 创建进程</span></span><br><span class="line">        <span class="comment"># target 应该是个函数，这里不想再新写函数，所以用了lambda表达式</span></span><br><span class="line">        p.start()</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">end_path_py</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">for</span> proce <span class="keyword">in</span> multiprocessing.active_children(): <span class="comment"># 获取运行进程的列表</span></span><br><span class="line">        <span class="keyword">if</span> proce.name == <span class="string">'my_process'</span>:</span><br><span class="line">            proce.terminate()</span><br><span class="line">    window.children[<span class="string">'listbox'</span>].delete(<span class="number">0</span>, END)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_path_py</span><span class="params">()</span>:</span></span><br><span class="line">    file_names = askopenfilenames()</span><br><span class="line">    lbox = window.children[<span class="string">'listbox'</span>]</span><br><span class="line">    <span class="keyword">for</span> name <span class="keyword">in</span> file_names:</span><br><span class="line">        <span class="keyword">if</span> name.split(<span class="string">'/'</span>)[<span class="number">-1</span>].endswith(<span class="string">'py'</span>) <span class="keyword">and</span> <span class="keyword">not</span> name.split(<span class="string">'/'</span>)[<span class="number">-1</span>] <span class="keyword">in</span> path_pys:</span><br><span class="line">            lbox.insert(END, name.split(<span class="string">'/'</span>)[<span class="number">-1</span>])</span><br><span class="line">            print(name)</span><br><span class="line">            path_pys.append(name)</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">make_window</span><span class="params">()</span>:</span></span><br><span class="line">    window = Tk()</span><br><span class="line"></span><br><span class="line">    Label(text=<span class="string">'运行脚本'</span>)</span><br><span class="line"></span><br><span class="line">    Listbox(window, name=<span class="string">'listbox'</span>, bg=<span class="string">'#f2f2f2'</span>,font=(<span class="string">'Hack'</span>, <span class="number">15</span>)).pack()</span><br><span class="line"></span><br><span class="line">    Button(window, text=<span class="string">'添加'</span>, command=add_path_py).pack()</span><br><span class="line">    Button(window, text=<span class="string">'运行'</span>, command=run_path_py).pack()</span><br><span class="line">    Button(window, text=<span class="string">'结束'</span>, command=end_path_py).pack()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> window</span><br><span class="line"></span><br><span class="line">window = make_window()</span><br><span class="line">window.mainloop()</span><br></pre></td></tr></table></figure><p><img src="./assets/process.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Github上关注的库，定时检查是否更新&quot;&gt;&lt;a href=&quot;#Github上关注的库，定时检查是否更新&quot; class=&quot;headerlink&quot; title=&quot;Github上关注的库，定时检查是否更新&quot;&gt;&lt;/a&gt;Github上关注的库，定时检查是否更新&lt;/h1&gt;&lt;
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>算法训练板子</title>
    <link href="http://yoursite.com/2018/01/26/%E7%AE%97%E6%B3%95%E8%AE%AD%E7%BB%83%E6%9D%BF%E5%AD%90/"/>
    <id>http://yoursite.com/2018/01/26/算法训练板子/</id>
    <published>2018-01-26T12:59:01.000Z</published>
    <updated>2019-02-16T15:37:10.795Z</updated>
    
    <content type="html"><![CDATA[<h1 id="题目1"><a href="#题目1" class="headerlink" title="题目1"></a>题目1</h1><h2 id="正题"><a href="#正题" class="headerlink" title="正题"></a>正题</h2><p>经过了选号和漫长的等待，处女座终于拿到了给小姐姐定制的手环，小姐姐看到以后直呼666！</p><p>处女座其实也挺喜欢6这个数字的，实际上他做手环的时候选取的k=6。<br>所以他对于包含数码6的数字极其敏感。<br>每次看到像4567这样的数字的时候他的心就像触电了一样，想起了小姐姐。</p><p>现在你要给处女座展示一系列数字，你想知道他的内心会激动多少次。对于同一个数字，<br>他最多只会激动一次，即如果这个数是66666，他还是只会激动一次。</p><h2 id="输入描述"><a href="#输入描述" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>一行包括两个数字l,r，表示你给处女座展示的数字范围为[l,r]。<br>输出描述:<br>一行一个整数，表示处女座内心激动的次数。</p><h2 id="示例1"><a href="#示例1" class="headerlink" title="示例1"></a>示例1</h2><p>输入<br>10 20<br>输出<br>1</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line">LL l,r;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(x&gt;<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(x%<span class="number">10</span>==<span class="number">6</span>) <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        x/=<span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">solve</span><span class="params">(LL x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;=<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(LL i=x/<span class="number">10</span>*<span class="number">10</span>;i&lt;=x;i++)</span><br><span class="line">        <span class="keyword">if</span>(check(i)) cnt++;</span><br><span class="line">    <span class="keyword">return</span> solve(x/<span class="number">10</span><span class="number">-1</span>)*<span class="number">9</span>+cnt+x/<span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;l&gt;&gt;r;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;solve(r)-solve(l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目2"><a href="#题目2" class="headerlink" title="题目2"></a>题目2</h1><h2 id="正题-1"><a href="#正题-1" class="headerlink" title="正题"></a>正题</h2><p>处女座放完了”高利贷”，拿到了不少的资金，又可以和小姐姐约会啦！（之前不还是攒钱打比赛的吗）现在处女座拿到了一份宁波市旅游地图决定和小姐姐一起去玩耍。他们来到了动物园，去参观里面的动物。但是很不幸的是，他们在游玩的途中遇到了一只恶龙。</p><p>恶龙长有n个头，但经过了处女座的调教，恶龙变得善良了一些。它的n个头每个头要么仍是邪恶的头，用“1”表示，要么已经变得善良，用“0”表示，因而恶龙的n个头就可以用n位01串来表示。而此时处女座要发挥自己的勇士形象，要把所有的龙头都变成0000⋯000000⋯00完全善良的龙头。每一次，他可以砍掉龙最右侧的一个头，同时龙会在最左侧长出新的一个头，以保证龙头数量不变。如果他砍掉的是一个1，即邪恶的头，他可以决定龙在最左侧会长出什么样的头；但如果他砍掉了一个善良的头，那么玻璃心的恶龙将会在左侧不受控制的长出一个随机的头，既可能是善良的头，也可能是邪恶的头，而且它总会与处女座作对，尽力的破坏他的计划。</p><p>现在给你一个恶龙头的初始状态，即一个01串，请帮助处女座判断一下，能否在有限步之内让全部的龙头都变成善良的龙头。<br>输入描述:<br>输入第一行T，表示用例组数。</p><p>之后T行，每行一个01串S表示龙头的初始状态，“0”表示善良的头，“1”表示邪恶的头。</p><h2 id="输出描述"><a href="#输出描述" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>对于每组数据，处女座能否将全部的龙头变成善良的头，可以的话输出“cnznb”，不可以则输出“ljcnz”（不含引号）。<br>示例1<br>输入<br>1<br>1111<br>输出<br>cnznb  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> t;<span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;t);</span><br><span class="line">    <span class="keyword">while</span>(t--)</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">"cnznb"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目3"><a href="#题目3" class="headerlink" title="题目3"></a>题目3</h1><h2 id="正题-2"><a href="#正题-2" class="headerlink" title="正题"></a>正题</h2><p>处女座靠着自己的家教本领赚够了去比赛的钱，于是开启了疯狂训练。在每个夜深人静第二天不收作业的夜晚，他都会开始刷题。</p><p>“今日又是一个刷题的夜晚。”他挑选了n道题开始刷，而题太多，刷不掉，理还乱（呜呜）、自己没有解决的题目每分钟都会给他带来<br>b<br>i<br>bi的疲倦值，而解决每一道题目都需要花费<br>a<br>i<br>ai分钟的时间。</p><p>当然，处女座一般都是考虑清楚了再写题的，所以他在写题的时候都会精神抖擞，也就是说，当前正在写的那一题并不会给他带来任何疲劳。</p><p>为了迎接后天要收的作业和明天要遇到的小姐姐，他想让今晚的刷题尽可能的轻松，那请你帮他找出最小所需要的疲倦值吧。</p><h2 id="输入描述-1"><a href="#输入描述-1" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>输入数据共包括n+1行，第一行包括一个n表示处女座今晚打算训练的题的数量。</p><p>接下来n行，每行包括两个整数ai,bi，分别表示处女座刷掉本题要花费的时间和本题每分钟会带来的疲倦值。<br>输出描述:<br>一行包括一个整数，表示处女座今晚训练会产生的最小疲倦值。<br>示例1<br>输入<br>6<br>6 1<br>4 5<br>4 3<br>6 2<br>8 1<br>2 6<br>输出<br>86   </p><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>先做第6个题，增加（1+5+3+2+1）*2= 24 点疲倦值，再做第2个题，增加28点疲倦值，随后依次是第3,4,1,5道题，增加16,12,6点疲倦值。总共的疲倦值是24 + 28 + 16 + 12 + 6 = 86点。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"> </span><br><span class="line">ll c;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">A</span> &#123;</span></span><br><span class="line">    ll a,b;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(A t)&#123;</span><br><span class="line">        <span class="keyword">return</span> a*t.b&lt;b*t.a;</span><br><span class="line">    &#125;</span><br><span class="line">    A()&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a&gt;&gt;b;c+=b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    c=<span class="number">0</span>;</span><br><span class="line">    ll n,m=<span class="number">0</span>;<span class="built_in">cin</span>&gt;&gt;n;A da[n];</span><br><span class="line">    sort(da,da+n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;n;++i)&#123;</span><br><span class="line">        m+=(c-da[i].b)*da[i].a;</span><br><span class="line">        c-=da[i].b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;m;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目4"><a href="#题目4" class="headerlink" title="题目4"></a>题目4</h1><h2 id="输入描述-2"><a href="#输入描述-2" class="headerlink" title="输入描述"></a>输入描述</h2><p>输入描述:<br>仅一行三个整数 f1,f2,a,分别表示两只手产生的力的大小以及它们之间的夹角。<br>输出描述:<br>输出一个实数表示两力合力的大小，要求相对误差或绝对误差不超过 10^−6</p><h2 id="示例1-1"><a href="#示例1-1" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入"><a href="#输入" class="headerlink" title="输入"></a>输入</h3><p>6 8 90</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>10.0000000000</p><h2 id="示例2"><a href="#示例2" class="headerlink" title="示例2"></a>示例2</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入"></a>输入</h3><p>10 10 60</p><h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出"></a>输出</h3><p>17.3205080757</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159265</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> f1, f2;</span><br><span class="line">    <span class="keyword">int</span> r;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; f1 &gt;&gt; f2 &gt;&gt; r;</span><br><span class="line">    <span class="keyword">double</span> r1 = <span class="built_in">cos</span>(r * PI / <span class="number">180.0</span> );</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%.10lf"</span>, <span class="built_in">sqrt</span>(f1*f1*<span class="number">1.0</span> + f2*f2*<span class="number">1.0</span> + <span class="number">2</span>*f1*f2*r1));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目4-1"><a href="#题目4-1" class="headerlink" title="题目4"></a>题目4</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>Applese 和 Bpplese 在玩取石子游戏，规则如下：</p><p>一共有偶数堆石子排成一排，每堆石子的个数为 ai。两个人轮流取石子，Applese先手。每次取石子只能取最左一堆或最右一堆，且必须取完。最后取得的石子多者获胜。假设双方都足够聪明，最后谁能够获胜呢？</p><p>【输入描述】<br>第一行是一个正偶数 n，表示石子的堆数。<br>第二行是 n 个正整数 a1,a2,…,an，表示每堆石子的个数。  </p><p>2≤n≤10^5<br>1≤ai≤10^5<br>∑ai 为奇数  </p><h2 id="输出描述-1"><a href="#输出描述-1" class="headerlink" title="输出描述"></a>输出描述</h2><p>输出一个字符串“Applese”或“Bpplese”，表示胜者的名字。  </p><h2 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h2><p>示例1  </p><p>输入<br>4<br>2 3 3 3<br>输出<br>Applese  </p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p><code>思路：博弈</code></p><p>由于堆数 n 是偶数，那么先手方有必胜策略：选择所有的奇数项或者偶数项</p><p>先手方首先比较奇数项之和和偶数项之和，由于石子总数是奇数，那么一定不相等，因此有：  </p><p>  1）若奇数项之和比较大，那么先手就取第一项，剩下的序列首尾都是偶数项，后手就只能取偶数项，然后又剥离出一个奇数项，接着被先手取走，剩下的首尾又是偶数项，以此类推，先手就能取到所有的奇数项，后手只能取到所有的偶数项，那么先手获胜  </p><p>2）若偶数项之和比较大，那么先手就取最后一项，剩下的序列首尾都是奇数项，后手就只能取奇数项，然后又剥离出一个偶数项，接着被先手取走，剩下的首尾又是奇数项，以此类推，先手就能取到所有的偶数项，后手只能取到所有的奇数项，那么先手获胜  </p><p>故而直接输出 Applese 即可  </p><h1 id="题目5"><a href="#题目5" class="headerlink" title="题目5"></a>题目5</h1><h2 id="题干："><a href="#题干：" class="headerlink" title="题干："></a>题干：</h2><p>小希最近想知道一个东西，就是A+B=A|B(其中|为按位或)的二元组有多少个。</p><p>当然，直接做这个式子对小希来说太难了，所以小希改变了一些条件，她仅想知道其中A,B&lt;NA,B&lt;N的情况，其中N为2的幂次。</p><p>当然，(A=1,B=0)和(A=0,B=1)被认为是不同的二元组。</p><h2 id="输入描述-3"><a href="#输入描述-3" class="headerlink" title="输入描述:"></a>输入描述:</h2><p>第一行输入一个非负整数M。</p><p>N=2^M,M≤100 </p><p>即2的M次为N。</p><h2 id="输出描述-2"><a href="#输出描述-2" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>一个整数ans，对998244353取模。</p><h2 id="示例1-2"><a href="#示例1-2" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入-2"><a href="#输入-2" class="headerlink" title="输入"></a>输入</h3><p>0</p><h3 id="输出-2"><a href="#输出-2" class="headerlink" title="输出"></a>输出</h3><p>1</p><h2 id="示例2-1"><a href="#示例2-1" class="headerlink" title="示例2"></a>示例2</h2><h3 id="输入-3"><a href="#输入-3" class="headerlink" title="输入"></a>输入</h3><p>71</p><h3 id="输出-3"><a href="#输出-3" class="headerlink" title="输出"></a>输出</h3><p>588378066</p><h2 id="解题报告："><a href="#解题报告：" class="headerlink" title="解题报告："></a>解题报告：</h2><p>写个暴力打表发现，答案就是3^m。  </p><p>一个题解：  </p><p>很显然a+b=a|b等式成立的条件是a和b的二进制表示中，在同一位不能全为1<br>假设现在a+b=a|b，a和b是已知的，且a,b写成二进制均为n-1位数（可含前导零）。那么现在把a,b添加一位数，变成n位数（显然n位数都能从n-1位变过来），如果等式仍要成立的话，那么只有3种情况  </p><p>a后添0，b后添0<br>a后添0，b后添1<br>a后添1，b后添0<br>也就是说<code>从n-1位数变为n位数，组合的方法数变为原来的3倍</code>，且<code>n=0时答案为1</code>显然。  </p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">初始情况下都为<span class="number">0</span>位，AB都为<span class="number">0</span>，则答案 ans=<span class="number">1</span></span><br><span class="line">如果 添加<span class="number">1</span>位，那么AB组合增加<span class="number">3</span>种方式(A+<span class="number">0</span> B+<span class="number">0</span>, A+<span class="number">0</span> B+<span class="number">1</span>, A+<span class="number">1</span> B+<span class="number">0</span>)，则为 <span class="number">1</span>*<span class="number">3</span></span><br><span class="line">以此类推，可以得出最终答案 ans = <span class="number">3</span>^m</span><br></pre></td></tr></table></figure><h2 id="我的题解："><a href="#我的题解：" class="headerlink" title="我的题解："></a>我的题解：</h2><p>其实拆成含有前导零的m位数，考虑每一位，只有分别在(0,0)(0,1)(1,0)的三种情况时满足条件，根据乘法原理，得到答案。</p><h2 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> ll long long</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ll mod = <span class="number">998244353</span>;</span><br><span class="line"><span class="function">ll <span class="title">qpow</span><span class="params">(ll a, ll k)</span> </span>&#123;</span><br><span class="line">    ll res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(k) &#123;</span><br><span class="line">        <span class="keyword">if</span>(k&amp;<span class="number">1</span>) res = (a*res)%mod;</span><br><span class="line">        k&gt;&gt;=<span class="number">1</span>;</span><br><span class="line">        a = (a*a)%mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m;</span><br><span class="line">    <span class="built_in">cin</span>&gt;&gt;m;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (qpow(<span class="number">3</span>,m));</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span> ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目6"><a href="#题目6" class="headerlink" title="题目6"></a>题目6</h1><h2 id="题目描述-1"><a href="#题目描述-1" class="headerlink" title="题目描述"></a>题目描述</h2><p>小希希望你构造一个最小的正整数，使得其有n个因子。<br>输入描述:<br>第一行一个整数T表示数据组数</p><p>每组数据第一行输入一个正整数n，表示其因子数。</p><p>n≤1,000,000 T≤1,000,000</p><h2 id="输出描述-3"><a href="#输出描述-3" class="headerlink" title="输出描述:"></a>输出描述:</h2><p>输出一行一个整数，表示你构造出的这个数。注意：你需要保证你构造的数<br>≤1,000,000，如果在这个范围里面无法构造出一个正整数满足条件，请输出-1。</p><h2 id="示例1-3"><a href="#示例1-3" class="headerlink" title="示例1"></a>示例1</h2><h3 id="输入-4"><a href="#输入-4" class="headerlink" title="输入"></a>输入</h3><p>2<br>4<br>5</p><h3 id="输出-4"><a href="#输出-4" class="headerlink" title="输出"></a>输出</h3><p>6<br>16</p><h2 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn=<span class="number">1e6</span>+<span class="number">10</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> min_num[maxn],num[maxn]=&#123;<span class="number">0</span>&#125;;<span class="comment">//min_num[n]记录因子数为 n的最小数</span></span><br><span class="line">    fill(min_num,min_num+maxn,INT_MAX);<span class="comment">//num[i]记录 i的因子数</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=i;j&lt;=<span class="number">1000000</span>;j+=i)</span><br><span class="line">        &#123;                     <span class="comment">//j=i,2i,3i,4i...</span></span><br><span class="line">            num[j]++;         <span class="comment">//j都含有因子 i，所以 num[j]++</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">1000000</span>;i++)</span><br><span class="line">    &#123;                                       <span class="comment">//再次从1遍历到1000000</span></span><br><span class="line">        <span class="keyword">if</span>(min_num[num[i]]==INT_MAX)        <span class="comment">//这样得到的一定是最小数</span></span><br><span class="line">            min_num[num[i]]=i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;n);</span><br><span class="line">        <span class="keyword">if</span>(min_num[n]==INT_MAX)</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"-1\n"</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,min_num[n]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="题目7"><a href="#题目7" class="headerlink" title="题目7"></a>题目7</h1><h2 id="题目描述-2"><a href="#题目描述-2" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个数组，每个位置的值代表一个高度。那么整个数组可以看成一个直方图，如果把这个直方图当做容器的话，求这个容器能装多少水？</p><p>例如：数组：3，1，2，4。能装3格的水，所以答案为3</p><ul><li>黑色为直方图容器，蓝色为水</li></ul><table><br>    <tr><br>        <td style="width:20px;height:20px"></td><br>        <td style="width:20px;height:20px"></td><br>        <td style="width:20px;height:20px"></td><br>        <td style="width:20px;height:20px;background-color:black"></td><br>    </tr><br>    <tr><br>        <td style="width:20px;height:20px;background-color:black"></td><br>        <td style="width:20px;height:20px;background-color:blue"></td><br>        <td style="width:20px;height:20px;background-color:blue"></td><br>        <td style="width:20px;height:20px;background-color:black"></td><br>    </tr><br>    <tr><br>        <td style="width:20px;height:20px;background-color:black"></td><br>        <td style="width:20px;height:20px;background-color:blue"></td><br>        <td style="width:20px;height:20px;background-color:black"></td><br>        <td style="width:20px;height:20px;background-color:black"></td><br>    </tr><br>    <tr><br>        <td style="width:20px;height:20px;background-color:black"></td><br>        <td style="width:20px;height:20px;background-color:black"></td><br>        <td style="width:20px;height:20px;background-color:black"></td><br>        <td style="width:20px;height:20px;background-color:black"></td><br>    </tr><br>    <tr><br>        <td style="width:20px;height:20px">3</td><br>        <td style="width:20px;height:20px">1</td><br>        <td style="width:20px;height:20px">2</td><br>        <td style="width:20px;height:20px">4</td><br>    </tr><br></table><h2 id="题目转换一下"><a href="#题目转换一下" class="headerlink" title="题目转换一下"></a>题目转换一下</h2><p>求第i个位置上能放多少水，求左右两边的最大值，如果都比自己大，则能放 两个最大值 小的那个值减去 位置i的值的水；如果比自己小则为0。</p><p>转换成：给你一个数组有n个数，给你n个位置i，求 数组 0位置到 i 位置的最大值和i位置到n-1位置的最大值</p><h2 id="输入描述-4"><a href="#输入描述-4" class="headerlink" title="输入描述"></a>输入描述</h2><ul><li>一个数组</li><li>n个位置</li></ul><h2 id="输出描述-4"><a href="#输出描述-4" class="headerlink" title="输出描述"></a>输出描述</h2><ul><li>每个位置的 左边的最大值和右边的最大值</li></ul><h2 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h2><h3 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h3><ul><li>用一个数组，每逢碰到比小的就把自己存进去，每逢碰到比自己大的就不能存</li><li><p>例如：</p><ul><li>原数组： 1,2,3,0,1,6,2,3,4,5</li><li>从左到右遍历数组，自定义数组1就变成：1,2,3,3,3,6,6,6,6,6</li><li>从右到左遍历数组，自定义数组2就编程：6,6,6,6,6,6,6,5,5,5</li><li>顺序从左到右依次是：<ul><li>存入1</li><li>第i位置的原数组 2 比 自定义数组 i-1位置的 1 大，i位置存入2</li><li>第i位置的原数组 3 比 自定义数组 i-1位置的 2 大，i位置存入3</li><li>第i位置的原数组 0 比 自定义数组 i-1位置的 3 小，i位置存入3</li><li>第i位置的原数组 1 比 自定义数组 i-1位置的 3 大，i位置存入3</li><li>第i位置的原数组 6 比 自定义数组 i-1位置的 3 大，i位置存入6</li><li>……</li></ul></li></ul></li><li><p>设 原数组为 arr[]，自定数组1为h[]，自定义数组2为r[]</p><ul><li>h[i] 就 代表 arr[0~i]的最大值</li><li>r[i] 就 代表 arr[i~n-1]的最大值</li></ul></li></ul><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li>不用到数组</li><li>两边元素不可能有水 位置0 和 位置 n-1</li><li>定义左指针和右指针，左指针从左往右，右指针从右往左，分别记录自己碰到的最大值</li><li>例如：3，1，4，6，2，5<ul><li>Lmax = 3, Rmax = 5， sum = 0</li><li>而后 L 指向 位置1， R 指向 位置 4</li><li>比较L 和 R 指向的值的大小，如果 L值 大于 Lmax 则更新，同理 R 也是；反之 向中心移动 L R 指针中指向值小的指针</li><li>sum += Lmax - 3，L指针右移</li><li>更新Lmax的值，因为4为更大的值，因此sum不加任何值</li><li>sum += Rmax - 2， R指针左移</li><li>以此类推</li></ul></li></ul><h1 id="题目8"><a href="#题目8" class="headerlink" title="题目8"></a>题目8</h1><h2 id="题目描述-3"><a href="#题目描述-3" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定数组，求数组的两个不相交子数组的最大值</p><h2 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h2><ul><li>我们知道 在O(n)的事件内求出最大子数组的方法</li><li>i从0到n-1 便利，求出数组 [0 ~ i ] 的最大子数组，存到数组Larr[]中；之后i从[n-1 ~ 0]，求出数组[i ~ n-1] 的最大子数组，存到数组Rarr[]中</li><li>例如：Larr数组</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> maxcur = MIN_VALUE;</span><br><span class="line"><span class="keyword">int</span> cur = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line">cur += arr[i];</span><br><span class="line">    maxcur = max(maxcur, cur);</span><br><span class="line">    Larr[i] = maxcur;</span><br><span class="line">    cur = cur&lt;<span class="number">0</span>? <span class="number">0</span>:cur;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 用O(n)的时间获得Larr数组</span></span><br></pre></td></tr></table></figure><ul><li>之后就能 判断 哪两个不想交的 子数组的最大和 的值是多少</li><li>例如：位置i，[0~i]的最大值为 Larr[i]，[i+1~n-1]的最大值是 Rarr[i+1]</li><li>时间复杂度O(n)，空间复杂度O(n)</li></ul><h1 id="题目9"><a href="#题目9" class="headerlink" title="题目9"></a>题目9</h1><h2 id="题目描述-4"><a href="#题目描述-4" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定长度为N的整行数组arr</p><p>可以划分成左右两个部分，左部分为[0~k]右部分为[k+1~n-1]</p><p>求 左部分的最大值减去右部分最大值的绝对值之中，最大是多少？</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例"></a>样例</h2><p>数组为 [2,7,3,1,1]</p><ul><li>划分1：[2,7]，[3,1,1]，则左边最大值为7，右边最大值为3，差的绝对值为4</li><li>划分2：[2,7,3]，[1,1]，则左边最大值为7，右边最大值为1，差的绝对值为6</li><li>……</li><li>故，答案为6，其值最大</li></ul><h2 id="解法-1"><a href="#解法-1" class="headerlink" title="解法"></a>解法</h2><ol><li>先求出整个数组的最大值max，因为无论如何，max一定会参与减法计算，因为它是全局最大值</li><li>如果 max 被分到 左边数组，右边数组比包含 arr[n-1]，那么右边数组最大值最小也是arr[n-1]<ul><li>如果 arr[n-1] 左边有比arr[n-1]更大的值，我们可以把那个值包含到 左边数组，这样右边数组的值更小</li><li>如果 arr[n-1] 左边有比arr[n-1]更小的值，那无论放到哪无所谓，不影响左右两边数组的最大值</li></ul></li><li>如果 max 被分到 右边数组，左边数组比包含 arr[0]，那么左边数组最大值最小也是arr[0]，原理同理</li></ol><h1 id="题目10"><a href="#题目10" class="headerlink" title="题目10"></a>题目10</h1><h2 id="题目描述-5"><a href="#题目描述-5" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个整行矩阵map，其中的值只有0和1两种</p><p>求其中全是1的所有矩形区域中，最大的矩阵的区域为1的数量</p><p>例如：</p><p>1 1 1 0</p><p>最大矩形区域有3个1，故输出3</p><p>例如：</p><p>1 0 1 1</p><p>1 1 1 0</p><p>1 1 1 0</p><p>其中最大矩形区域有6个1，故输出6</p><h2 id="解法-2"><a href="#解法-2" class="headerlink" title="解法"></a>解法</h2><ul><li><p>单调栈</p><ul><li>什么是单调栈？<ul><li>默认是在数组中没有重复值的情况下，用来在O(n)的时间内求出所有数左边最近的比该数大的值，和右边最近的比该数大的值</li><li>比如 3, 2, 1, 4, 6, 8</li><li>3 左边 没有 右边 为 4</li><li>2 左边 为3 右边 为 4</li><li>1 左边 为2 右边 为4</li><li>4 左边 没有 右边 为6</li><li>……</li></ul></li><li>如何使用？<ul><li>利用一个栈，直接压入第一个数，3</li><li>这个栈的规则是 下面的数比上面的数<code>大</code></li><li>因此顺序是 先入3， 再入2， 再入1，因此知道 2 左边比2大的是3,1 左边 比 1 大的是 2</li><li>到4的时候，栈顶为1，故弹出1，因此知道1 右边比 1 大的是 4；弹出2，因此知道 2 右边比 2 大的是 4；弹出3 因此知道 3 右边比 3 大的是 4，压入 4</li><li>到 6，弹出 4，故知道 4 右边比 4 大的是 6</li><li>到 8，弹出 6，故知道 6 右边比 6 大的是 8</li><li><code>如果最后 栈 不为空，要特殊处理</code></li></ul></li><li>又或者可以求，数组中每个位数离该位最近的左右两边比该位小的数<ul><li>比如：3,2,1,6,5,4,7,0</li><li>3 左边 无 右边 2</li><li>2 左边 无 右边 1</li><li>1 左边 无 右边 0</li><li>6 左边 1 右边 5</li><li>……</li></ul></li><li>如何使用？<ul><li>利用一个栈，规则是 下面的数比上面的数<code>小</code></li><li>直接压入 3</li><li>遇到 2，3 比 2 大，故弹出 3，因此 3 右边 比 3 小的数是 2</li><li>遇到 1，2 比 1 大，故弹出 2，因此 2 右边 比 2 小的数是 1</li><li>遇到 6，6 比 1 大，故压入6， 因此 6 左边 比6 小的数是 1</li><li>遇到 5，5 比 6 小，故弹出6， 因此 6 右边 比6 小的数是5，再与1 比较，故5 左边比 5小的数是1，压入 5</li><li>……</li><li><code>如果最后 栈 不为空，要特殊处理</code></li></ul></li></ul></li><li><p>遍历必须以第i行为底的矩阵，i 属于 [0,n-1]</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 0 1 1 1</span><br><span class="line">1 1 0 1 0</span><br><span class="line">1 1 1 0 0</span><br><span class="line"></span><br><span class="line">以 第0行 为底，矩阵最大是  1 1 1</span><br><span class="line">以 第1行 为底，矩阵最大是 1</span><br><span class="line">                       1</span><br><span class="line">以 第2行 为底，矩阵最大是 1 1</span><br><span class="line">  1 1</span><br></pre></td></tr></table></figure><ul><li>注意，是必须以 第i行为底，必须，所以 以 第1行为底的矩阵最大不是 1 1 1</li><li>这里 用一个数组，记录第i个位置往上有几个连续的1<ul><li>第i个数，如果为0，则arr[i] = 0 来更新arr</li><li>如果为1， 则 arr[i] = arr[i] (这个arr[i] 是 上一轮记录的 arr数组) + 1 来更新arr</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line">    </span><br><span class="line"><span class="keyword">int</span> arr[<span class="number">6</span>];</span><br><span class="line"><span class="comment">// 第0行为底，arr -&gt; [1, 0, 1, 1, 1]</span></span><br><span class="line"><span class="comment">// 第1行为底，arr -&gt; [2, 1, 0, 1, 0]</span></span><br><span class="line"><span class="comment">// 第2行为底，arr -&gt; [3, 2, 1, 0, 0]</span></span><br></pre></td></tr></table></figure><ul><li>这样问题就转换啦，给你一个数组，求最大的直方图的面积</li><li>以某一列为基准，两边比你高你就能扩，否则就得停止<ul><li>再来看 如果 arr[] = [3, 2, 1, 2, 2, 4]</li><li>以第一个数为基准，只有一列 3，因为其他都比它低，和为3</li><li>以第二个数为基准，有两列3,2，因为3比2大，所以能扩，和为4</li><li>以第三个数为基准，有6列，因为都大于等于1，和为6</li><li>以第四个数为基准，有3列2,2,4，因为这些数都大于等于2，和为6</li><li>……</li></ul></li><li>这个时候，就是判断左右两边比自己小的值的位置，这样就可以用到上面说的<code>单调栈</code>，但是新的问题是，单调栈不支持<code>重复数字</code>，很明显arr数组会出现重复数字</li><li>因为这里我们需要的数的位置，所以我们存入单调栈的不是数本身，而是数的位置，比较的时候直接通过数的位置从数组中取值</li><li>这个时候改变策略，如果出现重复的数，则直接出栈</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">arr[] = [<span class="number">3</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">// 3 入栈， 3 出栈，2（第一个2） 入栈， 故 以3为基准则 和最大为3 </span></span><br><span class="line"><span class="comment">// 2（第一个2） 出栈， 2（第二个2） 入栈， 故 以2（第一个2）为基准 和最大4</span></span><br><span class="line"><span class="comment">// 2（第二个2） 出栈， 2（第三个2） 入栈， 故 以2（第二个2）为基准 和最大6</span></span><br><span class="line"><span class="comment">// 2（第三个2） 出栈， 2（第四个2） 入栈， 故 以2（第三个2）为基准 和最大8</span></span><br></pre></td></tr></table></figure><ul><li>上述方法中第 1,2,3 个 2 可能扩”错了“，但是 一定会有重复数字的最后一个是对的，而我们只需要这一个对的就行了，因为我们只要最大值</li></ul><h1 id="题目11"><a href="#题目11" class="headerlink" title="题目11"></a>题目11</h1><h2 id="题目描述-6"><a href="#题目描述-6" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定数组 arr 和 整数num，共返回有多少个子数组满足如下情况：</p><p>max(arr[i~j]) - min(arr[i~j]) &lt;= num </p><p>max(arr[i~j]) 表示子数组 arr[i~j]的最大值</p><p>min(arr[i~j]) 表示子数组 arr[i~j]的最小值</p><h2 id="解法-3"><a href="#解法-3" class="headerlink" title="解法"></a>解法</h2><ul><li><p>时间复杂度O(n)</p></li><li><p>窗口最大值最小值的更新结构</p><ul><li><p>就是滑动窗口</p></li><li><p>r指针和l指针分别对应窗口的左右边界，并且只能右移</p></li><li><p>如何知道窗口的最大和最小值呢？</p><ul><li>双端队列（双向链表）</li></ul></li><li><p>最大值的更新：</p><ul><li>双端队列，从头到位依次是从大到小</li><li>双向队列中加数策略：R右移，则向双向队列中加数；如果尾部元素比要加入的数小，则弹出尾部的数，一直弹，直到尾部的数大于新加入的数，或者队列为空。</li><li>解释：如果新加入的数据，比之前的数大，那么之前的数就不可能是窗口内最大值，可以舍弃掉。</li><li>双向队列减数策略: L右移，则需要处理，如果刚被移出窗口的数 是 队列头部的数则把队列头部的数弹出，这就是为什么要保存数组下标的原因。</li></ul></li><li>最小值类似</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr[] = [<span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">6</span>]</span><br><span class="line"><span class="comment">// 存入数的下标，</span></span><br><span class="line"><span class="comment">// 存入 5</span></span><br><span class="line"><span class="comment">// 5比4大 存入 4</span></span><br><span class="line"><span class="comment">// 4比3大 存入 3</span></span><br><span class="line"><span class="comment">// 如果两个数相等也释放出去</span></span><br><span class="line"><span class="comment">// 3比6小 0出队,1出队,2出队,3入队（这里0,1,2,3 很明显是数的下标）小是</span></span><br></pre></td></tr></table></figure><ul><li>以 0 为起点，到某个位置b，随时检查max-min 是否 小于等于 num，如果不满足，则b位置的前一个位置到0都满足 max-min &lt;=num，则以0开头的有b-1个</li><li>以 1 为起点，因为0～b-1满足，所以1～b-1也满足(因为max可能变小，但min不可能变小，所以num只能变小而不能变大)，再看能否继续往右扩</li><li>……</li></ul><h1 id="题目12"><a href="#题目12" class="headerlink" title="题目12"></a>题目12</h1><p>在本题中，单链表可能有环，也可能无环</p><p>给定两个单链表的头结点head1和head2，两个链表可能相交，也可能不想交。</p><p>请实现一个函数，如果两个链表相交请返回相交的第一个节点，如果不相交则返回null</p><p>要求：链表1长度为n，链表2长度为m，时间复杂度为O(n+m)，空间复杂度O(1)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;题目1&quot;&gt;&lt;a href=&quot;#题目1&quot; class=&quot;headerlink&quot; title=&quot;题目1&quot;&gt;&lt;/a&gt;题目1&lt;/h1&gt;&lt;h2 id=&quot;正题&quot;&gt;&lt;a href=&quot;#正题&quot; class=&quot;headerlink&quot; title=&quot;正题&quot;&gt;&lt;/a&gt;正题&lt;/h2&gt;&lt;p
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>python爬虫</title>
    <link href="http://yoursite.com/2018/01/08/python%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2018/01/08/python爬虫/</id>
    <published>2018-01-08T14:05:35.000Z</published>
    <updated>2019-02-08T10:44:07.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="爬虫的实际例子："><a href="#爬虫的实际例子：" class="headerlink" title="爬虫的实际例子："></a>爬虫的实际例子：</h2><pre><code>1. 搜索引擎（百度、谷歌、360搜索等）。2. 伯乐在线。3. 惠惠购物助手。4. 数据分析与研究（数据冰山知乎专栏）。5. 抢票软件等。</code></pre><h2 id="什么是网络爬虫："><a href="#什么是网络爬虫：" class="headerlink" title="什么是网络爬虫："></a>什么是网络爬虫：</h2><h3 id="通俗理解"><a href="#通俗理解" class="headerlink" title="通俗理解"></a>通俗理解</h3><pre><code>爬虫是一个模拟人类请求网站行为的程序。可以自动请求网页、并数据抓取下来然后使用一定的规则提取有价值的数据。专业介绍：百度百科。通用爬虫和聚焦爬虫：通用爬虫：通用爬虫是搜索引擎抓取系统（百度、谷歌、搜狗等）的重要组成部分。        主要是将互联网上的网页下载到本地，形成一个互联网内容的镜像备份。聚焦爬虫：是面向特定需求的一种网络爬虫程序,他与通用爬虫的区别在于：        聚焦爬虫在实施网页抓取的时候会对内容进行筛选和处理，尽量保证只抓取与需求相关的网页信息。</code></pre><h3 id="request和response头中信息"><a href="#request和response头中信息" class="headerlink" title="request和response头中信息"></a>request和response头中信息</h3><ol><li>Accept:文文本的格式</li><li>Accept-Encoding:编码格式</li><li>Connection:⻓长链接 短链接</li><li>Cookie:验证用用的</li><li>Host:域名</li><li>Referer:标志从哪个⻚页面面跳转过来的</li><li>User-Agent:浏览器器和用用户的信息</li></ol><h2 id="为什么用Python写爬虫程序："><a href="#为什么用Python写爬虫程序：" class="headerlink" title="为什么用Python写爬虫程序："></a>为什么用Python写爬虫程序：</h2><pre><code>PHP：PHP是世界是最好的语言，但他天生不是做这个的    而且对多线程、异步支持不是很好，并发处理能力弱。爬虫是工具性程序，对速度和效率要求比较高。Java：生态圈很完善，是Python爬虫最大的竞争对手。    但是Java语言本身很笨重，代码量很大。重构成本比较高，任何修改会导致代码大量改动。爬虫经常要修改采集代码。C/C++：运行效率是无敌的。但是学习和开发成本高。写个小爬虫程序可能要大半天时间。Python：语法优美、代码简洁、开发效率高、支持的模块多。    相关的HTTP请求模块和HTML解析模块非常丰富。还有Scrapy和Scrapy-redis框架让我们开发爬虫变得异常简单。</code></pre><h2 id="准备工具："><a href="#准备工具：" class="headerlink" title="准备工具："></a>准备工具：</h2><pre><code>Python3.6开发环境。Pycharm 2017 professional版。虚拟环境。`virtualenv/virtualenvwrapper`。</code></pre><h2 id="http协议和Chrome抓包工具"><a href="#http协议和Chrome抓包工具" class="headerlink" title="http协议和Chrome抓包工具"></a>http协议和Chrome抓包工具</h2><h3 id="什么是http和https协议："><a href="#什么是http和https协议：" class="headerlink" title="什么是http和https协议："></a>什么是http和https协议：</h3><pre><code>HTTP协议：全称是HyperText Transfer Protocol，中文意思是超文本传输协议，是一种发布和接收HTML页面的方法。服务器端口号是80端口。 HTTPS协议：是HTTP协议的加密版本，在HTTP下加入了SSL层。服务器端口号是443端口。</code></pre><h3 id="在浏览器中发送一个http请求的过程："><a href="#在浏览器中发送一个http请求的过程：" class="headerlink" title="在浏览器中发送一个http请求的过程："></a>在浏览器中发送一个http请求的过程：</h3><pre><code>当用户在浏览器的地址栏中输入一个URL并按回车键之后，浏览器会向HTTP服务器发送HTTP请求。HTTP请求主要分为“Get”和“Post”两种方法。当我们在浏览器输入URL http://www.baidu.com 的时候，浏览器发送一个Request请求去获取 http://www.baidu.com 的html文件，服务器把Response文件对象发送回给浏览器。浏览器分析Response中的 HTML，发现其中引用了很多其他文件，比如Images文件，CSS文件，JS文件。 浏览器会自动再次发送Request去获取图片，CSS文件，或者JS文件。当所有的文件都下载成功后，网页会根据HTML语法结构，完整的显示出来了。</code></pre><h3 id="url详解："><a href="#url详解：" class="headerlink" title="url详解："></a>url详解：</h3><pre><code>URL是Uniform Resource Locator的简写，统一资源定位符。 一个URL由以下几部分组成：        scheme://host:port/path/?query-string=xxx#anchorscheme：代表的是访问的协议，一般为http或者https以及ftp等。host：主机名，域名，比如www.baidu.com。port：端口号。当你访问一个网站的时候，浏览器默认使用80端口。path：查找路径。比如：www.jianshu.com/trending/now，后面的trending/now就是path。query-string：查询字符串，比如：www.baidu.com/s?wd=python，后面的wd=python就是查询字符串。anchor：锚点，后台一般不用管，前端用来做页面定位的。在浏览器中请求一个url，浏览器会对这个url进行一个编码。除英文字母，数字和部分符号外，其他的全部使用百分号+十六进制码值进行编码。</code></pre><h3 id="常用的请求方法："><a href="#常用的请求方法：" class="headerlink" title="常用的请求方法："></a>常用的请求方法：</h3><pre><code>在Http协议中，定义了八种请求方法。这里介绍两种常用的请求方法，分别是get请求和post请求。get请求：一般情况下，只从服务器获取数据下来，并不会对服务器资源产生任何影响的时候会使用get请求。post请求：向服务器发送数据（登录）、上传文件等，会对服务器资源产生影响的时候会使用post请求。 以上是在网站开发中常用的两种方法。并且一般情况下都会遵循使用的原则。但是有的网站和服务器为了做反爬虫机制，也经常会不按常理出牌，</code></pre><p>有可能一个应该使用get方法的请求就一定要改成post请求，这个要视情况而定。</p><h3 id="请求头常见参数："><a href="#请求头常见参数：" class="headerlink" title="请求头常见参数："></a>请求头常见参数：</h3><pre><code>在http协议中，向服务器发送一个请求，数据分为三部分，第一个是把数据放在url中，第二个是把数据放在body中（在post请求中），第三个就是把数据放在head中。这里介绍在网络爬虫中经常会用到的一些请求头参数：User-Agent：浏览器名称。这个在网络爬虫中经常会被使用到。请求一个网页的时候，服务器通过这个参数就可以知道这个请求是由哪种浏览器发送的。        如果我们是通过爬虫发送请求，那么我们的User-Agent就是Python，这对于那些有反爬虫机制的网站来说，可以轻易的判断你这个请求是爬虫。        因此我们要经常设置这个值为一些浏览器的值，来伪装我们的爬虫。Referer：表明当前这个请求是从哪个url过来的。这个一般也可以用来做反爬虫技术。如果不是从指定页面过来的，那么就不做相关的响应。Cookie：http协议是无状态的。也就是同一个人发送了两次请求，服务器没有能力知道这两个请求是否来自同一个人。因此这时候就用cookie来做标识。        一般如果想要做登录后才能访问的网站，那么就需要发送cookie信息了。</code></pre><h3 id="常见响应状态码："><a href="#常见响应状态码：" class="headerlink" title="常见响应状态码："></a>常见响应状态码：</h3><pre><code>200：请求正常，服务器正常的返回数据。301：永久重定向。比如在访问www.jingdong.com的时候会重定向到www.jd.com。302：临时重定向。比如在访问一个需要登录的页面的时候，而此时没有登录，那么就会重定向到登录页面。400：请求的url在服务器上找不到。换句话说就是请求url错误。403：服务器拒绝访问，权限不够。500：服务器内部错误。可能是服务器出现bug了。Chrome抓包工具：</code></pre><h3 id="Chrome浏览器"><a href="#Chrome浏览器" class="headerlink" title="Chrome浏览器"></a>Chrome浏览器</h3><pre><code>Chrome浏览器是一个非常亲近开发者的浏览器。可以方便的查看网络请求以及发送的参数。对着网页右键-&gt;检查。然后就可以打开开发者选项。以下用图片来说明。 </code></pre><p><img src="https://i.imgur.com/Ru1ov2J.png" alt="1"><br><img src="https://i.imgur.com/zC66TIe.png" alt="2"><br><img src="https://i.imgur.com/htxzlhU.png" alt="3"><br><img src="https://i.imgur.com/fvnOJFn.png" alt="4"></p><h2 id="urllib库"><a href="#urllib库" class="headerlink" title="urllib库"></a>urllib库</h2><pre><code>urllib库是Python中一个最基本的网络请求库。可以模拟浏览器的行为，向指定的服务器发送一个请求，并可以保存服务器返回的数据。</code></pre><h3 id="urlopen函数："><a href="#urlopen函数：" class="headerlink" title="urlopen函数："></a>urlopen函数：</h3><pre><code>在Python3的urllib库中，所有和网络请求相关的方法，都被集到urllib.request模块下面了，以先来看下urlopen函数基本的使用：from urllib import requestresp = request.urlopen(&apos;http://www.baidu.com&apos;)print(resp.read())实际上，使用浏览器访问百度，右键查看源代码。你会发现，跟我们刚才打印出来的数据是一模一样的。也就是说，上面的三行代码就已经帮我们把百度的首页的全部代码爬下来了。一个基本的url请求对应的python代码真的非常简单。</code></pre><h4 id="以下对urlopen函数的进行详细讲解："><a href="#以下对urlopen函数的进行详细讲解：" class="headerlink" title="以下对urlopen函数的进行详细讲解："></a>以下对urlopen函数的进行详细讲解：</h4><pre><code>url：请求的url。data：请求的data，如果设置了这个值，那么将变成post请求。返回值：返回值是一个http.client.HTTPResponse对象，这个对象是一个类文件句柄对象。有read(size)、readline、readlines以及getcode等方法。</code></pre><h3 id="urlretrieve函数："><a href="#urlretrieve函数：" class="headerlink" title="urlretrieve函数："></a>urlretrieve函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这个函数可以方便的将网页上的一个文件保存到本地。以下代码可以非常方便的将百度的首页下载到本地：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line">request.urlretrieve(<span class="string">'http://www.baidu.com/'</span>,<span class="string">'baidu.html'</span>)</span><br></pre></td></tr></table></figure><h3 id="urlencode函数："><a href="#urlencode函数：" class="headerlink" title="urlencode函数："></a>urlencode函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">用浏览器发送请求的时候，如果url中包含了中文或者其他特殊字符，那么浏览器会自动的给我们进行编码。</span><br><span class="line">而如果使用代码发送请求，那么就必须手动的进行编码，这时候就应该使用urlencode函数来实现。urlencode可以把字典数据转换为URL编码的数据。</span><br><span class="line">示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">data = &#123;<span class="string">'name'</span>:<span class="string">'爬虫基础'</span>,<span class="string">'greet'</span>:<span class="string">'hello world'</span>,<span class="string">'age'</span>:<span class="number">100</span>&#125;</span><br><span class="line">qs = parse.urlencode(data)</span><br><span class="line">print(qs)</span><br></pre></td></tr></table></figure><h3 id="parse-qs函数："><a href="#parse-qs函数：" class="headerlink" title="parse_qs函数："></a>parse_qs函数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">可以将经过编码后的url参数进行解码。示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> parse</span><br><span class="line">qs = <span class="string">"name=%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80&amp;greet=hello+world&amp;age=100"</span></span><br><span class="line">print(parse.parse_qs(qs))</span><br><span class="line">urlparse和urlsplit：</span><br><span class="line"></span><br><span class="line">有时候拿到一个url，想要对这个url中的各个组成部分进行分割，那么这时候就可以使用urlparse或者是urlsplit来进行分割。示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?username=zhiliao'</span></span><br><span class="line"></span><br><span class="line">result = parse.urlsplit(url)</span><br><span class="line"><span class="comment"># result = parse.urlparse(url)</span></span><br><span class="line"></span><br><span class="line">print(<span class="string">'scheme:'</span>,result.scheme)</span><br><span class="line">print(<span class="string">'netloc:'</span>,result.netloc)</span><br><span class="line">print(<span class="string">'path:'</span>,result.path)</span><br><span class="line">print(<span class="string">'query:'</span>,result.query)</span><br></pre></td></tr></table></figure><h3 id="urlparse和urlsplit"><a href="#urlparse和urlsplit" class="headerlink" title="urlparse和urlsplit"></a>urlparse和urlsplit</h3><pre><code>urlparse和urlsplit基本上是一模一样的。唯一不一样的地方是，urlparse里面多了一个params属性，而urlsplit没有这个params属性。比如有一个url为：url = &apos;http://www.baidu.com/s;hello?wd=python&amp;username=abc#1&apos;，那么urlparse可以获取到hello，而urlsplit不可以获取到。url中的params也用得比较少。</code></pre><h3 id="urllib库请求"><a href="#urllib库请求" class="headerlink" title="urllib库请求"></a>urllib库请求</h3><h4 id="get"><a href="#get" class="headerlink" title="get"></a>get</h4><ol><li>汉字报错 :解释器器ascii没有汉字 url汉字转码<br>urllib.parse.quote safe=”string.printtable”</li><li>字典传参<br>urllib.parse.urlencode()</li></ol><h4 id="post"><a href="#post" class="headerlink" title="post:"></a>post:</h4><ol><li>urlib.request.openurl(url,data = “服务器器接受的数据”)</li><li>handler:处理理器器的自自定义:</li></ol><h4 id="User-Agent"><a href="#User-Agent" class="headerlink" title="User-Agent:"></a>User-Agent:</h4><p><code>在浏览网页的时候，爬虫的浏览速度明显超过人的点击速度，所以速度过快会触发反扒。</code></p><p>这个时候，我们可以通过自定义<code>User-Agent</code>，模拟出不同的用户在浏览网页，在一定机制上可以防止反扒机制</p><ol><li>模拟真实的浏览器器发送请求:<ol><li>百度批量量搜索</li><li>检查元素(百度搜索useragent大大全)</li></ol></li><li>request.add_header(动态添加head数据)</li><li>响应头 response.header</li><li>创建request:urlib.request.Request(url)</li></ol><h4 id="IP代理理"><a href="#IP代理理" class="headerlink" title="IP代理理:"></a>IP代理理:</h4><ol><li>免费的IP:时效性差,错误率高高</li><li>付费的IP:贵花钱,也有失效不不能用用的</li></ol><h5 id="IP分类"><a href="#IP分类" class="headerlink" title="IP分类:"></a>IP分类:</h5><ol><li>透明:对方方知道我们真实的ip</li><li>匿名:对方方不不知道我们真实的ip,知道了了你使用用了了代理理</li><li>高匿:对方方不不知道我们真实的IP.也不不知道我们使用用了了代理理</li></ol><h4 id="handler"><a href="#handler" class="headerlink" title="handler:"></a>handler:</h4><p>系统的urlopen()不不支支持代理理的添加<br>创建对应的处理器(handler)</p><ol><li>代理理处理理器器:ProxyHandler</li><li>拿着ProxyHandler创建opener:bulid_opener()</li><li>opener.open(url)就可以请求数据</li><li>auth认证handler<br>CookieshandlerURLError<br>requests(第三方方模块):简单易易用用<br>数据解析:<br>数据存储:json csv MongDB resdis mysql</li></ol><h3 id="urllib库实战"><a href="#urllib库实战" class="headerlink" title="urllib库实战"></a>urllib库实战</h3><h4 id="使用百度搜索信息，返回查询的网页"><a href="#使用百度搜索信息，返回查询的网页" class="headerlink" title="使用百度搜索信息，返回查询的网页"></a>使用百度搜索信息，返回查询的网页</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> urlllib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getHttp</span><span class="params">(url)</span>:</span></span><br><span class="line">    baidu_url = <span class="string">'http://www.baidu.com/s?wd='</span></span><br><span class="line">    fin_url = baidu_url + url</span><br><span class="line">    <span class="comment"># 由于用户输入的信息可能是中文，所以需要转码为ASCII码等python可以解释的编码</span></span><br><span class="line">    fin_code_url = urllib.parse.quote(fin_url, safe=string.printable)</span><br><span class="line">    r = urllib.request.urlopen(fin_code_url)</span><br><span class="line">    <span class="comment"># r.read() 可能返回的是bytes数据，而不是字符串数据，因此存储为utf-8需要decode一下</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'baidu.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.read().decode())</span><br><span class="line"></span><br><span class="line">url = input()</span><br><span class="line"><span class="comment"># url 存储输入的信息，代表用户想要查询的数据</span></span><br><span class="line">getHttp(url)</span><br></pre></td></tr></table></figure><h4 id="get请求"><a href="#get请求" class="headerlink" title="get请求"></a>get请求</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_params</span><span class="params">()</span>:</span></span><br><span class="line">    baidu_url = <span class="string">'http://www.baidu.com/s?'</span></span><br><span class="line">    <span class="comment"># 如果发送get请求，那么请求参数就在请求链接中，通过字典的方式来设置请求参数</span></span><br><span class="line">    diction = &#123;</span><br><span class="line">        <span class="string">"wd"</span>:<span class="string">"中文"</span>,</span><br><span class="line">        <span class="string">"key"</span>:<span class="string">"zhang"</span>,</span><br><span class="line">        <span class="string">"value"</span>:<span class="string">"san"</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment"># 把字典转换为字符串，然后用于字符串拼接，同时可以把中文转换为ASCII便于Python解释</span></span><br><span class="line">    str_params = urllib.parse.urlencode(diction);</span><br><span class="line">    fin_url = baidu_url+str_params</span><br><span class="line">    r = urllib.request.urlopen(fin_url)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'index.html'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(r.read().decode())</span><br></pre></td></tr></table></figure><h4 id="添加响应头信息"><a href="#添加响应头信息" class="headerlink" title="添加响应头信息"></a>添加响应头信息</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line">常见的User-Agent：</span><br><span class="line"><span class="attribute">Opera</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60</span><br><span class="line">Opera/8.0 (Windows NT 5.1; U; en)</span><br><span class="line">Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50</span><br><span class="line"> </span><br><span class="line"><span class="attribute">Firefox</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0</span><br><span class="line">Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10</span><br><span class="line"> </span><br><span class="line"><span class="attribute">Safari</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2</span><br><span class="line"> </span><br><span class="line"><span class="attribute">chrome</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36</span><br><span class="line">Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11</span><br><span class="line">Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16</span><br><span class="line"> </span><br><span class="line"><span class="attribute">360</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">淘宝浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11</span><br><span class="line"> </span><br><span class="line">猎豹浏览器</span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER) </span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)"</span><br><span class="line"><span class="attribute">QQ浏览器</span></span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)</span><br><span class="line"><span class="attribute">sogou浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)</span><br><span class="line"><span class="attribute">maxthon浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36</span><br><span class="line"><span class="attribute">UC浏览器</span></span><br><span class="line">Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="attribute">IPhone</span></span><br><span class="line">Mozilla/5.0 (iPhone; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"> </span><br><span class="line"><span class="attribute">IPod</span></span><br><span class="line">Mozilla/5.0 (iPod; U; CPU iPhone OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"> </span><br><span class="line"><span class="attribute">IPAD</span></span><br><span class="line">Mozilla/5.0 (iPad; U; CPU OS 4_2_1 like Mac OS X; zh-cn) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8C148 Safari/6533.18.5</span><br><span class="line">Mozilla/5.0 (iPad; U; CPU OS 4_3_3 like Mac OS X; en-us) AppleWebKit/533.17.9 (KHTML, like Gecko) Version/5.0.2 Mobile/8J2 Safari/6533.18.5</span><br><span class="line"> </span><br><span class="line"><span class="attribute">Android</span></span><br><span class="line">Mozilla/5.0 (Linux; U; Android 2.2.1; zh-cn; HTC_Wildfire_A3333 Build/FRG83D) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 2.3.7; en-us; Nexus One Build/FRF91) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line"> </span><br><span class="line">QQ浏览器 Android版本</span><br><span class="line">MQQBrowser/26 Mozilla/5.0 (Linux; U; Android 2.3.7; zh-cn; MB200 Build/GRJ22; CyanogenMod-7) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/533.1</span><br><span class="line"> </span><br><span class="line">Android Opera Mobile</span><br><span class="line">Opera/9.80 (Android 2.3.4; Linux; Opera Mobi/build-1107180945; U; en-GB) Presto/2.8.149 Version/11.10</span><br><span class="line"> </span><br><span class="line">Android Pad Moto Xoom</span><br><span class="line">Mozilla/5.0 (Linux; U; Android 3.0; en-us; Xoom Build/HRI39) AppleWebKit/534.13 (KHTML, like Gecko) Version/4.0 Safari/534.13</span><br><span class="line"> </span><br><span class="line"><span class="attribute">BlackBerry</span></span><br><span class="line">Mozilla/5.0 (BlackBerry; U; BlackBerry 9800; en) AppleWebKit/534.1+ (KHTML, like Gecko) Version/6.0.0.337 Mobile Safari/534.1+</span><br><span class="line"> </span><br><span class="line">WebOS HP Touchpad</span><br><span class="line">Mozilla/5.0 (hp-tablet; Linux; hpwOS/3.0.0; U; en-US) AppleWebKit/534.6 (KHTML, like Gecko) wOSBrowser/233.70 Safari/534.6 TouchPad/1.0</span><br><span class="line"> </span><br><span class="line">Nokia N97</span><br><span class="line">Mozilla/5.0 (SymbianOS/9.4; Series60/5.0 NokiaN97-1/20.0.019; Profile/MIDP-2.1 Configuration/CLDC-1.1) AppleWebKit/525 (KHTML, like Gecko) BrowserNG/7.1.18124</span><br><span class="line"> </span><br><span class="line">Windows Phone Mango</span><br><span class="line">Mozilla/5.0 (compatible; MSIE 9.0; Windows Phone OS 7.5; Trident/5.0; IEMobile/9.0; HTC; Titan)</span><br><span class="line"> </span><br><span class="line"><span class="attribute">UC浏览器</span></span><br><span class="line"><span class="attribute">UCWEB7.0.2.37/28/999</span></span><br><span class="line"> </span><br><span class="line">NOKIA5700/ UCWEB7.0.2.37/28/999</span><br><span class="line"> </span><br><span class="line"><span class="attribute">UCOpenwave</span></span><br><span class="line">Openwave/ UCWEB7.0.2.37/28/999</span><br><span class="line"> </span><br><span class="line">UC Opera</span><br><span class="line">Mozilla/4.0 (compatible; MSIE 6.0; ) Opera/UCWEB7.0.2.37/28/999</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">load_baidu</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://www.baidu.com/s?"</span></span><br><span class="line">    header = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span>,</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#创建请求对象</span></span><br><span class="line">    request = urllib.request.Request(url)</span><br><span class="line">    </span><br><span class="line">    <span class="comment">#获取请求头的信息，因为没有设置值，所以为空</span></span><br><span class="line">    print(request.headers)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 添加请求头信息</span></span><br><span class="line">    <span class="comment">#方法1</span></span><br><span class="line">    request = urllib.request.Request(url, headers=header)</span><br><span class="line">    <span class="comment">#方法2 动态添加，通过创建user-agent来随机的创建出请求头，以迷惑服务器的反扒机制</span></span><br><span class="line">    request.add_header(<span class="string">"User-Agent"</span>,<span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">#response = urllib.request.urlopen(url) 也可以，但是我们可以通过这是请求对象的方式来设置一下请求参数</span></span><br><span class="line">    respon = urllib.request.urlopen(request)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#查看响应头</span></span><br><span class="line">    print(respon.headers)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">"index.html"</span>, <span class="string">'w'</span>,  encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(respon.read().decode())</span><br></pre></td></tr></table></figure><h4 id="urllib中的proxy代理"><a href="#urllib中的proxy代理" class="headerlink" title="urllib中的proxy代理"></a>urllib中的proxy代理</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handler_openner</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    <span class="comment">#handler 处理器</span></span><br><span class="line">    <span class="comment">#系统的urlopen 并没有添加 代理的功能</span></span><br><span class="line">    <span class="comment"># handler = urllib.request.HTTPHandler()#创建处理器</span></span><br><span class="line">    <span class="comment">#添加代理</span></span><br><span class="line">    proxy = &#123;</span><br><span class="line">            <span class="comment">#免费代理的写法</span></span><br><span class="line">            <span class="string">"http"</span>:<span class="string">"http://121.61.1.129:9999"</span></span><br><span class="line">            <span class="comment">#付费代理的写法</span></span><br><span class="line">            <span class="comment">#"http":"用户名":密码</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">#可以使用list来设置随机代理，防止反扒</span></span><br><span class="line">    proxys = [</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"1.192.240.196:9999"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"125.123.141.52:9999"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"119.101.125.128:9999"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"119.101.127.46:9999"</span>&#125;,</span><br><span class="line">        &#123;<span class="string">"http"</span>,<span class="string">"121.61.3.143:9999"</span>&#125;</span><br><span class="line">    ]</span><br><span class="line">    <span class="comment"># 代理的处理器</span></span><br><span class="line">    proxy_handler = urllib.request.ProxyHandler(proxy)</span><br><span class="line">    <span class="comment"># opener = urllib.request.build_opener(handler)#通过处理器创建自己的opener</span></span><br><span class="line">    opener = urllib.request.build_opener(proxy_handler)<span class="comment">#通过代理器创建自己的opener</span></span><br><span class="line">    <span class="comment">#通过查看 urllib.request.urlopen()函数可以发现，python网络连接就是通过opener的open函数</span></span><br><span class="line">    <span class="comment">#通过有代理的opener来执行网络连接</span></span><br><span class="line">    data = opener.open(url).read();</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><h4 id="urllib中使用cookie的两种方式"><a href="#urllib中使用cookie的两种方式" class="headerlink" title="urllib中使用cookie的两种方式"></a>urllib中使用cookie的两种方式</h4><p><img src="./assets/chorme_cookie.png" alt=""></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> urllib.request</span><br><span class="line"><span class="keyword">from</span> http <span class="keyword">import</span> cookiejar</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">use_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 使用cookie的第一种方法，直接从浏览器中复制粘贴已有的cookie</span></span><br><span class="line">    headers1 = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span>,</span><br><span class="line">        <span class="string">"Cookie"</span>:<span class="string">"BAIDUID=670AE50017189CEE98CF4241E77CF222:FG=1; BIDUPSID=670AE50012; PSTM=1542866664; BDUSS=GJ2d0NyU2FxSzUxT1B-Njdzc0puOWVjbVFqWHFwMHBKbWZuanpqRHRIYlB6RDVjQVFBQUFBJCQAAAAAAAAAAAEAAADZlxkqc21hbGy~wsTPv9gAAAAAAAAAAAM8~F1zPPxdcU; BDORZ=B490B5EBF6F3CD402E515D22BCDA1598; H_PS_PSSID=1433_21126_18560_28329_26350_28414_27543"</span></span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">"https://www.baidu.com"</span></span><br><span class="line">    request = urllib.request.Request(url, headers=headers1)<span class="comment">#将url和header导入到request对象中</span></span><br><span class="line">    <span class="comment">#request.add_header("User-Agent","Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36") 或者随后动态导入header</span></span><br><span class="line">    respon = urllib.request.urlopen(request)</span><br><span class="line">    data = respon.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_cookie</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 第二种方法，利用登录界面存储cookie</span></span><br><span class="line">    cookies = cookiejar.CookieJar()</span><br><span class="line">    login_url = <span class="string">"https://passport.bilibili.com/login"</span></span><br><span class="line">    headers2 = &#123;</span><br><span class="line">        <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"</span></span><br><span class="line">    &#125;<span class="comment">#这里用代码实现存储cookie，所以头里面不需要cookie</span></span><br><span class="line">    <span class="comment">#从 浏览器中 可以知道 登录是POST 请求，同时在浏览器工具中可以发现 名为“Form Data”的项目</span></span><br><span class="line">    form_data_nodecode = &#123;</span><br><span class="line">        <span class="comment"># 获取登录信息，首先你要自己先登录一次，这样才能找到登录时应该发送哪些信息</span></span><br><span class="line">        <span class="string">"oauthKey"</span>: <span class="string">"f58e34d07074"</span>,</span><br><span class="line">        <span class="string">"gourl"</span>: <span class="string">"https://www.bilibili.com/"</span></span><br><span class="line">        <span class="comment">#是通过浏览器 检查 找到的 表单信息</span></span><br><span class="line">    &#125;<span class="comment"># 千万注意 把form_data转换一下，因为不能发送字典请求，需要转换为字符串，再转换成bytes，因为post请求只接受bytes</span></span><br><span class="line">    form_data = urllib.parse.urlencode(form_data_nodecode).encode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 可以通过查找规律，找到form_data的信息规律</span></span><br><span class="line">    <span class="comment"># 定义又添加cookie功能的处理器</span></span><br><span class="line">    cookie_handler = urllib.request.HTTPCookieProcessor(cookies)</span><br><span class="line">    <span class="comment">#根据处理器生成opener</span></span><br><span class="line">    opener = urllib.request.build_opener(cookie_handler)</span><br><span class="line">    <span class="comment"># 生成request对象，设置请求头和链接</span></span><br><span class="line">    login_request = urllib.request.Request(login_url, headers=headers2, data=form_data)</span><br><span class="line">    <span class="comment">#发送请求，登录成功则会 把cookie保存到 cookiejar中</span></span><br><span class="line">    opener.open(login_request)</span><br><span class="line"></span><br><span class="line">    <span class="comment">#访问个人中心</span></span><br><span class="line">    url = <span class="string">"https://account.bilibili.com/account/face/upload"</span></span><br><span class="line">    person_request = urllib.request.Request(url, headers=headers2)</span><br><span class="line">    respons = opener.open(person_request)</span><br><span class="line">    <span class="comment"># bytes-&gt;str</span></span><br><span class="line">    data = respons.read().decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(data)</span><br></pre></td></tr></table></figure><h3 id="request-Request类："><a href="#request-Request类：" class="headerlink" title="request.Request类："></a>request.Request类：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">如果想要在请求的时候增加一些请求头，那么就必须使用request.Request类来实现。比如要增加一个User-Agent，示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line"><span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">"http://www.baidu.com/"</span>,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h2 id="ProxyHandler处理器（代理设置）"><a href="#ProxyHandler处理器（代理设置）" class="headerlink" title="ProxyHandler处理器（代理设置）"></a>ProxyHandler处理器（代理设置）</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">很多网站会检测某一段时间某个IP的访问次数(通过流量统计，系统日志等)，如果访问次数多的不像正常人，它会禁止这个IP的访问。</span><br><span class="line">所以我们可以设置一些代理服务器，每隔一段时间换一个代理，就算IP被禁止，依然可以换个IP继续爬取。</span><br><span class="line">urllib中通过ProxyHandler来设置使用代理服务器，下面代码说明如何使用自定义opener来使用代理：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="comment"># 这个是没有使用代理的</span></span><br><span class="line"><span class="comment"># resp = request.urlopen('http://httpbin.org/get')</span></span><br><span class="line"><span class="comment"># print(resp.read().decode("utf-8"))</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这个是使用了代理的</span></span><br><span class="line">handler = request.ProxyHandler(&#123;<span class="string">"http"</span>:<span class="string">"218.66.161.88:31769"</span>&#125;)</span><br><span class="line"></span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line">req = request.Request(<span class="string">"http://httpbin.org/ip"</span>)</span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h3 id="常用的代理有："><a href="#常用的代理有：" class="headerlink" title="常用的代理有："></a>常用的代理有：</h3><pre><code>西刺免费代理IP：http://www.xicidaili.com/快代理：http://www.kuaidaili.com/代理云：http://www.dailiyun.com/</code></pre><h2 id="什么是cookie："><a href="#什么是cookie：" class="headerlink" title="什么是cookie："></a>什么是cookie：</h2><pre><code>在网站中，http请求是无状态的。也就是说即使第一次和服务器连接后并且登录成功后，第二次请求服务器依然不能知道当前请求是哪个用户。cookie的出现就是为了解决这个问题，第一次登录后服务器返回一些数据（cookie）给浏览器，然后浏览器保存在本地，当该用户发送第二次请求的时候，就会自动的把上次请求存储的cookie数据自动的携带给服务器，服务器通过浏览器携带的数据就能判断当前用户是哪个了。cookie存储的数据量有限，不同的浏览器有不同的存储大小，但一般不超过4KB。因此使用cookie只能存储一些小量的数据。</code></pre><h3 id="cookie的格式："><a href="#cookie的格式：" class="headerlink" title="cookie的格式："></a>cookie的格式：</h3><pre><code>Set-Cookie: NAME=VALUE；Expires/Max-age=DATE；Path=PATH；Domain=DOMAIN_NAME；SECURE参数意义：NAME：cookie的名字。VALUE：cookie的值。Expires：cookie的过期时间。Path：cookie作用的路径。Domain：cookie作用的域名。SECURE：是否只在https协议下起作用。</code></pre><h3 id="使用cookielib库和HTTPCookieProcessor模拟登录："><a href="#使用cookielib库和HTTPCookieProcessor模拟登录：" class="headerlink" title="使用cookielib库和HTTPCookieProcessor模拟登录："></a>使用cookielib库和HTTPCookieProcessor模拟登录：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Cookie 是指网站服务器为了辨别用户身份和进行Session跟踪，而储存在用户浏览器上的文本文件，Cookie可以保持登录信息到用户下次与服务器的会话。</span><br><span class="line">这里以人人网为例。</span><br><span class="line">人人网中，要访问某个人的主页，必须先登录才能访问，登录说白了就是要有cookie信息。那么如果我们想要用代码的方式访问，就必须要有正确的cookie信息才能访问。</span><br><span class="line">解决方案有两种，第一种是使用浏览器访问，然后将cookie信息复制下来，放到headers中。示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'anonymid=jacdwz2x-8bjldx; depoe=GW; _r01_=1; _ga=GA1.2.14516.1511436360; _gid=GA1.2.862627163.1511436360; wp=1; JSESID=abczwY8ecd4xz8RJcyP-v; jebecookies=d4497791-9d41-4269-9e2b-3858d4989785|||||; ick_login=884e75d4-f361-4cff-94bb-81fe6c42b220; _de=EA5778F44555C096BF75400CE19CC; p=61a3c7d0d4b2d1e991095353f83fa2141; first_login_flag=1; ln_uact=970138074@qq.com; ln_hurl=http://hdn.xnimg.cn/photos/hdn121/20170428/1700/main_nhiB_aebd0000854a1986.jpg; t=3dd84a3117737e819dd2c32f1cdb91d01; societyguester=3dd84a3117737e819dd2c32f1cdb91d01; id=443362311; xnsid=169efdc0; loginfrom=syshome; ch_id=10016; jebe_key=9c062f5a-4335-4a91-bf7a-970f8b86a64e%7Ca022c303305d1b2ald=0'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line"></span><br><span class="line">req = request.Request(url,headers=headers)</span><br><span class="line">resp = request.urlopen(req)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.read().decode(<span class="string">'utf-8'</span>))</span><br><span class="line">但是每次在访问需要cookie的页面都要从浏览器中复制cookie比较麻烦。在Python处理Cookie，一般是通过http.cookiejar模块和urllib模块的HTTPCookieProcessor处理器类一起使用。http.cookiejar模块主要作用是提供用于存储cookie的对象。而HTTPCookieProcessor处理器主要作用是处理这些cookie对象，并构建handler对象。</span><br></pre></td></tr></table></figure><h3 id="http-cookiejar模块："><a href="#http-cookiejar模块：" class="headerlink" title="http.cookiejar模块："></a>http.cookiejar模块：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">该模块主要的类有CookieJar、FileCookieJar、MozillaCookieJar、LWPCookieJar。这四个类的作用分别如下：</span><br><span class="line"></span><br><span class="line">CookieJar：管理HTTP cookie值、存储HTTP请求生成的cookie、向传出的HTTP请求添加cookie的对象。整个cookie都存储在内存中，对CookieJar实例进行垃圾回收后cookie也将丢失。</span><br><span class="line">FileCookieJar (filename,delayload=<span class="keyword">None</span>,policy=<span class="keyword">None</span>)：从CookieJar派生而来，用来创建FileCookieJar实例，检索cookie信息并将cookie存储到文件中。filename是存储cookie的文件名。delayload为<span class="keyword">True</span>时支持延迟访问访问文件，即只有在需要时才读取文件或在文件中存储数据。</span><br><span class="line">MozillaCookieJar (filename,delayload=<span class="keyword">None</span>,policy=<span class="keyword">None</span>)：从FileCookieJar派生而来，创建与Mozilla浏览器 cookies.txt兼容的FileCookieJar实例。</span><br><span class="line">LWPCookieJar (filename,delayload=<span class="keyword">None</span>,policy=<span class="keyword">None</span>)：从FileCookieJar派生而来，创建与libwww-perl标准的 Set-Cookie3 文件格式兼容的FileCookieJar实例。</span><br><span class="line">登录人人网：</span><br><span class="line"></span><br><span class="line">利用http.cookiejar和request.HTTPCookieProcessor登录人人网。相关示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request,parse</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> CookieJar</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_opener</span><span class="params">()</span>:</span></span><br><span class="line">    cookiejar = CookieJar()</span><br><span class="line">    handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">    opener = request.build_opener(handler)</span><br><span class="line">    <span class="keyword">return</span> opener</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">login_renren</span><span class="params">(opener)</span>:</span></span><br><span class="line">    data = &#123;<span class="string">"email"</span>: <span class="string">"970138074@qq.com"</span>, <span class="string">"password"</span>: <span class="string">"pythonspider"</span>&#125;</span><br><span class="line">    data = parse.urlencode(data).encode(<span class="string">'utf-8'</span>)</span><br><span class="line">    login_url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">    req = request.Request(login_url, headers=headers, data=data)</span><br><span class="line">    opener.open(req)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">visit_profile</span><span class="params">(opener)</span>:</span></span><br><span class="line">    url = <span class="string">'http://www.renren.com/880151247/profile'</span></span><br><span class="line">    req = request.Request(url,headers=headers)</span><br><span class="line">    resp = opener.open(req)</span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'renren.html'</span>,<span class="string">'w'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">        fp.write(resp.read().decode(<span class="string">"utf-8"</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    opener = get_opener()</span><br><span class="line">    login_renren(opener)</span><br><span class="line">    visit_profile(opener)</span><br></pre></td></tr></table></figure><h3 id="保存cookie到本地："><a href="#保存cookie到本地：" class="headerlink" title="保存cookie到本地："></a>保存cookie到本地：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">保存cookie到本地，可以使用cookiejar的save方法，并且需要指定一个文件名：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br><span class="line">cookiejar.save(ignore_discard=<span class="keyword">True</span>,ignore_expires=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure><h3 id="从本地加载cookie："><a href="#从本地加载cookie：" class="headerlink" title="从本地加载cookie："></a>从本地加载cookie：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">从本地加载cookie，需要使用cookiejar的load方法，并且也需要指定方法：</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> urllib <span class="keyword">import</span> request</span><br><span class="line"><span class="keyword">from</span> http.cookiejar <span class="keyword">import</span> MozillaCookieJar</span><br><span class="line"></span><br><span class="line">cookiejar = MozillaCookieJar(<span class="string">"cookie.txt"</span>)</span><br><span class="line">cookiejar.load(ignore_expires=<span class="keyword">True</span>,ignore_discard=<span class="keyword">True</span>)</span><br><span class="line">handler = request.HTTPCookieProcessor(cookiejar)</span><br><span class="line">opener = request.build_opener(handler)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line">req = request.Request(<span class="string">'http://httpbin.org/cookies'</span>,headers=headers)</span><br><span class="line"></span><br><span class="line">resp = opener.open(req)</span><br><span class="line">print(resp.read())</span><br></pre></td></tr></table></figure><h2 id="requests库"><a href="#requests库" class="headerlink" title="requests库"></a>requests库</h2><pre><code>虽然Python的标准库中 urllib模块已经包含了平常我们使用的大多数功能，但是它的 API 使用起来让人感觉不太好，而 Requests宣传是 “HTTP for Humans”，说明使用更简洁方便。</code></pre><h3 id="安装和文档地址："><a href="#安装和文档地址：" class="headerlink" title="安装和文档地址："></a>安装和文档地址：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">利用pip可以非常方便的安装：</span><br><span class="line"></span><br><span class="line">pip install requests</span><br><span class="line">中文文档：http://docs.python-requests.org/zh_CN/latest/index.html</span><br><span class="line">github地址：https://github.com/requests/requests</span><br></pre></td></tr></table></figure><h3 id="发送GET请求："><a href="#发送GET请求：" class="headerlink" title="发送GET请求："></a>发送GET请求：</h3><pre><code>最简单的发送get请求就是通过requests.get来调用：response = requests.get(&quot;http://www.baidu.com/&quot;)</code></pre><h3 id="添加headers和查询参数："><a href="#添加headers和查询参数：" class="headerlink" title="添加headers和查询参数："></a>添加headers和查询参数：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">如果想添加 headers，可以传入headers参数来增加请求头中的headers信息。如果要将参数放在url中传递，可以利用 params 参数。相关示例代码如下：</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"> kw = &#123;<span class="string">'wd'</span>:<span class="string">'中国'</span>&#125;</span><br><span class="line"></span><br><span class="line"> headers = &#123;<span class="string">"User-Agent"</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.99 Safari/537.36"</span>&#125;</span><br><span class="line"></span><br><span class="line"> <span class="comment"># params 接收一个字典或者字符串的查询参数，字典类型自动转换为url编码，不需要urlencode()</span></span><br><span class="line"> response = requests.get(<span class="string">"http://www.baidu.com/s"</span>, params = kw, headers = headers)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看响应内容，response.text 返回的是Unicode格式的数据</span></span><br><span class="line"> print(response.text)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看响应内容，response.content返回的字节流数据</span></span><br><span class="line"> print(response.content)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看完整url地址</span></span><br><span class="line"> print(response.url)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看响应头部字符编码</span></span><br><span class="line"> print(response.encoding)</span><br><span class="line"></span><br><span class="line"> <span class="comment"># 查看响应码</span></span><br><span class="line"> print(response.status_code)</span><br></pre></td></tr></table></figure><h3 id="发送POST请求："><a href="#发送POST请求：" class="headerlink" title="发送POST请求："></a>发送POST请求：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">最基本的POST请求可以使用post方法：</span><br><span class="line"></span><br><span class="line">response = requests.post(<span class="string">"http://www.baidu.com/"</span>,data=data)</span><br></pre></td></tr></table></figure><h3 id="传入data数据："><a href="#传入data数据：" class="headerlink" title="传入data数据："></a>传入data数据：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">这时候就不要再使用urlencode进行编码了，直接传入一个字典进去就可以了。比如请求拉勾网的数据的代码：</span><br><span class="line"></span><br><span class="line"> <span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"> url = <span class="string">"https://www.lagou.com/jobs/positionAjax.json?city=%E6%B7%B1%E5%9C%B3&amp;needAddtionalResult=false&amp;isSchoolJob=0"</span></span><br><span class="line"></span><br><span class="line"> headers = &#123;</span><br><span class="line">     <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">     <span class="string">'Referer'</span>: <span class="string">'https://www.lagou.com/jobs/list_python?labelWords=&amp;fromSearch=true&amp;suginput='</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> data = &#123;</span><br><span class="line">     <span class="string">'first'</span>: <span class="string">'true'</span>,</span><br><span class="line">     <span class="string">'pn'</span>: <span class="number">1</span>,</span><br><span class="line">     <span class="string">'kd'</span>: <span class="string">'python'</span></span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"> resp = requests.post(url,headers=headers,data=data)</span><br><span class="line"> <span class="comment"># 如果是json数据，直接可以调用json方法</span></span><br><span class="line"> print(resp.json())</span><br></pre></td></tr></table></figure><h3 id="使用代理："><a href="#使用代理：" class="headerlink" title="使用代理："></a>使用代理：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">使用requests添加代理也非常简单，只要在请求的方法中（比如get或者post）传递proxies参数就可以了。示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://httpbin.org/get"</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">proxy = &#123;</span><br><span class="line">    <span class="string">'http'</span>: <span class="string">'171.14.209.180:27829'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resp = requests.get(url,headers=headers,proxies=proxy)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'xx.html'</span>,<span class="string">'w'</span>,encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> fp:</span><br><span class="line">    fp.write(resp.text)</span><br></pre></td></tr></table></figure><h3 id="cookie："><a href="#cookie：" class="headerlink" title="cookie："></a>cookie：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">如果在一个响应中包含了cookie，那么可以利用cookies属性拿到这个返回的cookie值：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = &#123;<span class="string">"email"</span>:<span class="string">"*****4@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"p****spider"</span>&#125;</span><br><span class="line">resp = requests.get(<span class="string">'http://www.baidu.com/'</span>)</span><br><span class="line">print(resp.cookies)</span><br><span class="line">print(resp.cookies.get_dict())</span><br><span class="line"></span><br><span class="line">cookies = <span class="string">'BAIDUID=67017189CEE98CF4241E77CF222:FG=1; BIDUPSID=670AE50017189CEE98CF4241E77CF222; PSTM=1542866664; BDORZ=B490B5EBF6F3CD402E512BCDA1598; pgv_pvi=6780275712; delPer=0; H_PS_PSSID=1433_21126_18560_28350_28414_27543; BDUSS=0RkcTNETTczdElRUUZBaVNLWjN2VZcy00Z2g2S2FWdjFGcWVoRVB2M2hjQVFBQUFBJCQAAAAAAAAAAAEAAADZlxkqc21hbGy~wsTPv9gAAAAAAAAAAAAAA8yUVwPMlFcd'</span></span><br><span class="line"><span class="comment"># 手动将 cookies 转换成 dict 字典</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># cook_dict = &#123;</span></span><br><span class="line"><span class="comment">#     'BAIDUID':'670AE50017189CE241E77CF222:FG=1',</span></span><br><span class="line"><span class="comment">#     'BIDUPSID':'670AE50017189CF4241E77CF222',</span></span><br><span class="line"><span class="comment">#     'PSTM':'154264',</span></span><br><span class="line"><span class="comment">#     'BDORZ':'B490B5EBF6F3CD402E51A1598',</span></span><br><span class="line"><span class="comment">#     'pgv_pvi':'6780275712',</span></span><br><span class="line"><span class="comment">#     'delPer':'0',</span></span><br><span class="line"><span class="comment">#     'H_PS_PSSID':'1433_0_28329_26350_28414_27543',</span></span><br><span class="line"><span class="comment">#     'BDUSS':'0RkcTNETTczdElRUUZBaVNLWjZQd2VNN2VZcy00Z2g2S2FWdjFGcWVoRVB2M2hjQVFBQUFBJCQAAAAAAAAAAAEAAADZlxkqc21hbGy~wsTPv9gAAAAAAAAA8yUVwPMlFcd</span></span><br><span class="line"><span class="comment"># &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#或者代码转换</span></span><br><span class="line">cookie_dict = &#123;&#125;</span><br><span class="line">cookie_list = cookies.split(<span class="string">';'</span>)</span><br><span class="line"><span class="keyword">for</span> cookie int cookie_list:</span><br><span class="line">    cook_dict[cookie.split(<span class="string">'='</span>)[<span class="number">0</span>]] = cookie.split(<span class="string">'='</span>)[<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">response = requests.get(url, headers=headers, cookies=cook_dict)</span><br></pre></td></tr></table></figure><h3 id="session："><a href="#session：" class="headerlink" title="session："></a>session：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">之前使用urllib库，是可以使用opener发送多个请求，多个请求之间是可以共享cookie的。</span><br><span class="line">那么如果使用requests，也要达到共享cookie的目的，那么可以使用requests库给我们提供的session对象。</span><br><span class="line">注意，这里的session不是web开发中的那个session，这个地方只是一个会话的对象而已。还是以登录人人网为例，使用requests来实现。</span><br><span class="line">示例代码如下：</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">"http://www.renren.com/PLogin.do"</span></span><br><span class="line">data = &#123;<span class="string">"email"</span>:<span class="string">"970138074@qq.com"</span>,<span class="string">'password'</span>:<span class="string">"pythonspider"</span>&#125;</span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 登录</span></span><br><span class="line">session = requests.session()</span><br><span class="line">session.post(url,data=data,headers=headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 访问大鹏个人中心</span></span><br><span class="line">resp = session.get(<span class="string">'http://www.renren.com/880151247/profile'</span>)</span><br><span class="line"></span><br><span class="line">print(resp.text)</span><br></pre></td></tr></table></figure><h3 id="处理不信任的SSL证书："><a href="#处理不信任的SSL证书：" class="headerlink" title="处理不信任的SSL证书："></a>处理不信任的SSL证书：</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">对于那些已经被信任的SSL整数的网站，比如https://www.baidu.com/，那么使用requests直接就可以正常的返回响应。示例代码如下：</span><br><span class="line"></span><br><span class="line">resp = requests.get(<span class="string">'http://www.12306.cn/mormhweb/'</span>,verify=<span class="keyword">False</span>)</span><br><span class="line">print(resp.content.decode(<span class="string">'utf-8'</span>))</span><br></pre></td></tr></table></figure><ul><li>对于不被SSL信任的网站则会抛出异常错误</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">requests_ssl</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'https://sso.ctgu.edu.cn:7002/cas/login?service=http://210.42.35.80/G2S/ShowSystem/CA.aspx'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    response = requests.get(url=url, headers=headers)</span><br><span class="line">    data = response.content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    print(data)</span><br><span class="line"></span><br><span class="line">requests_ssl()</span><br><span class="line"><span class="comment"># 抛出 requests.exceptions.SSLError 异常， 就是SSL认证错误</span></span><br></pre></td></tr></table></figure><ul><li>解决方式是告诉 web 忽略证书访问</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">response = requests.get(url=url, headers=headers, verify=<span class="keyword">False</span>)</span><br></pre></td></tr></table></figure><h3 id="requests的使用例子"><a href="#requests的使用例子" class="headerlink" title="requests的使用例子"></a>requests的使用例子</h3><h4 id="基础例子"><a href="#基础例子" class="headerlink" title="基础例子"></a>基础例子</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestSpider</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        url = <span class="string">'http://www.baidu.com'</span></span><br><span class="line">        headers1 = &#123;</span><br><span class="line">            <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"</span></span><br><span class="line">        &#125;</span><br><span class="line">        self.response = requests.get(url, headers=headers1)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        data = self.response.content <span class="comment">#获取返回体</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">#获取请求头</span></span><br><span class="line">        request_header = self.response.request.headers</span><br><span class="line">        print(request_header)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#获取响应头</span></span><br><span class="line">        response_header = self.response.headers</span><br><span class="line">        print(response_header)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#响应状态码</span></span><br><span class="line">        response_code = self.response.status_code</span><br><span class="line">        print(response_code)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#请求的cookie</span></span><br><span class="line">        request_cookie = self.response.request._cookies</span><br><span class="line">        <span class="comment">#低版本的requests是 request_cookie = self.response.request.cookies</span></span><br><span class="line">        print(request_cookie)</span><br><span class="line"></span><br><span class="line">        <span class="comment">#响应的cookie</span></span><br><span class="line">        response_cookie = self.response.cookies</span><br><span class="line">        print(response_cookie)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#json()自动将json字符串转换为 python的 列表或字典</span></span><br><span class="line">        dta = self.response.json()</span><br><span class="line"></span><br><span class="line">RequestSpider().run()</span><br></pre></td></tr></table></figure><h2 id="python的正则表达式"><a href="#python的正则表达式" class="headerlink" title="python的正则表达式"></a>python的正则表达式</h2><h3 id="正则规则"><a href="#正则规则" class="headerlink" title="正则规则"></a>正则规则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#导入python自带的正则库</span></span><br><span class="line"><span class="keyword">import</span> re</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">项目</th><th style="text-align:left">价格</th></tr></thead><tbody><tr><td style="text-align:center"><strong>\</strong></td><td style="text-align:left">将下一个字符标记为特殊字符，或一个原义字符，或一个向后引用，或一个八进制转义符</td></tr><tr><td style="text-align:center"><strong>^</strong></td><td style="text-align:left">匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配’\n’或’\r’之后的位置</td></tr><tr><td style="text-align:center"><strong>$</strong></td><td style="text-align:left">匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，^也匹配’\n’或’\r’之前的位置</td></tr><tr><td style="text-align:center"><strong>*</strong></td><td style="text-align:left">匹配前面的子表达式0次或多次。例如 ‘zo*’ 可以 匹配 ‘z’ ‘zo’ ‘zoo’ 等</td></tr><tr><td style="text-align:center"><strong>+</strong></td><td style="text-align:left">匹配前面的子表达式一次或多次。例如 ‘zo+’ 能匹配 ‘zo’ ‘zoo’ 等 不能匹配 ‘z’</td></tr><tr><td style="text-align:center"><strong>?</strong></td><td style="text-align:left">匹配前面的子表达式0次或一次。例如 ‘zo(es)?’ 匹配 ‘zoed’ 或 ‘zo’</td></tr><tr><td style="text-align:center"><strong>{n}</strong></td><td style="text-align:left">n是一个非负整数。匹配确定的n次。例如’o{2}’ 能够匹配 ‘food’ 不能匹配 ‘bob’</td></tr><tr><td style="text-align:center"><strong>{n,}</strong></td><td style="text-align:left">n是一个非负整数。匹配至少n次，无上限。例如’o{2,}’ 能够匹配 ‘food’ ‘dooof’ 不能匹配’Bob’</td></tr><tr><td style="text-align:center"><strong>{n,m}</strong></td><td style="text-align:left">n，m是非负整数。匹配至少n次，至多m次。例如’o{2,3}’能够匹配 ‘food’ ‘foood’ 不能’Bob’’boooob’</td></tr><tr><td style="text-align:center"><strong>?</strong></td><td style="text-align:left">当该字符紧跟在任何一个其他限制符(*,+,?,{n},{n,},{n,m})后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如：对于字符串’ooooo’，‘o+?’将匹配单个o，而’o+’匹配所有的‘o’</td></tr><tr><td style="text-align:center"><strong>.</strong></td><td style="text-align:left">匹配除’\n’之外的任何一个单个字符。要匹配包括’\n’在内的任何字符，请使用想’(.\</td><td>\n)’的模式</td></tr><tr><td style="text-align:center"><strong>(pattern)</strong></td><td style="text-align:left">匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>”或“<code>\)</code>”。</td></tr><tr><td style="text-align:center"><strong>(?:pattern)</strong></td><td style="text-align:left">匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td><td>)<code>”来组合一个模式的各个部分是很有用。例如“</code>industr(?:y</td><td>ies)<code>”就是一个比“</code>industry</td><td>industries`”更简略的表达式。</td></tr><tr><td style="text-align:center"><strong>(?=pattern)</strong></td><td style="text-align:left">正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td><td>98</td><td>NT</td><td>2000)<code>”能匹配“</code>Windows2000<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows3.1<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始。</td></tr><tr><td style="text-align:center"><strong>(?!pattern)</strong></td><td style="text-align:left">正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td><td>98</td><td>NT</td><td>2000)<code>”能匹配“</code>Windows3.1<code>”中的“</code>Windows<code>”，但不能匹配“</code>Windows2000<code>”中的“</code>Windows`”。预查不消耗字符，也就是说，在一个匹配发生后，在最后一次匹配之后立即开始下一次匹配的搜索，而不是从包含预查的字符之后开始</td></tr><tr><td style="text-align:center"><strong>(?&lt;=pattern)</strong></td><td style="text-align:left">反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td><td>98</td><td>NT</td><td>2000)Windows<code>”能匹配“</code>2000Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>3.1Windows<code>”中的“</code>Windows`”。</td></tr><tr><td style="text-align:center"><strong>(?&lt;!pattern)</strong></td><td style="text-align:left">反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td><td>98</td><td>NT</td><td>2000)Windows<code>”能匹配“</code>3.1Windows<code>”中的“</code>Windows<code>”，但不能匹配“</code>2000Windows<code>”中的“</code>Windows`”。</td></tr><tr><td style="text-align:center">**x\</td><td style="text-align:left">y**</td><td>匹配x或y。例如，“`z</td><td>food<code>”能匹配“</code>z<code>”或“</code>food<code>”。“</code>(z</td><td>f)ood<code>”则匹配“</code>zood<code>”或“</code>food`”。</td></tr><tr><td style="text-align:center"><strong>[xyz]</strong></td><td style="text-align:left">字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>”可以匹配“<code>plain</code>”中的“<code>a</code>”。</td></tr><tr><td style="text-align:center"><strong>[^xyz]</strong></td><td style="text-align:left">负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>”可以匹配“<code>plain</code>”中的“<code>p</code>”。</td></tr><tr><td style="text-align:center"><strong>[a-z]</strong></td><td style="text-align:left">字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>”可以匹配“<code>a</code>”到“<code>z</code>”范围内的任意小写字母字符。</td></tr><tr><td style="text-align:center"><strong>[^a-z]</strong></td><td style="text-align:left">负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>”可以匹配任何不在“<code>a</code>”到“<code>z</code>”范围内的任意字符。</td></tr><tr><td style="text-align:center"><strong>\b</strong></td><td style="text-align:left">匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>”可以匹配“<code>never</code>”中的“<code>er</code>”，但不能匹配“<code>verb</code>”中的“<code>er</code>”。</td></tr><tr><td style="text-align:center"><strong>\B</strong></td><td style="text-align:left">匹配非单词边界。“<code>er\B</code>”能匹配“<code>verb</code>”中的“<code>er</code>”，但不能匹配“<code>never</code>”中的“<code>er</code>”。</td></tr><tr><td style="text-align:center"><strong>\cx</strong></td><td style="text-align:left">匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>”字符。</td></tr><tr><td style="text-align:center"><strong>\d</strong></td><td style="text-align:left">匹配一个数字字符。等价于[0-9]。</td></tr><tr><td style="text-align:center"><strong>\D</strong></td><td style="text-align:left">匹配一个非数字字符。等价于[^0-9]。</td></tr><tr><td style="text-align:center"><strong>\f</strong></td><td style="text-align:left">匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td style="text-align:center"><strong>\n</strong></td><td style="text-align:left">匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td style="text-align:center"><strong>\r</strong></td><td style="text-align:left">匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td style="text-align:center"><strong>\s</strong></td><td style="text-align:left">匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td style="text-align:center"><strong>\S</strong></td><td style="text-align:left">匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td></tr><tr><td style="text-align:center"><strong>\t</strong></td><td style="text-align:left">匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td style="text-align:center"><strong>\v</strong></td><td style="text-align:left">匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td style="text-align:center"><strong>\w</strong></td><td style="text-align:left">匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>”。</td></tr><tr><td style="text-align:center"><strong>\W</strong></td><td style="text-align:left">匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>”。</td></tr><tr><td style="text-align:center"><strong>\xn</strong></td><td style="text-align:left">匹配n，其中n为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>”匹配“<code>A</code>”。“<code>\x041</code>”则等价于“<code>\x04&amp;1</code>”。正则表达式中可以使用ASCII编码。.</td></tr><tr><td style="text-align:center"><strong>\num</strong></td><td style="text-align:left">匹配num，其中num是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>”匹配两个连续的相同字符。</td></tr><tr><td style="text-align:center"><strong>\n</strong></td><td style="text-align:left">标识一个八进制转义值或一个向后引用。如果\n之前至少n个获取的子表达式，则n为向后引用。否则，如果n为八进制数字（0-7），则n为一个八进制转义值。</td></tr><tr><td style="text-align:center"><strong>\nm</strong></td><td style="text-align:left">标识一个八进制转义值或一个向后引用。如果\nm之前至少有nm个获得子表达式，则nm为向后引用。如果\nm之前至少有n个获取，则n为一个后跟文字m的向后引用。如果前面的条件都不满足，若n和m均为八进制数字（0-7），则\nm将匹配八进制转义值nm。</td></tr><tr><td style="text-align:center"><strong>\nml</strong></td><td style="text-align:left">如果n为八进制数字（0-3），且m和l均为八进制数字（0-7），则匹配八进制转义值nml。</td></tr><tr><td style="text-align:center"><strong>\un</strong></td><td style="text-align:left">匹配n，其中n是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号（©）。</td></tr><tr><td style="text-align:center"><strong>[xyz]</strong></td><td style="text-align:left">表示字符集，匹配所包含的任意字符，例如 [abc] 能匹配’a’,’b’,’c’</td></tr><tr><td style="text-align:center"><strong>[a-z]</strong></td><td style="text-align:left">表示字符范围，能匹配范围内任意一个字符，例如 [a-b] 能匹配 a~z的字符，[1-9] 匹配1~9</td></tr></tbody></table><h3 id="常用正则表达式"><a href="#常用正则表达式" class="headerlink" title="常用正则表达式"></a>常用正则表达式</h3><table><thead><tr><th>用户名</th><th>/^[a-z0-9_-]{3,16}$/</th></tr></thead><tbody><tr><td>密码</td><td>/^[a-z0-9_-]{6,18}$/</td></tr><tr><td>十六进制值</td><td>/^#?([a-f0-9]{6}\</td><td>[a-f0-9]{3})$/</td></tr><tr><td>电子邮箱</td><td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})$/ /^[a-z\d]+(.[a-z\d]+)*@(<a href="-[\da-z]">\da-z</a>?)+(.{1,2}[a-z]+)+$/</td></tr><tr><td>URL</td><td>/^(https?:\/\/)?([\da-z.-]+).([a-z.]{2,6})([\/\w .-]<em>)</em>\/?$/</td></tr><tr><td>IP 地址</td><td>/((2[0-4]\d\</td><td>25[0-5]\</td><td>[01]?\d\d?).){3}(2[0-4]\d\</td><td>25[0-5]\</td><td>[01]?\d\d?)/ /^(?:(?:25[0-5]\</td><td>2[0-4][0-9]\</td><td>[01]?[0-9][0-9]?).){3}(?:25[0-5]\</td><td>2[0-4][0-9]\</td><td>[01]?[0-9][0-9]?)$/</td></tr><tr><td>HTML 标签</td><td>/^&lt;([a-z]+)([^&lt;]+)<em>(?:&gt;(.</em>)&lt;\/\1&gt;\</td><td>\s+\/&gt;)$/</td></tr><tr><td>删除代码\注释</td><td>(?&lt;!http:\</td><td>\S)//.*$</td></tr><tr><td>Unicode编码中的汉字范围</td><td>/^[\u2E80-\u9FFF]+$/</td></tr></tbody></table><h3 id="python使用正则"><a href="#python使用正则" class="headerlink" title="python使用正则"></a>python使用正则</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 贪婪模式 从开头匹配到结尾</span></span><br><span class="line">one_str = <span class="string">'mdfsdsfffdsn1234565n'</span></span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">'m(.)n'</span>)</span><br><span class="line">pattern1 = re.compile(<span class="string">'m(.*)n'</span>)</span><br><span class="line"></span><br><span class="line">result = pattern.findall(one_str)</span><br><span class="line">result1 = pattern1.findall(one_str)</span><br><span class="line"></span><br><span class="line">print(result)<span class="comment">#输出为空 因为 '.' 只能匹配一个</span></span><br><span class="line"></span><br><span class="line">print(result1)<span class="comment">#输出为'dfsdsfffdsn1234565'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 默认的贪婪模式 会 尽可能多的匹配字符串 </span></span><br><span class="line"><span class="comment"># 即使'mdfsdsfffdsn‘已经符合条件 </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 逆贪婪模式就是 不是尽可能大的抓取而是尽可能小的</span></span><br><span class="line">pattern2 = re.compile(<span class="string">'m(.*?)n'</span>)</span><br><span class="line">result2 = pattern2.findall(one_str)</span><br><span class="line">print(result2)<span class="comment"># 输出的就是 'dfsdsfffds'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ' . '不能匹配 换行符 '\n' 但是又方法可以设置</span></span><br><span class="line"></span><br><span class="line">code = <span class="string">"""</span></span><br><span class="line"><span class="string">    msfasdflksjdfkgsdn</span></span><br><span class="line"><span class="string">    123998657982345n</span></span><br><span class="line"><span class="string">    15226326345345N</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line">huanhang1 = re.compile(<span class="string">'m(.*)n'</span>)</span><br><span class="line">huanhang2 = re.compile(<span class="string">'m(.*)n'</span>, re.S)</span><br><span class="line"></span><br><span class="line">result_huanhang1 = huanhang1.findall(code)</span><br><span class="line">result_huanhang2 = huanhang2.findall(code)</span><br><span class="line"></span><br><span class="line">print(result_huanhang1)<span class="comment"># 不能匹配换行的结果</span></span><br><span class="line">print(result_huanhang2)<span class="comment"># 可以匹配换行的结果</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># re正则严格查询大小写，如果不想明确区分大小写，请加上re.I</span></span><br><span class="line"><span class="comment"># 例如：</span></span><br><span class="line">daxiaoxie = re.compile(<span class="string">'m(.*)n'</span>, re.S | re.I ) <span class="comment">#既让 '.'匹配换行，同时不区分大小写</span></span><br></pre></td></tr></table></figure><h4 id="判断方法"><a href="#判断方法" class="headerlink" title="判断方法"></a>判断方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 正则</span></span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">one_str = <span class="string">'a1234'</span></span><br><span class="line">two_str = <span class="string">'1234a'</span></span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">'\d'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 匹配判断的方法</span></span><br><span class="line"><span class="comment"># match 方法 是否匹配成功 从头开始 匹配一次就停止</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 例子：这里需要判断字符串是不是纯数字</span></span><br><span class="line">result = pattern.match(one_str)</span><br><span class="line">result2 = pattern.match(two_str)</span><br><span class="line"></span><br><span class="line">print(result) <span class="comment"># 输出为none，因为第一字字符是’a‘，所以直接输出为none</span></span><br><span class="line">print(result2.group())<span class="comment"># 输出不为1，这个1就是 ’1234a‘ 中第一个字符’1‘</span></span><br><span class="line"><span class="comment"># 很明显 字符串 ’1234a' 不能纯数字，所以这的判断是错的</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 我们想判断 str 是否是纯数字，而不带其他字符，所以需要这样</span></span><br><span class="line"></span><br><span class="line">pattern2 = re.compile(<span class="string">'\d+$'</span>) <span class="comment"># 至少有一个数字，从开头到结尾，而且必须全部是 '\d' （数字）</span></span><br><span class="line"></span><br><span class="line">result3 = pattern2.match(<span class="string">'1234a'</span>)</span><br><span class="line">result4 = pattern2.match(<span class="string">'1234'</span>)</span><br><span class="line"></span><br><span class="line">print(result3) <span class="comment"># 输出为none，因为字符串带有 字母'a' </span></span><br><span class="line">print(result4.group()) <span class="comment"># 输出为 1234 完全匹配</span></span><br></pre></td></tr></table></figure><h4 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">one = <span class="string">'123 abc'</span></span><br><span class="line">two = <span class="string">'abc 123'</span></span><br><span class="line">patter = re.compile(<span class="string">'\d+'</span>)</span><br><span class="line">patter2 = re.compile(<span class="string">'\d+'</span>)</span><br><span class="line"><span class="comment"># match 从头匹配 匹配一次</span></span><br><span class="line">result = patter.match(one)</span><br><span class="line">result2 = patter2.match(two)</span><br><span class="line">print(result)</span><br><span class="line">print(result2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># search 从任意位置匹配一次</span></span><br><span class="line">result3 = patter.search(one)</span><br><span class="line">result4 = patter2.search(one)</span><br><span class="line">print(result3)</span><br><span class="line">print(result4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># findall 查找符合正则的内容 返回的是list</span></span><br><span class="line">result5 = patter.findall(one)</span><br><span class="line">result6 = patter2.findall(two)</span><br><span class="line"></span><br><span class="line"><span class="comment"># sub 替换字符串 把匹配的字符换成目标字符</span></span><br><span class="line">result7 = patter.sub(<span class="string">'#'</span>, one)</span><br><span class="line">result8 = patter2.sub(<span class="string">'#'</span>, two)</span><br><span class="line"></span><br><span class="line"><span class="comment"># split 拆分</span></span><br><span class="line">patter = re.compile(<span class="string">' '</span>) <span class="comment"># 以空格拆分</span></span><br><span class="line">result9 = patter.split(one)</span><br></pre></td></tr></table></figure><h4 id="正则匹配中文"><a href="#正则匹配中文" class="headerlink" title="正则匹配中文"></a>正则匹配中文</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># python 中匹配中文</span></span><br><span class="line"></span><br><span class="line">two = <span class="string">'&lt;a href="http://news.baidu.com" target="_blank" class="mnav"&gt;新闻&lt;/a&gt;'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># python 中匹配中文是有范围的 就是unicode 的 范围 \u4e00 ~ \u9fa5 </span></span><br><span class="line"><span class="comment"># 这个范围是现在的范围，可能跟以前不一样，可能与以后不一样</span></span><br><span class="line"></span><br><span class="line">pattern = re.compile(<span class="string">'[\u4e00-\u9fa5]'</span>)</span><br><span class="line"></span><br><span class="line">result = pattern.findall(two)</span><br><span class="line">print(result) <span class="comment"># 返回列表 '新' '闻'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 很明显我们想要匹配出来的是 "新闻" 而不是 '新' '闻'</span></span><br><span class="line"></span><br><span class="line">pattern1 = re.compile(<span class="string">'[\u4e00-\u9fa5]+'</span>)</span><br><span class="line">result1 = pattern1.findall(two)</span><br><span class="line">print(result1) <span class="comment"># 输出新闻</span></span><br></pre></td></tr></table></figure><h4 id="爬取百度新闻"><a href="#爬取百度新闻" class="headerlink" title="爬取百度新闻"></a>爬取百度新闻</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"><span class="comment"># 爬取 http://news.baidu.com/ 的 各个新闻的 链接</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_baidu_news</span><span class="params">()</span>:</span></span><br><span class="line">    url = <span class="string">'http://news.baidu.com/'</span></span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span></span><br><span class="line">    &#125;</span><br><span class="line">    data = requests.get(url, headers = headers).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line">    <span class="comment"># &lt;a href="http://www.xinhuanet.com/politics/leaders/2019-01/31/c_1124070520.htm" target="_blank" class="a3" mon="ct=1&amp;amp;a=1&amp;amp;c=top&amp;amp;pn=0"&gt;《求是》杂志发表习近平重要文章&lt;/a&gt;</span></span><br><span class="line">    <span class="comment"># 上述是 一个例子</span></span><br><span class="line">    <span class="comment"># 观察例子</span></span><br><span class="line">    patt = <span class="string">'&lt;a href="(.+?)" target="_blank" (.*)&gt;(.*[\u4e00-\u9fa5]+)&lt;/a&gt;'</span></span><br><span class="line">    pattern = re.compile(patt)</span><br><span class="line">    result = pattern.findall(data)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="comment"># print(i[0] +' ' + i[len(i)-1])</span></span><br><span class="line">        <span class="keyword">with</span> open(<span class="string">'config.txt'</span>, <span class="string">'a'</span>) <span class="keyword">as</span> file:</span><br><span class="line">            file.write(i[<span class="number">0</span>])</span><br><span class="line">            file.write(<span class="string">'    '</span>)</span><br><span class="line">            file.write(i[len(i)<span class="number">-1</span>])</span><br><span class="line">            file.write(<span class="string">'\n'</span>)</span><br><span class="line">    <span class="comment"># 在Python的面向对象机制下，这确实非常简单。需要注意的是，当你再次使用“w”方式在文件中写数据，所有原来的内容都会被删除。</span></span><br><span class="line">    <span class="comment"># 如果想保留原来的内容，可以使用“a”方式在文件中结尾附加数据</span></span><br><span class="line"></span><br><span class="line">get_baidu_news()</span><br></pre></td></tr></table></figure><h2 id="Xpath的使用"><a href="#Xpath的使用" class="headerlink" title="Xpath的使用"></a>Xpath的使用</h2><ol><li>安装支持 解析html和xml的解析库 lxml</li><li>pip install lxml</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br></pre></td></tr></table></figure><ul><li>如果想要使用Xpath 需要转解析类型（我们拿到的是字符串，转成xpath能进解析的类型）</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">url = <span class="string">'http://news.baidu.com/'</span></span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>:<span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = requests.get(url, headers=headers).content.decode(<span class="string">'utf-8'</span>)</span><br><span class="line"></span><br><span class="line">xpath_data = etree.HTML(data)</span><br></pre></td></tr></table></figure><ul><li>调用xpath的方法</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result_text = xpath_data.xpath(<span class="string">'//*[@id="pane-news"]/div/ul/li[1]/strong/a/text()'</span>)</span><br><span class="line">print(result_text) <span class="comment"># 输出的就是 标签的text 节点内容</span></span><br><span class="line"></span><br><span class="line">result_url = xpath_data.xpath(<span class="string">'//*[@id="pane-news"]/div/ul/li[1]/strong/a/@href'</span>)</span><br><span class="line">print(result_url)</span><br></pre></td></tr></table></figure><ul><li>Xpath 的 <code>数组</code> 是 <code>从1开始</code> 而不是 <code>从0开始</code></li></ul><h3 id="Xpath的使用规则"><a href="#Xpath的使用规则" class="headerlink" title="Xpath的使用规则"></a>Xpath的使用规则</h3><table><thead><tr><th>符号</th><th style="text-align:left">意义</th></tr></thead><tbody><tr><td>article</td><td style="text-align:left">选取所有article元素的所有子节点</td></tr><tr><td>/article</td><td style="text-align:left">选取根元素article</td></tr><tr><td>article/a</td><td style="text-align:left">选区所有属于article的子元素的a元素</td></tr><tr><td>//div</td><td style="text-align:left">选取所有div子元素（不论出现在文档任何地方）</td></tr><tr><td>article//div</td><td style="text-align:left">选取所有属于article元素的后代的div元素，不管它出现在article之下的任何位置</td></tr><tr><td>//@class</td><td style="text-align:left">选取所有名为class的属性</td></tr><tr><td>/article/div[1]</td><td style="text-align:left">选取属于article子元素的第一个div元素 !!!<code>这个地方下标是从1开始不是从0开始</code></td></tr><tr><td>/article/div[last()]</td><td style="text-align:left">选取属于article子元素的最后一个div元素</td></tr><tr><td>/article/div[last()-1]</td><td style="text-align:left">选取属于article子元素的倒数第二个div元素</td></tr><tr><td>//div[@lang]</td><td style="text-align:left">选取所有拥有lang属性元素的div元素</td></tr><tr><td>//div[@lang = ‘eng’]</td><td style="text-align:left">选取所有lang属性为eng的div元素</td></tr><tr><td>/div/*</td><td style="text-align:left">选取所有div元素的所有子节点</td></tr><tr><td>//*</td><td style="text-align:left">选取所有元素</td></tr><tr><td>//div[@*]</td><td style="text-align:left">选取所有带属性的title元素</td></tr><tr><td>/div/a \</td><td style="text-align:left">//div/p</td><td>选取所有div元素的a和p元素</td></tr><tr><td>//span \</td><td style="text-align:left">//ul</td><td>选取文档中的span和ul元素</td></tr><tr><td>article/div/p \</td><td style="text-align:left">//span</td><td>选取所有属于article元素和div元素和p元素 以及文档中所有的span元素</td></tr></tbody></table><h3 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">result_url = xpath_data.xpath(<span class="string">"//input[contains(@class,'sister')]"</span>)</span><br><span class="line">print(result_url) <span class="comment"># 匹配 class 含有 sister 的input</span></span><br><span class="line"></span><br><span class="line">result_url = xpath_data.xpath(<span class="string">"//input[start-with(@class,'sister')]"</span>)</span><br><span class="line">print(result_url) <span class="comment"># 匹配 class 以 sister 开头的 input</span></span><br><span class="line"></span><br><span class="line">result_url = xpath_data.xpath(<span class="string">"//input[ends-with(@class,'sister')]"</span>)</span><br><span class="line">print(result_url) <span class="comment"># 匹配 class 以 sister 结尾的 input</span></span><br></pre></td></tr></table></figure><ul><li>以 <a href="http://syw.ctgu.edu.cn/info/1003/29224.htm" target="_blank" rel="noopener">http://syw.ctgu.edu.cn/info/1003/29224.htm</a> 为例子</li><li>获取这文章的时间<ol><li>/html/body/<ul><li>html为根节点 所以一开始为html<br>/html/body/table[2]/tbody/tr/td[1]/table/tbody/tr[2]/td/table/tbody/tr[1]/td/form/table/tbody/tr[2]/td/span[1]</li></ul></li><li>浏览器中F12 调试 点中之后 右键 复制 xpath 可直接查看xpath</li><li>当然xpath路径的写法并不唯一，从html源码上看，很容易发现时间是用span标签包着的并且class = “timestyle0010”，所以用//span[@class = “timestyle0010”][0]也可以找到</li></ol></li></ul><h2 id="Beautifulsoup4"><a href="#Beautifulsoup4" class="headerlink" title="Beautifulsoup4"></a>Beautifulsoup4</h2><ul><li>安装 bs4  <code>pip install beautifulsoup4</code></li><li>参考文档 <code>https://beautifulsoup.readthedocs.io/zh_CN/v4.4.0/</code></li></ul><h3 id="Bs4的小例子"><a href="#Bs4的小例子" class="headerlink" title="Bs4的小例子"></a>Bs4的小例子</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">html_doc = <span class="string">"""</span></span><br><span class="line"><span class="string">&lt;html&gt;&lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;p class="title"&gt;&lt;b&gt;The Dormouse's story&lt;/b&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;Once upon a time there were three little sisters; and their names were</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/elsie" class="sister" id="link1"&gt;Elsie&lt;/a&gt;,</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/lacie" class="sister" id="link2"&gt;Lacie&lt;/a&gt; and</span></span><br><span class="line"><span class="string">&lt;a href="http://example.com/tillie" class="sister" id="link3"&gt;Tillie&lt;/a&gt;;</span></span><br><span class="line"><span class="string">and they lived at the bottom of a well.&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;span&gt;&lt;!-- 这是一个注释 --&gt;&lt;/span&gt;</span></span><br><span class="line"><span class="string">&lt;p class="story"&gt;...&lt;/p&gt;</span></span><br><span class="line"><span class="string">"""</span></span><br><span class="line"><span class="comment"># 很明显上面的html代码有问题，body 和 html 标签没有补全</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 转换类型 </span></span><br><span class="line">soup = BeautifulSoup(html_doc, <span class="string">'lxml'</span>) <span class="comment"># 设定解析器为 lxml，建议pip安装lxml </span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化输出、补全</span></span><br><span class="line">result = soup.prettify()</span><br><span class="line"></span><br><span class="line">print(result) <span class="comment"># 这里 补全了html 和 body 标签</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 解析数据</span></span><br><span class="line">print(soup.head) <span class="comment"># 输出 &lt;head&gt;&lt;title&gt;The Dormouse's story&lt;/title&gt;&lt;/head&gt;</span></span><br><span class="line"></span><br><span class="line">result_head = soup.head</span><br><span class="line">result_p = soup.p <span class="comment"># 这里有3个p标签，但是只能取到第一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据</span></span><br><span class="line">result_a_text = soup.a.string</span><br><span class="line">print(result_a_text) <span class="comment"># 输出为第一个a标签的内容 Elsie</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 属性</span></span><br><span class="line">result_a_href = soup.a[<span class="string">'href'</span>]</span><br><span class="line">print(result_a_href) <span class="comment"># 输出为第一个a标签href属性 http://example.com/elsie</span></span><br></pre></td></tr></table></figure><h3 id="bs4中的对象"><a href="#bs4中的对象" class="headerlink" title="bs4中的对象"></a>bs4中的对象</h3><ul><li>标签</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(soup.head)) <span class="comment"># 输出为 bst.element.tag对象</span></span><br></pre></td></tr></table></figure><ul><li>NavigableString</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(soup.a[<span class="string">'href'</span>])) <span class="comment"># 输出为str</span></span><br></pre></td></tr></table></figure><ul><li>BeautifulSoup</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(type(soup)) <span class="comment"># 输出为 bsf.BeautifulSoup</span></span><br></pre></td></tr></table></figure><ul><li>Comment，注释类型</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 取出第一个p标签中的内容</span></span><br><span class="line">print(soup.p.string) <span class="comment"># 输出为None 空</span></span><br><span class="line">print(type(soup.p.string)) <span class="comment"># 输出为 Comment</span></span><br></pre></td></tr></table></figure><h3 id="获取对象"><a href="#获取对象" class="headerlink" title="获取对象"></a>获取对象</h3><ol><li>find 方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 1. find</span></span><br><span class="line">result = soup.find(name=<span class="string">'a'</span>)</span><br><span class="line">print(result) <span class="comment"># 输出第一个a标签</span></span><br><span class="line"></span><br><span class="line">result = soup.find(attrs=&#123;<span class="string">'class'</span>:<span class="string">'title'</span>&#125;)</span><br><span class="line">print(result) <span class="comment"># 输出class 为 title的，如果有多个则依旧是输出的是第一个</span></span><br><span class="line"></span><br><span class="line">result = soup.find(text=<span class="string">'Tillie'</span>)</span><br><span class="line">print(result) <span class="comment"># 输出的就是传入的Titlle</span></span><br></pre></td></tr></table></figure><ul><li>底层调用的是 find_all 方法，只是 find_all 的 limit = 1，同时返回列表的第一个</li></ul><ol start="2"><li>find_all方法</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 2. find_all</span></span><br><span class="line">result = soup.find_all(name=<span class="string">'a'</span>)</span><br><span class="line">print(result) <span class="comment"># 返回列表，输出的是所有标签为a的</span></span><br><span class="line"></span><br><span class="line">result = soup.find_all(attrs=&#123;<span class="string">'class'</span>:<span class="string">'sister'</span>&#125;)</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><ol start="3"><li>select_one方法-</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 3. find_one  </span></span><br><span class="line">result = soup.select_one(<span class="string">'.sister'</span>) <span class="comment"># css选择器</span></span><br><span class="line">result = soup.select_one(<span class="string">'#id'</span>) <span class="comment"># id选择器</span></span><br><span class="line">result = soup.select_one(<span class="string">'head title'</span>) <span class="comment"># 后代选择器</span></span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure><ul><li>底层调用的是 find_all 方法，只是 find_all 的 limit = 1，同时返回列表的第一个</li></ul><ol start="4"><li>select</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 4. select</span></span><br><span class="line">result = soup.select(<span class="string">'.sister'</span>) <span class="comment"># css选择器</span></span><br><span class="line">result = soup.select(<span class="string">'#id'</span>) <span class="comment"># id选择器</span></span><br><span class="line">result = soup.select(<span class="string">'title,.tile'</span>) <span class="comment"># 主选择器 同事输出 title标签 和 class 为 tile 的</span></span><br><span class="line">result = soup.select(<span class="string">'a[class="sister"]'</span>) <span class="comment"># 标签选择器 找 class = "sister" 的 a 标签</span></span><br><span class="line">print(result) <span class="comment"># 输出一个列表</span></span><br></pre></td></tr></table></figure><ol start="5"><li>获取标签包裹的内容属性</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">result = soup.select(<span class="string">'a'</span>)[<span class="number">0</span>].get_text()</span><br><span class="line">print(result) <span class="comment"># 输出列表中第一个a标签的内容 Elsie</span></span><br><span class="line"></span><br><span class="line">result = soup.select(<span class="string">'a'</span>)[<span class="number">0</span>].get(<span class="string">'href'</span>)</span><br><span class="line">print(result) <span class="comment"># 输出列表中第一个a标签的href属性值</span></span><br></pre></td></tr></table></figure><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><ul><li>json中 必须是 <code>双引号</code>，而不能是单引号 这点很重要</li></ul><h3 id="字符串-和-dic-list-转换"><a href="#字符串-和-dic-list-转换" class="headerlink" title="字符串 和 dic list 转换"></a>字符串 和 dic list 转换</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="comment"># 字符串和dic list 转换</span></span><br><span class="line"></span><br><span class="line">data = <span class="string">'[&#123;"name":"张三","age":20&#125;,&#123;"name":"李四","age":20&#125;]'</span></span><br><span class="line"></span><br><span class="line">list_data = json.loads(data)</span><br><span class="line"></span><br><span class="line">print(type(list_data)) <span class="comment"># str的json转化为列表</span></span><br><span class="line"></span><br><span class="line">list1 = [&#123;<span class="string">"name"</span>:<span class="string">"张三"</span>, <span class="string">"age"</span>:<span class="number">20</span>&#125;, &#123;<span class="string">"name"</span>:<span class="string">"李四"</span>, <span class="string">"age"</span>:<span class="number">30</span>&#125;]</span><br><span class="line">data_json = json.dumps(list1)</span><br><span class="line">print(type(data_json)) <span class="comment"># 列表 转为 str的json</span></span><br></pre></td></tr></table></figure><h3 id="文件对象-和-list-dict-转换"><a href="#文件对象-和-list-dict-转换" class="headerlink" title="文件对象 和 list dict 转换"></a>文件对象 和 list dict 转换</h3><ul><li>json 转 csv</li><li>csv 一个类似于 Excle 表格的东西</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"></span><br><span class="line">data = <span class="string">'[&#123;"name":"张三","age":20&#125;,&#123;"name":"李四","age":20&#125;]'</span></span><br><span class="line">print(data)</span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.json'</span>, <span class="string">'w'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    file.write(data)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 1. 分别读 ，创建文件</span></span><br><span class="line">json_fp = open(<span class="string">'test.json'</span>, <span class="string">'r'</span>)</span><br><span class="line">csv_fp = open(<span class="string">'csv.csv'</span>, <span class="string">'w'</span>)</span><br><span class="line"><span class="comment"># 2. 提出表头，表内容</span></span><br><span class="line">data_list = json.load(json_fp)</span><br><span class="line">data_head = data_list[<span class="number">0</span>].keys() <span class="comment">#获取表头 就是 key</span></span><br><span class="line"></span><br><span class="line">value_list = []</span><br><span class="line"><span class="keyword">for</span> value <span class="keyword">in</span> data_list:</span><br><span class="line">    value_list.append(value.values()) <span class="comment"># 表单数据内容写入列表中</span></span><br><span class="line">    print(type(value)) <span class="comment"># value 类型为dict</span></span><br><span class="line"></span><br><span class="line">print(type(data_head))</span><br><span class="line">print(type(value_list))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. csv写入器</span></span><br><span class="line">writer = csv.writer(csv_fp) <span class="comment"># csv 专用写入器，写入到 'csv.csv' 文件中</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 4. 写入表头</span></span><br><span class="line">writer.writerow(data_head)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 5. 写入内容</span></span><br><span class="line">writer.writerows(value_list)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 6. 关闭文件</span></span><br><span class="line">json_fp.close()</span><br><span class="line">csv_fp.close()</span><br></pre></td></tr></table></figure><h3 id="爬取实例"><a href="#爬取实例" class="headerlink" title="爬取实例"></a>爬取实例</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">No_page = <span class="string">'Page not found - All IT eBooks'</span></span><br><span class="line">star_url = <span class="string">'http://www.allitebooks.com/page/'</span></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">"User-Agent"</span>:<span class="string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/62.0.3202.94 Safari/537.36"</span></span><br><span class="line">&#125;</span><br><span class="line">page = <span class="number">1</span></span><br><span class="line"><span class="keyword">with</span> open(<span class="string">'test.txt'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> file:</span><br><span class="line">    page = int(file.readline())</span><br><span class="line"></span><br><span class="line">csv_fp = open(<span class="string">'csv.csv'</span>, <span class="string">'a'</span>)</span><br><span class="line">CSV_writer = csv.writer(csv_fp)</span><br><span class="line">first = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_down_link</span><span class="params">(url)</span>:</span></span><br><span class="line">    respon =requests.get(url, headers=headers)</span><br><span class="line">    xpath_data = etree.HTML(respon.content.decode(<span class="string">'utf-8'</span>))</span><br><span class="line">    download_link = xpath_data.xpath(<span class="string">'//span[@class="download-links"]/a/@href'</span>)</span><br><span class="line">    downlaod_book_title = xpath_data.xpath(<span class="string">'//h1/text()'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> downlaod_book_title == <span class="keyword">None</span> <span class="keyword">or</span> download_link == <span class="keyword">None</span> <span class="keyword">or</span> len(downlaod_book_title) == <span class="number">0</span> <span class="keyword">or</span> len(download_link) == <span class="number">0</span>:</span><br><span class="line">        print(<span class="string">"error"</span>)</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">    print_str = <span class="string">'name = '</span> + downlaod_book_title[<span class="number">0</span>] + <span class="string">"   link = "</span> + download_link[<span class="number">0</span>]</span><br><span class="line">    print(print_str)</span><br><span class="line"></span><br><span class="line">    ebook_dict = &#123;&#125;</span><br><span class="line">    ebook_dict[<span class="string">'book_title'</span>] = downlaod_book_title[<span class="number">0</span>]</span><br><span class="line">    ebook_dict[<span class="string">'download_link'</span>] = download_link[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">global</span> first </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> first == <span class="keyword">True</span>:</span><br><span class="line">        first = <span class="keyword">False</span></span><br><span class="line">        json_head = ebook_dict.keys() <span class="comment"># 获取表头</span></span><br><span class="line">        CSV_writer.writerow(json_head)</span><br><span class="line">        CSV_writer.writerow(ebook_dict.values())</span><br><span class="line">        print(<span class="string">"******** diyici ********"</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        CSV_writer.writerow(ebook_dict.values())</span><br><span class="line"></span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># get_down_link('http://www.allitebooks.com/troubleshooting-and-maintaining-your-pc-all-in-one-for-dummies-3rd-edition-2/')</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(<span class="keyword">True</span>):</span><br><span class="line">    url = star_url + str(page) + <span class="string">'/'</span></span><br><span class="line">    respon = requests.get(url, headers=headers)</span><br><span class="line">    </span><br><span class="line">    soup = BeautifulSoup(respon.content.decode(<span class="string">'utf-8'</span>), <span class="string">'lxml'</span>)</span><br><span class="line">    title = soup.select_one(<span class="string">'title'</span>).string</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> title == No_page:</span><br><span class="line">        print(<span class="string">'end'</span>)</span><br><span class="line">        csv_fp.close()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">    download_links = soup.select(<span class="string">'a[rel="bookmark"]'</span>)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> book <span class="keyword">in</span> download_links:</span><br><span class="line">        <span class="keyword">if</span> num % <span class="number">2</span> == <span class="number">0</span>:</span><br><span class="line">            print(book.get(<span class="string">'href'</span>))</span><br><span class="line">            get_down_link(book.get(<span class="string">'href'</span>))</span><br><span class="line">        num = num + <span class="number">1</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">global</span> page</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'text.txt'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> file:</span><br><span class="line">        file.write(str(page+<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">    page = page + <span class="number">1</span></span><br><span class="line">    print(<span class="string">"***********   "</span> , page , <span class="string">"    ******************"</span>)</span><br></pre></td></tr></table></figure><h2 id="Scrapy-框架"><a href="#Scrapy-框架" class="headerlink" title="Scrapy 框架"></a>Scrapy 框架</h2><ul><li><p>scrapy的帮助文档<code>https://doc.scrapy.org/en/latest/topics/selectors.html</code></p></li><li><p>内建的CSS选择器和XPath表达式</p></li><li>基于IPython交互式shell，方便编写爬虫和debug</li><li>内建的文件导出和保存方法，格式多样的json，csv，xml</li><li>健壮的编码支持</li><li>扩展性强，可以使用signals和API（中间件，插件，管道）添加自定义功能</li><li>多种用于处理session，cookies，HTTP认证，user-agent，robots.txt，专区深度限制的中间件和插件</li><li>Scrapy内建Telnet console，可用于debug</li></ul><p><img src="./assets/scrpy_spider.jpg" alt=""></p><ul><li><p><strong><em>名词解释</em></strong></p><ul><li>ENGINE：引擎，控制数据流的流向</li><li>SPIDERS：爬虫，对response进行数据分析</li><li>SCHEDULER：调度器，从引擎接受请求并对请求进行排队，以便未来引擎需要的时候返回引擎</li><li>ITEM PIPELINES：数据项管道，对解析成功的数据进行持久化</li><li>DOWNLOADER：下载器，把网页通过请求将其编程一个response，返回给引擎</li><li>中间件：即图像中紫色部分<ul><li>ENGINE 和 DOWNLOADER 中间的中间件 可以对 request 和 response 进行一些修改（比如设置请求头，proxy代理，等等）</li><li>ENGINE 和 SPIDERS 的 中间的中间件  可以 对ITEMS 或者 初识链接添加一下后处理（修改，添加，移除请求，处理爬虫异常等）</li></ul></li></ul></li><li><p><strong><em>序号对应步骤</em></strong></p><ol><li><p>scrapy 会通过 你给的初始链接（start_urls）列表，提取链接</p></li><li><p>链接会通过引擎，到调度器</p></li><li><p>从调度器返回给引擎下一个要爬去的请求</p></li><li><p>引擎通过下载器中间件将链接传递给下载器</p></li><li><p>下载器通过下载器中间件返回给引擎</p></li><li><p>再把响应给爬虫</p></li><li>爬虫解析完响应后通过中间件将数据项和新的请求传递给引擎</li><li>引擎把数据项传递给数据项管道，同时将一下个请求传递个调度器</li></ol></li></ul><h3 id="安装创建Scrapy工程"><a href="#安装创建Scrapy工程" class="headerlink" title="安装创建Scrapy工程"></a>安装创建Scrapy工程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install scrapy</span><br><span class="line">scrapy startproject 工程名</span><br></pre></td></tr></table></figure><ul><li>在命令行所在文件夹中创建出 与工程名相同的文件夹<ul><li><code>工程名</code>文件夹<ul><li><code>__init__.py</code>初识化文件</li><li><code>__pycache__</code>pytho加速引擎</li><li><code>items.py</code> 指定保存文件的数据结构</li><li><code>middlewares.py</code> 中间件，处理request和reponse等相关配置</li><li><code>pipleines.py</code>项目管道，可以输出items</li><li><code>settings.py</code> 设置文件，指定项目的一些配置</li><li><code>spiders</code>文件夹，放置一些要手写的爬虫<ul><li><code>_init__.py</code></li><li><code>__pycache__</code></li></ul></li></ul></li><li>scrapy.cfg 配置文件，指定路径</li></ul></li></ul><h3 id="Scrapy-Shell-操作"><a href="#Scrapy-Shell-操作" class="headerlink" title="Scrapy Shell 操作"></a>Scrapy Shell 操作</h3><ul><li>我这里是Ubuntu操作系统，直接输入<code>scrapy shell 你想爬取的url</code>  进入命令行操作</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell https://blog.csdn.net/baidu_41671472/article/details/82904002</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">2019-02-03 18:19:43 [scrapy.utils.log] INFO: Scrapy 1.6.0 started (bot: scrapybot) # scrapy的版本</span><br><span class="line">2019-02-03 18:19:43 [scrapy.utils.log] INFO: Versions: lxml 4.3.0.0, libxml2 2.9.9, cssselect 1.0.3, parsel 1.5.1, w3lib 1.20.0, Twisted 18.9.0, Python 3.7.0 (default, Jun 28 2018, 13:15:42) - [GCC 7.2.0], pyOpenSSL 18.0.0 (OpenSSL 1.0.2p  14 Aug 2018), cryptography 2.3.1, Platform Linux-4.15.0-45-generic-x86_64-with-debian-buster-sid # scrapy 一些配置文件的版本</span><br><span class="line">2019-02-03 18:19:43 [scrapy.crawler] INFO: Overridden settings: &#123;'DUPEFILTER_CLASS': 'scrapy.dupefilters.BaseDupeFilter', 'LOGSTATS_INTERVAL': 0&#125; # 设置信息</span><br><span class="line">2019-02-03 18:19:43 [scrapy.extensions.telnet] INFO: Telnet Password: 6b0b551cecdc1f24</span><br><span class="line">2019-02-03 18:19:43 [scrapy.middleware] INFO: Enabled extensions: #　开启的一些插件</span><br><span class="line">['scrapy.extensions.corestats.CoreStats',</span><br><span class="line"> 'scrapy.extensions.telnet.TelnetConsole',</span><br><span class="line"> 'scrapy.extensions.memusage.MemoryUsage']</span><br><span class="line">2019-02-03 18:19:43 [scrapy.middleware] INFO: Enabled downloader middlewares:# 开启的插件</span><br><span class="line">['scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.retry.RetryMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.redirect.RedirectMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.cookies.CookiesMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware',</span><br><span class="line"> 'scrapy.downloadermiddlewares.stats.DownloaderStats']</span><br><span class="line">2019-02-03 18:19:43 [scrapy.middleware] INFO: Enabled spider middlewares: # 开启的中间件</span><br><span class="line">['scrapy.spidermiddlewares.httperror.HttpErrorMiddleware',</span><br><span class="line"> 'scrapy.spidermiddlewares.offsite.OffsiteMiddleware',</span><br><span class="line"> 'scrapy.spidermiddlewares.referer.RefererMiddleware',</span><br><span class="line"> 'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware',</span><br><span class="line"> 'scrapy.spidermiddlewares.depth.DepthMiddleware']</span><br><span class="line">2019-02-03 18:19:44 [scrapy.middleware] INFO: Enabled item pipelines: # 启用数据线管道</span><br><span class="line">[]</span><br><span class="line">2019-02-03 18:19:44 [scrapy.extensions.telnet] INFO: Telnet console listening on 127.0.0.1:6023 # telnet 在本地的6023端口进行监听</span><br><span class="line">2019-02-03 18:19:44 [scrapy.core.engine] INFO: Spider opened # 显示爬虫被打开了</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 下面显示的就是 请求和响应的一些信息</span></span><br><span class="line">2019-02-03 18:19:44 [scrapy.core.engine] DEBUG: Crawled (200) &lt;GET https://blog.csdn.net/baidu_41671472/article/details/82904002&gt; (referer: None)</span><br><span class="line">[s] Available Scrapy objects:</span><br><span class="line">[s]   scrapy     scrapy module (contains scrapy.Request, scrapy.Selector, etc)</span><br><span class="line">[s]   crawler    &lt;scrapy.crawler.Crawler object at 0x7fc89040e4a8&gt;</span><br><span class="line">[s]   item       &#123;&#125;</span><br><span class="line">[s]   request    &lt;GET https://blog.csdn.net/baidu_41671472/article/details/82904002&gt;</span><br><span class="line">[s]   response   &lt;200 https://blog.csdn.net/baidu_41671472/article/details/82904002&gt;</span><br><span class="line">[s]   settings   &lt;scrapy.settings.Settings object at 0x7fc890303e48&gt;</span><br><span class="line">[s]   spider     &lt;DefaultSpider 'default' at 0x7fc88fe0f470&gt;</span><br><span class="line">[s] Useful shortcuts:</span><br><span class="line">[s]   fetch(url[, redirect=True]) Fetch URL and update local objects (by default, redirects are followed)</span><br><span class="line">[s]   fetch(req)                  Fetch a scrapy.Request and update local objects </span><br><span class="line">[s]   shelp()           Shell help (print this help)</span><br><span class="line">[s]   view(response)    View response in a browser</span><br></pre></td></tr></table></figure><ul><li>可以直接在命令行中使用xpath 等的命令</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">response.xpath('//h3/text()').extract() #获取所有 h3 标签的内容</span><br><span class="line">response.xpath('//h3[last()]/text()').extract() # 获取最后一个 h3 标签的内容</span><br></pre></td></tr></table></figure><h4 id="全局命令"><a href="#全局命令" class="headerlink" title="全局命令"></a>全局命令</h4><ul><li><h5 id="startproject"><a href="#startproject" class="headerlink" title="startproject"></a>startproject</h5><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy startproject &lt;project_name&gt;</span><br></pre></td></tr></table></figure><p>  这个命令是scrapy最为常用的命令之一，它将会在当前目录下创建一个名为</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;project_name&gt;</span><br></pre></td></tr></table></figure><p>  的项目。</p><ul><li><h5 id="settings"><a href="#settings" class="headerlink" title="settings"></a>settings</h5><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy settings [options]</span><br></pre></td></tr></table></figure><p>  该命令将会输出Scrapy默认设定，当然如果你在项目中运行这个命令将会输出项目的设定值。</p><ul><li><h4 id="runspider"><a href="#runspider" class="headerlink" title="runspider"></a>runspider</h4><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy runspider &lt;spider_file.py&gt;</span><br></pre></td></tr></table></figure><p>  在未创建项目的情况下，运行一个编写在Python文件中的spider。</p><ul><li><h5 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h5><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell [url]</span><br></pre></td></tr></table></figure><p>  以给定的URL(如果给出)或者空(没有给出URL)启动Scrapy shell。</p><p>  例如，</p>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy shell http://www.baidu.com</span><br></pre></td></tr></table></figure><p>  将会打开百度URL，</p><p>  并且启动交互式命令行，可以用来做一些测试。</p><ul><li><h5 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h5><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy fetch &lt;url&gt;</span><br></pre></td></tr></table></figure><p>  使用Scrapy下载器(downloader)下载给定的URL，并将获取到的内容送到标准输出。简单的来说，就是打印url的html代码。</p><ul><li><h5 id="view"><a href="#view" class="headerlink" title="view"></a>view</h5><p>语法:</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy view &lt;url&gt;</span><br></pre></td></tr></table></figure><p>  在你的默认浏览器中打开给定的URL，并以Scrapy spider获取到的形式展现。 有些时候spider获取到的页面和普通用户看到的并不相同，一些动态加载的内容是看不到的， 因此该命令可以用来检查spider所获取到的页面。</p><ul><li><h4 id="version"><a href="#version" class="headerlink" title="version"></a>version</h4><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy version [-v]</span><br></pre></td></tr></table></figure><p>  输出Scrapy版本。配合 -v 运行时，该命令同时输出Python, Twisted以及平台的信息。</p><h4 id="项目命令"><a href="#项目命令" class="headerlink" title="项目命令"></a>项目命令</h4><ul><li><h4 id="crawl"><a href="#crawl" class="headerlink" title="crawl"></a>crawl</h4><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scrapy crawl &lt;spider_name&gt;</span><br><span class="line">scrapy crawl [爬虫名] -o [保存到.json 文件中]</span><br></pre></td></tr></table></figure><p>  使用你项目中的spider进行爬取，即启动你的项目。这个命令将会经常用到，我们会在后面的内容中经常使用。</p><ul><li><h4 id="check"><a href="#check" class="headerlink" title="check"></a>check</h4><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">crapy check [-l] &lt;spider&gt;</span><br></pre></td></tr></table></figure><p>  运行contract检查，检查你项目中的错误之处。</p><ul><li><h4 id="list"><a href="#list" class="headerlink" title="list"></a>list</h4><p>语法:</p></li></ul>  <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scrapy list</span><br></pre></td></tr></table></figure><p>  列出当前项目中所有可用的spider。每行输出一个spider。</p><ul><li><h4 id="genspider"><a href="#genspider" class="headerlink" title="genspider"></a>genspider</h4><p>语法:</p></li></ul>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">scrapy genspider [-t template] &lt;name&gt; &lt;domain</span><br><span class="line">scrapy genspider + 文件名 + 网址</span><br><span class="line">例子：</span><br><span class="line">scrapy genspider text baidu.com</span><br></pre></td></tr></table></figure><p>  在当前项目中创建spider。该方法可以使用提前定义好的模板来生成spider。您也可以自己创建spider的源码文件。</p><h3 id="Scrapy-使用"><a href="#Scrapy-使用" class="headerlink" title="Scrapy 使用"></a>Scrapy 使用</h3><ul><li>items.py文件</li></ul><ul><li>先引入scrapy包</li><li>定义一个与工程名相同的类，继承于 <code>scrapy.Item</code></li><li>把自己的数据项定义在这里</li><li><p># define the fields for your item here like:</p><ul><li># name = scrapy.Field()</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LcfirstItem</span><span class="params">(scrapy.Item)</span>:</span></span><br><span class="line">    <span class="comment"># define the fields for your item here like:</span></span><br><span class="line">    <span class="comment"># name = scrapy.Field()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 将我们想抓取的数据项的字段写下来</span></span><br><span class="line">    title = scrapy.Field()      <span class="comment"># 标题</span></span><br><span class="line">    price = scrapy.Field()      <span class="comment"># 价格</span></span><br><span class="line">    area = scrapy.Field()       <span class="comment"># 面积</span></span><br><span class="line">    district = scrapy.Field()   <span class="comment"># 地段</span></span><br><span class="line">    <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><ul><li><p>新建 my_spider.py 文件，创建自己的爬虫（名字随意）</p></li><li><p>scrapy 会通过 你给的初始链接列表，提取链接</p><ul><li>链接会通过引擎，到调度器，从调度器返回给引擎</li><li>引擎通过下载器中间件传递给下载器，下载器通过下载器中间件返回给引擎</li><li>再把响应给爬虫</li></ul></li><li><p>爬虫仅仅负责解析，所以我们只要写解析就行了</p><ul><li>解析必须写在 <code>parse 函数</code>中</li></ul></li><li><p>my_spider.py文件</p></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> scrapy</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> LcFirst.items <span class="keyword">import</span> LcfirstItem</span><br><span class="line"><span class="keyword">from</span> scrapy.utils <span class="keyword">import</span> spider</span><br><span class="line"><span class="comment"># 导入 刚刚写的 items 中的 自己的类</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaintianItem</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'zufang'</span> <span class="comment"># 爬虫的名字</span></span><br><span class="line">    start_urls = [<span class="string">'http://bj.maitian.cn/zfall/PG1'</span>] <span class="comment"># 格式固定，必须</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> zufang_item <span class="keyword">in</span> response.xpath(<span class="string">'//div[@class="list_title"]'</span>):</span><br><span class="line">            <span class="keyword">yield</span> &#123;                </span><br><span class="line">                <span class="string">'title'</span> : zufang_item.xpath(<span class="string">'./h1/a/text()'</span>).extract_first().strip(),<span class="comment"># 对应items.py中的 title 对象</span></span><br><span class="line">                <span class="string">'price'</span> : zufang_item.xpath(<span class="string">'./div[@class="the_price"]/ol/strong/span/text()'</span>).extract_first().strip(), <span class="comment"># 对应items.py中的 price 对象</span></span><br><span class="line">                <span class="string">'area'</span> : zufang_item.xpath(<span class="string">'./p/span/text()'</span>).extract_first().strip(),  <span class="comment"># 对应items.py中的 area 对象</span></span><br><span class="line">                <span class="string">'district'</span> : zufang_item.xpath(<span class="string">'./p/span/text()'</span>).re(<span class="string">r'昌平|朝阳|东城|大兴|房山|丰台|海淀|门头沟|平谷|石景山|顺义|通州|西城'</span>)[<span class="number">0</span>]<span class="comment"># 对应items.py中的 district 对象</span></span><br><span class="line">                <span class="comment"># 上述使用正则，因为地区肯定会出现在上述地区中的其中之一，因为网站里面明确表示只有这些地区的房子</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        next_page_url = response.xpath(<span class="string">'//div[@id="paging"]/a[@class="down_page"]/@href'</span>).extract_first() <span class="comment"># 下一页链接</span></span><br><span class="line">        print(<span class="string">" ********** next_page_url ="</span>)</span><br><span class="line">        print(next_page_url)</span><br><span class="line">        <span class="keyword">if</span> next_page_url <span class="keyword">is</span> <span class="keyword">not</span> <span class="keyword">None</span>:</span><br><span class="line">            <span class="keyword">yield</span> scrapy.Request(response.urljoin(next_page_url))</span><br><span class="line">            <span class="comment"># 如果不为空，则 将下一个链接 使用urljoin()方法构建完整的绝对URL，因为有些链接是相对链接</span></span><br></pre></td></tr></table></figure><p><strong>博主到这里因为没有用代理，导致被网站封IP了</strong></p><ul><li>文件pipelines.py 用于数据保存，数据持久化<ul><li>参数 item 就是 从上面写的爬虫中yield 出来的内容，是一个字典</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LcfirstPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        zufang = dict(item)</span><br><span class="line">        <span class="comment"># 将提取出来的数据 保存起来 持久化  </span></span><br><span class="line">        <span class="comment"># 参数：item 就是从爬虫中 yield 出来的内容</span></span><br><span class="line">        <span class="comment"># 保存item数据到数据库或者本地等</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><ul><li>pipelines.py中常有的几个函数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LcfirstPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span>    </span><br><span class="line">        <span class="comment"># 可选实现，做参数初始化等</span></span><br><span class="line">        <span class="comment"># doing something</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="comment"># item (Item 对象) – 被爬取的item</span></span><br><span class="line">        <span class="comment"># spider (Spider 对象) – 爬取该item的spider</span></span><br><span class="line">        <span class="comment"># 这个方法必须实现，每个item pipeline组件都需要调用该方法，</span></span><br><span class="line">        <span class="comment"># 这个方法必须返回一个 Item 对象，被丢弃的item将不会被之后的pipeline组件所处理。</span></span><br><span class="line">        <span class="keyword">return</span> item</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="comment"># spider (Spider 对象) – 被开启的spider</span></span><br><span class="line">        <span class="comment"># 可选实现，当spider被开启时，这个方法被调用。</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        <span class="comment"># spider (Spider 对象) – 被关闭的spider</span></span><br><span class="line">        <span class="comment"># 可选实现，当spider被关闭时，这个方法被调用</span></span><br></pre></td></tr></table></figure><h3 id="下载器中间件"><a href="#下载器中间件" class="headerlink" title="下载器中间件"></a>下载器中间件</h3><ul><li>突破反爬虫：<a href="https://www.cnblogs.com/hyit/articles/7882396.html" target="_blank" rel="noopener">https://www.cnblogs.com/hyit/articles/7882396.html</a></li><li>突破反爬虫从某种程度上来看就是 设置 下载器中间件</li></ul><ul><li>下载器中间件按照优先级被调用：<ul><li>当request从引擎向下载器传递时，数字小的下载器中间件先执行</li><li>当下载器将response向引擎传递时，数字大的下载器中间件先执行，小的后执行</li></ul></li></ul><p><strong>Scrapy 提供的默认下载器中间件</strong></p><ul><li>是个字典类型，后面跟的整数就是上述的 数字，</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES_BASE = </span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.robotstxt.RobotsTxtMiddleware'</span>: <span class="number">100</span>, <span class="comment">#爬虫协议中间件</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpauth.HttpAuthMiddleware'</span>: <span class="number">300</span>,<span class="comment">#HTTP认证的中间件</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.downloadtimeout.DownloadTimeoutMiddleware'</span>: <span class="number">350</span>,<span class="comment">#下载超时中间件</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.defaultheaders.DefaultHeadersMiddleware'</span>: <span class="number">400</span>,<span class="comment">#默认headers中间件</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.useragent.UserAgentMiddleware'</span>: <span class="number">500</span>,<span class="comment"># user-agent中间件</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.retry.RetryMiddleware'</span>: <span class="number">550</span>,<span class="comment">#重试</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.ajaxcrawl.AjaxCrawlMiddleware'</span>: <span class="number">560</span>,<span class="comment">#Ajax抓取</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.redirect.MetaRefreshMiddleware'</span>: <span class="number">580</span>,<span class="comment">#元数据刷新</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcompression.HttpCompressionMiddleware'</span>: <span class="number">590</span>,<span class="comment">#Http压缩</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.redirect.RedirectMiddleware'</span>: <span class="number">600</span>,<span class="comment">#重定向</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.cookies.CookiesMiddleware'</span>: <span class="number">700</span>,<span class="comment">#Cookies</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpproxy.HttpProxyMiddleware'</span>: <span class="number">750</span>,<span class="comment">#代理中间件</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.stats.DownloaderStats'</span>: <span class="number">850</span>,<span class="comment">#下载器数据</span></span><br><span class="line">    <span class="string">'scrapy.downloadermiddlewares.httpcache.HttpCacheMiddleware'</span>: <span class="number">900</span>,<span class="comment">#Http缓存</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="下载器中间件？"><a href="#下载器中间件？" class="headerlink" title="下载器中间件？"></a>下载器中间件？</h4><ul><li>下载器中间件是一个类，类里可以定义方法<ul><li>process_request()  <strong>比较重要</strong></li><li>process_response() </li><li>process_exception() </li><li>等等</li></ul></li><li>process_request 参数是<code>request</code>,<code>spider</code><ul><li>参数request 是个字典，包含了headers ，url等信息</li><li>可以利用request里面的信息，对请求做修改，这时函数一般返回的是None<ul><li>典型的任务是 修改user-agent，变换代理 </li></ul></li><li>该函数也可以返回response<ul><li>如果根据参数request里的url直接就去抓取就返回response对象</li><li>那么下载器不经过下载器中间件，直接返回引擎</li></ul></li><li>该函数也可以返回request对象<ul><li>如果对请求做了修改，则发回到调度器，等待调度</li></ul></li></ul></li><li>process_response(request,response, spider)<ul><li>必须返回Response，Request或者IgnoreRequest异常</li></ul></li></ul><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>这次访问 <a href="http://httpbin.org/" target="_blank" rel="noopener">http://httpbin.org/</a> 网站</li><li>scrapy 工程创建的时候就自带 <code>middlewares.py</code> 文件<ul><li>里面定义了下载器中间件和爬虫中间件</li><li>当然也可以自定义下载器中间件</li></ul></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RandowUA</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.user_agent = [</span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.95 Safari/537.36 OPR/26.0.1656.60'</span>,</span><br><span class="line">            <span class="string">'Opera/8.0 (Windows NT 5.1; U; en)'</span>,</span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 5.1; U; en; rv:1.8.1) Gecko/20061208 Firefox/2.0.0 Opera 9.50'</span>,</span><br><span class="line">            <span class="string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; en) Opera 9.50'</span>,</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64; rv:34.0) Gecko/20100101 Firefox/34.0'</span>,</span><br><span class="line">            <span class="string">'Mozilla/5.0 (X11; U; Linux x86_64; zh-CN; rv:1.9.2.10) Gecko/20100922 Ubuntu/10.10 (maverick) Firefox/3.6.10'</span>,</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/534.57.2 (KHTML, like Gecko) Version/5.1.7 Safari/534.57.2'</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/39.0.2171.71 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.11 (KHTML, like Gecko) Chrome/23.0.1271.64 Safari/537.11'</span>,</span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows; U; Windows NT 6.1; en-US) AppleWebKit/534.16 (KHTML, like Gecko) Chrome/10.0.648.133 Safari/534.16'</span>,</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/30.0.1599.101 Safari/537.36'</span>,</span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko'</span>,</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/536.11 (KHTML, like Gecko) Chrome/20.0.1132.11 TaoBrowser/2.0 Safari/536.11'</span>,</span><br><span class="line">            </span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.1 (KHTML, like Gecko) Chrome/21.0.1180.71 Safari/537.1 LBBROWSER'</span>,</span><br><span class="line">            <span class="string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; LBBROWSER)'</span>,</span><br><span class="line">            <span class="string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E; LBBROWSER)'</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; QQBrowser/7.0.3698.400)'</span>,</span><br><span class="line">            <span class="string">'Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; QQDownload 732; .NET4.0C; .NET4.0E)'</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 5.1) AppleWebKit/535.11 (KHTML, like Gecko) Chrome/17.0.963.84 Safari/535.11 SE 2.X MetaSr 1.0'</span>,</span><br><span class="line">            <span class="string">'Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)'</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Maxthon/4.4.3.4000 Chrome/30.0.1599.101 Safari/537.36'</span>,</span><br><span class="line"></span><br><span class="line">            <span class="string">'Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/38.0.2125.122 UBrowser/4.0.3214.0 Safari/537.36'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line">        request.headers[<span class="string">'User-Agent'</span>] = random.choice(self.user_agent)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment"># def process_response(self, request, response, spider):</span></span><br><span class="line">    <span class="comment">#     response.status = 201</span></span><br><span class="line">    <span class="comment">#     return response</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ProxyMiddleware</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.proxy_list = [</span><br><span class="line">            <span class="string">'https://113.121.146.207:9999'</span>,</span><br><span class="line">            <span class="string">'https://121.61.1.99:9999'</span>,</span><br><span class="line">            <span class="string">'https://112.85.168.112:9999'</span>,</span><br><span class="line">            <span class="string">'https://123.55.102.102:9999'</span>,</span><br><span class="line">            <span class="string">'https://121.61.1.153:9999'</span>,</span><br><span class="line">            <span class="string">'https://121.61.0.53:9999'</span>,</span><br><span class="line">            <span class="string">'http://125.123.141.16:9999'</span>,</span><br><span class="line">            <span class="string">'http://222.217.30.94:9999'</span>,</span><br><span class="line">            <span class="string">'https://121.233.206.247:9999'</span>,</span><br><span class="line">            <span class="string">'http://116.209.57.154:9999'</span>,</span><br><span class="line">            <span class="string">'http://121.61.0.116:9999'</span>,</span><br><span class="line">            <span class="string">'http://61.184.109.3361320'</span>,</span><br><span class="line">            <span class="string">'http://112.85.130.23:9999'</span>,</span><br><span class="line">            <span class="string">'http://116.209.53.176:9999'</span>,</span><br><span class="line">            <span class="string">'https://121.61.0.31:9999'</span>,</span><br><span class="line">            <span class="string">'http://110.52.235.160:9999'</span>,</span><br><span class="line">            <span class="string">'https://115.151.2.42:9999'</span>,</span><br><span class="line">            <span class="string">'https://115.151.4.121:9999'</span>,</span><br><span class="line">            <span class="string">'https://122.193.245.53:9999'</span>,</span><br><span class="line">            <span class="string">'http://116.209.59.97:9999'</span></span><br><span class="line">        ]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_request</span><span class="params">(self, request, spider)</span>:</span></span><br><span class="line"></span><br><span class="line">        ip = random.choice(self.proxy_list)</span><br><span class="line">        request.meta[<span class="string">'proxy'</span>] = ip</span><br></pre></td></tr></table></figure><ul><li>第一个类设置请user-agent</li><li>第二个类仅仅设置了 代理</li><li><strong><em><code>代理一定记得加上 http://或者 https://</code> 否则报错 切记</em></strong></li><li><strong>记得必须要在使用代理前进行判断，判断该代理能否运行，否则程序报错</strong></li></ul><p><strong>定义好了中间件，那么怎么使用呢？</strong></p><ul><li>在settings文件中，添加如下代码</li><li>差不多在文件的55行左右的地方有个<code>DOWNLOADER_MIDDLEWARES</code>，这就是scrapy设置的例子</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">DOWNLOADER_MIDDLEWARES = &#123;</span><br><span class="line">   <span class="string">'LcFirst.middlewares.RandowUA'</span>: <span class="number">543</span>, <span class="comment">#后加请求头</span></span><br><span class="line">   <span class="string">'LcFirst.middlewares.ProxyMiddleware'</span>: <span class="number">542</span>, <span class="comment"># 先加代理</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>设置爬虫，查看结果</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MaintianItem</span><span class="params">(scrapy.Spider)</span>:</span></span><br><span class="line">    name = <span class="string">'zufang'</span> <span class="comment"># 爬虫的名字</span></span><br><span class="line">    <span class="comment"># start_urls = ['http://bj.maitian.cn/zfall/PG1'] # 格式固定，必须</span></span><br><span class="line">    start_urls = [<span class="string">'http://httpbin.org/get'</span>]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">parse</span><span class="params">(self, response)</span>:</span></span><br><span class="line">        print(response.text)</span><br><span class="line">        print(response.status)</span><br></pre></td></tr></table></figure><ul><li>输出结果</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[scrapy.core.engine] DEBUG: Crawled (200) &lt;GET http://httpbin.org/get&gt; (referer: None)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"args"</span>: &#123;&#125;, </span><br><span class="line">  <span class="attr">"headers"</span>: &#123;</span><br><span class="line">    <span class="attr">"Accept"</span>: <span class="string">"text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8"</span>, </span><br><span class="line">    <span class="attr">"Accept-Encoding"</span>: <span class="string">"gzip,deflate"</span>, </span><br><span class="line">    <span class="attr">"Accept-Language"</span>: <span class="string">"en"</span>, </span><br><span class="line">    <span class="attr">"Cache-Control"</span>: <span class="string">"max-age=259200"</span>, </span><br><span class="line">    <span class="attr">"Connection"</span>: <span class="string">"close"</span>, </span><br><span class="line">    <span class="attr">"Host"</span>: <span class="string">"httpbin.org"</span>, </span><br><span class="line">    <span class="attr">"User-Agent"</span>: <span class="string">"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0; SV1; QQDownload 732; .NET4.0C; .NET4.0E; SE 2.X MetaSr 1.0)"</span></span><br><span class="line">  &#125;, </span><br><span class="line">  <span class="attr">"origin"</span>: <span class="string">"110.52.235.160"</span>, </span><br><span class="line">  <span class="attr">"url"</span>: <span class="string">"http://httpbin.org/get"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>有些代理 IP 可能无效，需要在使用前先进行测试</strong></p><h3 id="爬虫中间件"><a href="#爬虫中间件" class="headerlink" title="爬虫中间件"></a>爬虫中间件</h3><ul><li>作用<ul><li>处理引擎传递给爬虫的响应</li><li>处理爬虫传递给引擎的请求</li><li>处理爬虫传递给引擎的数据项</li></ul></li></ul><ul><li>默认爬虫中间件</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="string">'scrapy.spidermiddlewares.httperror.HttpErrorMiddleware'</span>: <span class="number">50</span>,<span class="comment"># 处理http错误</span></span><br><span class="line">    <span class="string">'scrapy.spidermiddlewares.offsite.OffsiteMiddleware'</span>: <span class="number">500</span>, <span class="comment"># 站外中间件</span></span><br><span class="line">    <span class="string">'scrapy.spidermiddlewares.referer.RefererMiddleware'</span>: <span class="number">700</span>, <span class="comment"># 网页跳转中，前一个网页就是后一个网页的referer</span></span><br><span class="line">    <span class="string">'scrapy.spidermiddlewares.urllength.UrlLengthMiddleware'</span>: <span class="number">800</span>, <span class="comment"># url长度的中间件</span></span><br><span class="line">    <span class="string">'scrapy.spidermiddlewares.depth.DepthMiddleware'</span>: <span class="number">900</span>, <span class="comment"># url深度的中间件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="自定义爬虫中间件"><a href="#自定义爬虫中间件" class="headerlink" title="自定义爬虫中间件"></a>自定义爬虫中间件</h4><ul><li><p>详情见：<a href="http://docs.scrapy.org/en/latest/topics/spider-middleware.html#writing-your-own-spider-middleware" target="_blank" rel="noopener">http://docs.scrapy.org/en/latest/topics/spider-middleware.html#writing-your-own-spider-middleware</a></p></li><li><p>爬虫中间件也是一个类，包含几个函数：</p><ul><li>process_spider_input(response, spider)</li><li>process_spider_output(response, result, spider)</li><li>process_spider_exception(response, exception, spider)</li><li>process_start_requests(start_requests, spider)</li><li>from_crawler(cls, crawler)</li></ul></li></ul><p><strong><em>实际上，好像并没有怎么用到过爬虫中间件。。。。所以没有例子的说</em></strong></p><h3 id="pipelines-管道"><a href="#pipelines-管道" class="headerlink" title="pipelines 管道"></a>pipelines 管道</h3><ul><li>参考链接：<a href="http://docs.scrapy.org/en/latest/topics/item-pipeline.html" target="_blank" rel="noopener">http://docs.scrapy.org/en/latest/topics/item-pipeline.html</a></li></ul><ul><li>每个管道组件都是一个实现了某个功能的python类，常见功能有：<ul><li>清理html数据</li><li>做确认</li><li>查重</li><li>存入数据库</li><li>等等</li></ul></li><li>每个管道组件的类，必须要有以下方法<ul><li>process_item(self, item, spider) <strong>比较重要</strong></li><li>open_spider(self, spider)</li><li>cloase_spider(self, spider)</li><li>from_crawler(cls, crawler)</li></ul></li></ul><h4 id="丢弃数据项"><a href="#丢弃数据项" class="headerlink" title="丢弃数据项"></a>丢弃数据项</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LcfirstPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    vat_factor = <span class="number">1.15</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">'price'</span>]:</span><br><span class="line">            <span class="keyword">if</span> item[<span class="string">'price_excludes_vat'</span>]:</span><br><span class="line">                item[<span class="string">'price'</span>] = item[<span class="string">'price'</span>] * self.vat_factor</span><br><span class="line">            <span class="keyword">return</span> item</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"missing price in %s"</span> % item)</span><br><span class="line"><span class="comment"># 如果 item 包含 'price' 的数据项，则返回，否则丢弃该item</span></span><br></pre></td></tr></table></figure><h4 id="保存到MongoDB"><a href="#保存到MongoDB" class="headerlink" title="保存到MongoDB"></a>保存到MongoDB</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">mport pymongo</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MongoPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    collection_name = <span class="string">'scrapy_items'</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, mongo_uri, mongo_db)</span>:</span></span><br><span class="line">        self.mongo_uri = mongo_uri</span><br><span class="line">        self.mongo_db = mongo_db</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">from_crawler</span><span class="params">(cls, crawler)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> cls(</span><br><span class="line">            mongo_uri=crawler.settings.get(<span class="string">'MONGO_URI'</span>),</span><br><span class="line">            mongo_db=crawler.settings.get(<span class="string">'MONGO_DATABASE'</span>, <span class="string">'items'</span>)</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client = pymongo.MongoClient(self.mongo_uri)</span><br><span class="line">        self.db = self.client[self.mongo_db]</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.client.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        self.db[self.collection_name].insert_one(dict(item))</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h4 id="保存为本地Json文件"><a href="#保存为本地Json文件" class="headerlink" title="保存为本地Json文件"></a>保存为本地Json文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">JsonWriterPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">open_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.file = open(<span class="string">'items.jl'</span>, <span class="string">'w'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">close_spider</span><span class="params">(self, spider)</span>:</span></span><br><span class="line">        self.file.close()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        line = json.dumps(dict(item)) + <span class="string">"\n"</span></span><br><span class="line">        self.file.write(line)</span><br><span class="line">        <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h4 id="去重"><a href="#去重" class="headerlink" title="去重"></a>去重</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> scrapy.exceptions <span class="keyword">import</span> DropItem</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">quchongPipeline</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.ids_seen = set()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">process_item</span><span class="params">(self, item, spider)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> item[<span class="string">'id'</span>] <span class="keyword">in</span> self.ids_seen:</span><br><span class="line">            <span class="keyword">raise</span> DropItem(<span class="string">"duplicate item found : %s"</span> % item)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.ids_seen.add(item[<span class="string">'id'</span>])</span><br><span class="line">            <span class="keyword">return</span> item</span><br></pre></td></tr></table></figure><h4 id="激活管道"><a href="#激活管道" class="headerlink" title="激活管道"></a>激活管道</h4><ul><li>settrings 文件中 找到 pipilenes </li><li>顺序是数字从小到达执行</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ITEM_PIPELINES = &#123;</span><br><span class="line">    <span class="string">'LcFirst.pipelines.LcfirstPipeline'</span>: <span class="number">300</span>,</span><br><span class="line">    <span class="string">'LcFirst.pipelines.MongoPipeline'</span>: <span class="number">301</span>,</span><br><span class="line">    <span class="string">'LcFirst.pipelines.JsonWriterPipeline'</span>: <span class="number">302</span>,</span><br><span class="line">    <span class="string">'LcFirst.pipelines.quchongPipeline'</span>: <span class="number">303</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Setting文件"><a href="#Setting文件" class="headerlink" title="Setting文件"></a>Setting文件</h3><h4 id="是否遵守爬虫协议"><a href="#是否遵守爬虫协议" class="headerlink" title="是否遵守爬虫协议"></a>是否遵守爬虫协议</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROBOTSTXT_OBEY = <span class="keyword">False</span> <span class="comment"># 不遵守robots.txt 规定的协议</span></span><br></pre></td></tr></table></figure><h4 id="默认并发请求数"><a href="#默认并发请求数" class="headerlink" title="默认并发请求数"></a>默认并发请求数</h4><ul><li>默认是16个</li><li>通过设置 CONCURRENT_REQUESTS = 32 可以设置为32个</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure maximum concurrent requests performed by Scrapy (default: 16)</span></span><br><span class="line"><span class="comment">#CONCURRENT_REQUESTS = 32</span></span><br></pre></td></tr></table></figure><h4 id="请求间歇"><a href="#请求间歇" class="headerlink" title="请求间歇"></a>请求间歇</h4><ul><li>如果两次请求同一个网站，是否需要间歇</li><li>默认间歇值为0</li><li>设置 DOWNLOAD_DELAY = 3 ，设置间隔时间为3s</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Configure a delay for requests for the same website (default: 0)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/settings.html#download-delay</span></span><br><span class="line"><span class="comment"># See also autothrottle settings and docs</span></span><br><span class="line"><span class="comment">#DOWNLOAD_DELAY = 3</span></span><br></pre></td></tr></table></figure><h4 id="每个域名的并发请求数"><a href="#每个域名的并发请求数" class="headerlink" title="每个域名的并发请求数"></a>每个域名的并发请求数</h4><ul><li>CONCURRENT_REQUESTS_PER_IP = 16，设置每个ip的并发请求数</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># The download delay setting will honor only one of:</span></span><br><span class="line"><span class="comment">#CONCURRENT_REQUESTS_PER_DOMAIN = 16</span></span><br><span class="line"><span class="comment">#CONCURRENT_REQUESTS_PER_IP = 16</span></span><br></pre></td></tr></table></figure><h4 id="是否启用cookies"><a href="#是否启用cookies" class="headerlink" title="是否启用cookies"></a>是否启用cookies</h4><ul><li>默认是启用的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disable cookies (enabled by default)</span></span><br><span class="line"><span class="comment">#COOKIES_ENABLED = False</span></span><br></pre></td></tr></table></figure><h4 id="是否启用Telnet控制台"><a href="#是否启用Telnet控制台" class="headerlink" title="是否启用Telnet控制台"></a>是否启用Telnet控制台</h4><ul><li>默认是启用的</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Disable Telnet Console (enabled by default)</span></span><br><span class="line"><span class="comment">#TELNETCONSOLE_ENABLED = False</span></span><br></pre></td></tr></table></figure><h4 id="autothrottle-extension-插件"><a href="#autothrottle-extension-插件" class="headerlink" title="autothrottle extension 插件"></a>autothrottle extension 插件</h4><ul><li>限制抓取的速度</li><li>默认插件关闭</li><li>AUTOTHROTTLE_ENABLED = True #开启autothrottle 插件</li><li>AUTOTHROTTLE_START_DELAY = 5 # 抓取初识链接延迟5s</li><li>AUTOTHROTTLE_MAX_DELAY = 60 # 最大的延迟是60s</li><li>AUTOTHROTTLE_DEBUG = False # 显示统计信息</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable and configure the AutoThrottle extension (disabled by default)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/autothrottle.html</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_ENABLED = True #开启autothrottle 插件</span></span><br><span class="line"><span class="comment"># The initial download delay</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_START_DELAY = 5 </span></span><br><span class="line"><span class="comment"># The maximum download delay to be set in case of high latencies</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_MAX_DELAY = 60 </span></span><br><span class="line"><span class="comment"># The average number of requests Scrapy should be sending in parallel to</span></span><br><span class="line"><span class="comment"># each remote server</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_TARGET_CONCURRENCY = 1.0</span></span><br><span class="line"><span class="comment"># Enable showing throttling stats for every response received:</span></span><br><span class="line"><span class="comment">#AUTOTHROTTLE_DEBUG = False</span></span><br></pre></td></tr></table></figure><h4 id="Http缓存"><a href="#Http缓存" class="headerlink" title="Http缓存"></a>Http缓存</h4><ul><li>可以做到一定的提速，不过会占用本地的存储资源</li><li>HTTPCACHE_ENABLED = True # 打开http缓存</li><li>HTTPCACHE_EXPIRATION_SECS = 0 # 缓存的过期时间，以秒为单位</li><li>HTTPCACHE_DIR = ‘httpcache’ # 缓存的文件夹路径</li><li>HTTPCACHE_IGNORE_HTTP_CODES = [] # 忽略那些http响应码</li><li>HTTPCACHE_STORAGE = ‘scrapy.extensions.httpcache.FilesystemCacheStorage’ </li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Enable and configure HTTP caching (disabled by default)</span></span><br><span class="line"><span class="comment"># See https://doc.scrapy.org/en/latest/topics/downloader-middleware.html#httpcache-middleware-settings</span></span><br><span class="line"><span class="comment">#HTTPCACHE_ENABLED = True</span></span><br><span class="line"><span class="comment">#HTTPCACHE_EXPIRATION_SECS = 0</span></span><br><span class="line"><span class="comment">#HTTPCACHE_DIR = 'httpcache'</span></span><br><span class="line"><span class="comment">#HTTPCACHE_IGNORE_HTTP_CODES = []</span></span><br><span class="line"><span class="comment">#HTTPCACHE_STORAGE = 'scrapy.extensions.httpcache.FilesystemCacheStorage'</span></span><br></pre></td></tr></table></figure><h2 id="如何使用无头浏览器来抓取"><a href="#如何使用无头浏览器来抓取" class="headerlink" title="如何使用无头浏览器来抓取"></a>如何使用无头浏览器来抓取</h2><ul><li>无头浏览器即headless browser<ul><li>是一种没有界面的浏览器</li><li>既然是浏览器那么浏览器该有的东西它都应该有，只是看不到界面而已</li></ul></li><li><p>随着反爬虫和反反爬虫对抗技术的升级，越来越多的爬虫开始使用无头浏览器伪装成正常用户绕过反爬虫策略。</p></li><li><p>从数据的角度来看：</p><ul><li>数据的来源有 Html，Ajax，js这三种</li></ul></li></ul><p><strong>需要下载对应浏览器的驱动，比如chromedriver</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">from</span> selenium.webdriver.support.wait <span class="keyword">import</span> WebDriverWait</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置选项</span></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">'headless'</span>)</span><br><span class="line"><span class="comment"># 不加上headless 则 弹出chrome</span></span><br><span class="line"><span class="comment"># 加上 headless 则 不弹出chrome</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 要换成适应自己浏览器的操作系统的ChromeDirver</span></span><br><span class="line"><span class="comment"># 添加驱动</span></span><br><span class="line">driver = webdriver.Chrome(</span><br><span class="line">    executable_path = <span class="string">'/home/cong/桌面/chromedriver'</span>, <span class="comment"># 驱动的执行路径</span></span><br><span class="line">    chrome_options=option <span class="comment"># chrome 的选项</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://www.baidu.com'</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 打开网站</span></span><br><span class="line">driver.get(url)</span><br><span class="line"><span class="comment"># 网站标题</span></span><br><span class="line">print(driver.title)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在搜索栏输入关键字</span></span><br><span class="line">timeout = <span class="number">5</span>　<span class="comment">#定义超时时间为5秒</span></span><br><span class="line">search_content = WebDriverWait(driver, timeout).until(</span><br><span class="line">    <span class="keyword">lambda</span> d: d.find_element_by_xpath(<span class="string">'//input[@id="kw"]'</span>)</span><br><span class="line">) <span class="comment"># 找到输入框</span></span><br><span class="line">    </span><br><span class="line">search_content.send_keys(<span class="string">'python'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 模拟点击“百度一下”</span></span><br><span class="line">search_button = WebDriverWait(driver, timeout).until(</span><br><span class="line">    <span class="keyword">lambda</span> d: d.find_element_by_xpath(<span class="string">'//input[@id="su"]'</span>)</span><br><span class="line">) <span class="comment"># 找到 搜索按钮</span></span><br><span class="line">search_button.click()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印搜索结果</span></span><br><span class="line">search_result = WebDriverWait(driver, timeout).until(</span><br><span class="line">    <span class="keyword">lambda</span> d: d.find_elements_by_xpath(<span class="string">'//h3[contains(@class, "t")]'</span>) <span class="comment"># 注意element后面一定加上s</span></span><br><span class="line">)</span><br><span class="line"><span class="comment"># print(search_result)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> search_result:</span><br><span class="line">    print(item.text)</span><br><span class="line"></span><br><span class="line">driver.close()</span><br></pre></td></tr></table></figure><ul><li>option.add_argument(‘headless’)<ul><li>不加上headless 则 弹出chrome</li><li>加上 headless 则 不弹出chrome</li></ul></li><li>设置选项<ul><li>opetion = webdriver.ChromeOptions()</li></ul></li><li>添加驱动<ul><li>driver = driver = webdriver.Chrome( executable_path = ‘/home/cong/桌面/chromedriver’,hrome_options=option)</li></ul></li><li>输入文字<ul><li>element.send_keys(‘you want search’)</li></ul></li><li>点击<ul><li>element.click()</li></ul></li><li>查找元素<ul><li>单一节点<ul><li>element = drive.find.element_by_id(“”) </li><li>element = drive.find.element_by_name(“”)</li><li>element = drive.find.element_by_xpath(“”)</li><li>……</li></ul></li><li>多个节点<ul><li>element = drive.find.elements_by_id(“”)</li><li>element = drive.find.elements_by_id(“”)</li><li>element = drive.find.elements_by_id(“”)</li><li>……</li></ul></li></ul></li><li>动作链<ul><li>from selenium.webdriver import ActionChains</li><li>action_chains = ActionChains(driver)</li><li>action_chains.drag_and_drop(element, target).perform()</li><li>上述是 实现一个 名为 drag_and_drop (拖动并放下)的动作</li></ul></li><li>在页面中切换<ul><li>window_heandles = driver.window_handles</li><li>dirver.switch_to.window(window_handles[-1])</li></ul></li><li>保存页面截图<ul><li>driver.save_screeenshot(‘screen.png’)</li></ul></li></ul><p><img src="./assets/screenshot.png" alt="dirver截图"></p><p><strong><em>打开一个网页的时候，网页的加载速度不一样，有快有慢</em></strong></p><ul><li>如果加载速度慢，在网页刚开的一瞬间就使用xpath等查找节点，可能查找不到<ul><li>添加条件进行判断<ul><li>WebDriverWait 直接等待方式</li><li>条件等待方式</li></ul></li><li>可以直接使用上述的lambda表达式方式，比较方便简单</li></ul></li></ul><h3 id="使用cookie"><a href="#使用cookie" class="headerlink" title="使用cookie"></a>使用cookie</h3><ul><li>cookies 必须写成这种 <code>name</code>, <code>value</code> 的格式</li><li>写成一个 字典列表</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">chrome_cookies = [</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'BAIDUID'</span>, <span class="string">'value'</span>: <span class="string">'70AE50017189CEE98CF4E77CF222:FG=1'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'BIDUPSID'</span>, <span class="string">'value'</span>: <span class="string">'670AE50017189CE8CF4241E77CF222'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'PSTM'</span>, <span class="string">'value'</span>: <span class="string">'154286666'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'BD_UPN'</span>, <span class="string">'value'</span>: <span class="string">'123353'</span>&#125;,</span><br><span class="line">    &#123;<span class="string">'name'</span>: <span class="string">'BDUSS'</span>, <span class="string">'value'</span>: <span class="string">'0RkcTNETTczdElRUUZBaVNLWjZQd2VNN2VZcy00Z2g2S2FWdjFGcW'</span>&#125;</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> cookie <span class="keyword">in</span> chrome_cookies:</span><br><span class="line">    driver.add_cookie(cookie)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;爬虫的实际例子：&quot;&gt;&lt;a href=&quot;#爬虫的实际例子：&quot; class=&quot;headerlink&quot; title=&quot;爬虫的实际例子：&quot;&gt;&lt;/a&gt;爬虫的实际例子：&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;1. 搜索引擎（百度、谷歌、360搜索等）。
2. 伯乐在线。
3. 惠惠购
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Lua学习</title>
    <link href="http://yoursite.com/2017/12/24/Lua/"/>
    <id>http://yoursite.com/2017/12/24/Lua/</id>
    <published>2017-12-24T11:13:24.000Z</published>
    <updated>2019-02-07T07:05:04.536Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lua"><a href="#Lua" class="headerlink" title="Lua"></a>Lua</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>Lua是脚本型语言<ul><li>动态编译</li><li>动态执行<ul><li>每次修改不需要重新编译链接执行</li></ul></li><li>运行时编译而并非运行前编译</li></ul></li><li>是C语言编写的</li><li>速度比C语言快</li></ul><h2 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h2><h3 id="Lua的Hello-World"><a href="#Lua的Hello-World" class="headerlink" title="Lua的Hello World"></a>Lua的Hello World</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="string">"Hello world"</span>)</span><br></pre></td></tr></table></figure><p><strong>Lua行末不要分号</strong></p><h3 id="Lua的括号"><a href="#Lua的括号" class="headerlink" title="Lua的括号"></a>Lua的括号</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span></span><br><span class="line">    ……</span><br><span class="line">    ……</span><br><span class="line">    ……</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>Lua语言几乎用不到大括号，取而代之的是do…end</strong></p><h3 id="Lua的注释"><a href="#Lua的注释" class="headerlink" title="Lua的注释"></a>Lua的注释</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--这是一个注释</span></span><br><span class="line">// 双斜杠不是注释了哦</span><br><span class="line"></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">这是一个多行注释哦</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">/*</span><br><span class="line"> 这不是多行注释了哦</span><br><span class="line">*/</span><br></pre></td></tr></table></figure><p><strong>小心不要变成纯文本了</strong></p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--如果上面的多行注释没有写 双横线的话，就变成的纯文本赋值语句哦</span></span><br><span class="line"></span><br><span class="line">a = <span class="string">[[&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 这个时候的 a 就是一个纯文本</span></span><br></pre></td></tr></table></figure><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul><li>Lua是动态类型，不需要定义就可以直接使用</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="string">"I'm a"</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a is "</span>..a)</span><br></pre></td></tr></table></figure><ul><li><p>Lua的数据类型是动态可变的</p></li><li><p>Lua的数据类型</p><ul><li>数字类型<ul><li>整型</li><li>浮点型</li><li>long double 等 都是 数字类型，并没有明确划分</li></ul></li><li>字符串类型</li><li>thread类型<ul><li>线程也算是一个数据类型</li></ul></li><li>function类型<ul><li>函数方法的数据类型</li></ul></li><li>table<ul><li>数组，融合的链表和键值对等</li></ul></li><li>其他类型</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">a = <span class="function"><span class="keyword">function</span><span class="params">(x)</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"user input is "</span>..x)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">a(<span class="string">"test"</span>)</span><br><span class="line"><span class="comment">-- 这就相当于调用了function(x) 那个函数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 唯一一个使用了 大括号的地方</span></span><br><span class="line">myTable = &#123;<span class="number">12</span>,<span class="number">13</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(myTable) <span class="comment">-- 会输出table的地址</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出了序列号和对应的值（序号从1开始）</span></span><br></pre></td></tr></table></figure><h3 id="变量作用域"><a href="#变量作用域" class="headerlink" title="变量作用域"></a>变量作用域</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">b = <span class="string">"123"</span></span><br><span class="line"><span class="keyword">local</span> c = <span class="number">12</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">myfuntion1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"i'm lua"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">myfuntion2</span><span class="params">()</span></span></span><br><span class="line">  <span class="keyword">local</span> a = <span class="string">"hello"</span></span><br><span class="line">    <span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>其他lua文件引用该lua文件的时候，将无法访问到<code>local</code>标记的变量</li><li>相当于 是一个 private 的变量</li><li>反之 如果不加 <code>local</code>标识符，那么Lua默认的是全局变量<code>global</code>类型</li></ul><p><strong>如果一个function函数中创建的变量不是local的，就意味着它是一个global变量</strong></p><h3 id="if语句-没有switch语句"><a href="#if语句-没有switch语句" class="headerlink" title="if语句(没有switch语句)"></a>if语句(没有switch语句)</h3><ul><li>单独一个if</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">12</span> <span class="keyword">then</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">"a\'s value is 12"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>if..else 语句</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">2</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">2</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is 12"</span>)</span><br><span class="line"><span class="keyword">else</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is not 12"</span>)    </span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><ul><li>if…else if…语句</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a = <span class="number">12</span></span><br><span class="line"><span class="keyword">if</span> a == <span class="number">12</span> <span class="keyword">then</span> </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is 12"</span>)</span><br><span class="line">    <span class="keyword">elseif</span> a ~= <span class="number">11</span> <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is not 11"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>这里不等于符号是 <code>~=</code> 注意注意！！！！！</strong></p><h3 id="函数-方法"><a href="#函数-方法" class="headerlink" title="函数/方法"></a>函数/方法</h3><h4 id="无参无返回值"><a href="#无参无返回值" class="headerlink" title="无参无返回值"></a>无参无返回值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"hello"</span>)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="有参无返回值"><a href="#有参无返回值" class="headerlink" title="有参无返回值"></a>有参无返回值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f2</span><span class="params">(a)</span></span></span><br><span class="line">    <span class="built_in">print</span>(a)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="有参有返回值"><a href="#有参有返回值" class="headerlink" title="有参有返回值"></a>有参有返回值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f3</span><span class="params">(a)</span></span></span><br><span class="line">    a += <span class="number">2</span></span><br><span class="line"><span class="keyword">return</span> a</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--调用</span></span><br><span class="line">a = f3(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h4 id="返回多个值"><a href="#返回多个值" class="headerlink" title="返回多个值"></a>返回多个值</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f4</span><span class="params">()</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>,<span class="number">2</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line"><span class="keyword">local</span> a,b = f4()</span><br></pre></td></tr></table></figure><h4 id="可变参数列表"><a href="#可变参数列表" class="headerlink" title="可变参数列表"></a>可变参数列表</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">f5</span><span class="params">(...)</span></span></span><br><span class="line">    <span class="keyword">local</span> myTable = &#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(k,v)    </span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 调用</span></span><br><span class="line">f5(<span class="string">"12"</span>,<span class="number">123</span>,<span class="string">"ok"</span>)</span><br></pre></td></tr></table></figure><h4 id="库函数"><a href="#库函数" class="headerlink" title="库函数"></a>库函数</h4><ul><li>print() 就是一个很明显的print()，因为我们没有定义它</li><li>有些函数是Lua自带的</li></ul><h3 id="逻辑操作符"><a href="#逻辑操作符" class="headerlink" title="逻辑操作符"></a>逻辑操作符</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">or</span> <span class="keyword">not</span></span><br></pre></td></tr></table></figure><ul><li>表示假<ul><li>false</li><li>nil</li></ul></li><li>表示真<ul><li>0</li><li>其他数值</li></ul></li></ul><blockquote><p>and 和 or 就类似于 C语言中的 &amp;&amp; 和 ||</p></blockquote><ul><li>and<ul><li>如果我们第一个需要去计算的操作数，如果操作数是假，则返回第一个操作数</li><li>反之则返回第二个操作数</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">and</span> <span class="number">2</span>)</span><br><span class="line"><span class="comment">-- 输出的 2 哦</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">false</span> <span class="keyword">and</span> <span class="number">5</span>)</span><br><span class="line"><span class="comment">-- 输出 false 哦</span></span><br></pre></td></tr></table></figure><ul><li>or<ul><li>如果第一个我们需要去计算你的操作数为真，返回第一个值</li><li>反之返回第二个值</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="number">1</span> <span class="keyword">or</span> <span class="number">5</span>)</span><br><span class="line"><span class="comment">-- 返回 1</span></span><br><span class="line"><span class="built_in">print</span>(<span class="literal">false</span> <span class="keyword">or</span> <span class="number">5</span>)</span><br><span class="line"><span class="comment">-- 返回 5</span></span><br></pre></td></tr></table></figure><blockquote><p>not 类似于 C语言的 ! 取反</p></blockquote><ul><li>not <ul><li>永远返回的是 true或false</li></ul></li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> <span class="literal">nil</span>)</span><br><span class="line"><span class="comment">-- 返回 true</span></span><br><span class="line"><span class="built_in">print</span>( <span class="keyword">not</span> <span class="number">1</span>)</span><br><span class="line"><span class="comment">-- 返回 false</span></span><br></pre></td></tr></table></figure><h3 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h3><h4 id="while"><a href="#while" class="headerlink" title="while"></a>while</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> index = <span class="number">1</span></span><br><span class="line"><span class="keyword">local</span> mytable = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">while</span> mytable[index] <span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">print</span>(mytable[index])</span><br><span class="line">    index = index+<span class="number">1</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><h4 id="do……while换成了-repeat"><a href="#do……while换成了-repeat" class="headerlink" title="do……while换成了 repeat"></a>do……while换成了 repeat</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">repeat</span></span><br><span class="line">    line = <span class="built_in">io</span>.<span class="built_in">read</span>() <span class="comment">-- 从命令行获取输入</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line"><span class="keyword">until</span> line ~= <span class="string">""</span></span><br></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">5</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(i)    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出 1 2 3 4 5 想想为什么</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">1</span>, <span class="number">10</span>, <span class="number">2</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(i)    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出 1 3 5 7 9 想想为什么</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i = <span class="number">20</span>, <span class="number">10</span>, <span class="number">-2</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(i)    </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 输出 20 18 16 14 12 想想为什么</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span> = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, #<span class="built_in">table</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">table</span>[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- #table 相当于取 table的长度，然后遍历</span></span><br></pre></td></tr></table></figure><p><strong>上述可见，for 后面有三个参数 一个是初始化i，一个是结束判断，一个是加减i(默认为1)</strong></p><h3 id="Table的使用"><a href="#Table的使用" class="headerlink" title="Table的使用"></a>Table的使用</h3><ul><li>Table类似于Java的list和map的结合体</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 建立一个有数值的table</span></span><br><span class="line"><span class="keyword">local</span> MyTable = &#123;</span><br><span class="line">    <span class="number">1</span>, <span class="comment">-- 索引为1</span></span><br><span class="line">    <span class="number">2</span>,<span class="comment">-- 索引为2</span></span><br><span class="line">    <span class="number">3</span>,<span class="comment">-- 索引为3</span></span><br><span class="line">    <span class="number">4</span>,<span class="comment">-- 索引为4</span></span><br><span class="line">    <span class="number">5</span>,<span class="comment">-- 索引为5</span></span><br><span class="line">    table2 = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;, <span class="comment">-- 索引不为6</span></span><br><span class="line">    <span class="string">"ok"</span><span class="comment">-- 索引为6</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>为什么上面的table2的索引部位6呢？</strong></p><h4 id="Table的遍历方式"><a href="#Table的遍历方式" class="headerlink" title="Table的遍历方式"></a>Table的遍历方式</h4><ul><li>Table的复杂性导致其有三种遍历方式</li><li>因为Table既是链表类型又是键值对类型</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">myTable = &#123;</span><br><span class="line">    k = <span class="string">"x"</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">print</span>(myTable[k])</span><br><span class="line"><span class="comment">-- 输出 nil</span></span><br><span class="line"><span class="built_in">print</span>(myTable[<span class="string">"k"</span>])</span><br><span class="line"><span class="comment">-- 输出 x</span></span><br><span class="line"><span class="built_in">print</span>(myTable.k)</span><br><span class="line"><span class="comment">-- 输出 x</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 又或者直接</span></span><br><span class="line">s = <span class="string">"ok"</span></span><br><span class="line">myTable[s] = <span class="number">10</span></span><br><span class="line"><span class="built_in">print</span>(myTable[s])</span><br><span class="line"><span class="comment">-- 直接通过键去设置值</span></span><br></pre></td></tr></table></figure><p><strong>myTable.k 与 myTable[“k”]有所不同</strong></p><ul><li>myTable.k 等价于 myTable[“k”]，索引的键就变成了字符串</li><li>myTable[k] 表示用变量k的值来索引table，索引的键可以是其他</li></ul><h4 id="普通遍历方式"><a href="#普通遍历方式" class="headerlink" title="普通遍历方式"></a>普通遍历方式</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">myTable=&#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,k = <span class="string">"ok"</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>, #myTable <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">"value is "</span>..myTable[i])</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 只输出1,2,3,4,5 哦， 因为 "ok" 的键为 "k"</span></span><br></pre></td></tr></table></figure><h4 id="for-ipairs-迭代器"><a href="#for-ipairs-迭代器" class="headerlink" title="for ipairs(迭代器)"></a>for ipairs(迭代器)</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>与第一种for循环方式一样，都是按照当前索引的隐式索引来迭代并显示值的</strong></p><h4 id="for-pairs-迭代器"><a href="#for-pairs-迭代器" class="headerlink" title="for pairs(迭代器)"></a>for pairs(迭代器)</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(myTable) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(k,v)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>按照键值对来输出</strong></p><p><strong>如果值为一个table，则会输出该table的地址</strong></p><h4 id="Table的作用"><a href="#Table的作用" class="headerlink" title="Table的作用"></a>Table的作用</h4><ol><li>你可以作为第三方插件集成到项目中，为项目提供一个支持功能</li><li>完全使用table进行开发</li><li>当做一种数据的配置集（就是阵列）</li></ol><ul><li>整体游戏的配置集（例子）</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">-- 使用lua，当做一种配置信息</span></span><br><span class="line">application_config = &#123;</span><br><span class="line">    game_config = &#123;</span><br><span class="line">        ifDebugModel = <span class="literal">false</span>, <span class="comment">-- 调试模式</span></span><br><span class="line">        isCheatModel = <span class="literal">true</span> <span class="comment">-- 作弊模式</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    sound_config = &#123;</span><br><span class="line">        isBackgroundMusicOpen = <span class="literal">true</span>,</span><br><span class="line">        isEffectOpen = <span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    textrure_config = &#123;</span><br><span class="line">        Plist_Dictionary = <span class="string">"res/plist/"</span>,</span><br><span class="line">        PACKE_TEXTURE_DIR = <span class="string">"res/images/"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 小怪阵列</span></span><br><span class="line">enemy_waves = &#123;</span><br><span class="line">    &#123;enterId = <span class="number">1</span>, infoid = <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;enterId = <span class="number">2</span>, infoid = <span class="number">1</span>&#125;,</span><br><span class="line">    &#123;enterId = <span class="number">2</span>, infoid = <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;enterId = <span class="number">1</span>, infoid = <span class="number">2</span>&#125;,</span><br><span class="line">    &#123;enterId = <span class="number">1</span>, infoid = <span class="number">1</span>&#125;</span><br><span class="line">    <span class="comment">--[[</span></span><br><span class="line"><span class="comment">        很典型的小怪阵列</span></span><br><span class="line"><span class="comment">        enterId 指的是 出兵口</span></span><br><span class="line"><span class="comment">        infoid 有一些具体信息</span></span><br><span class="line"><span class="comment">    ]]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">enemy_datas = &#123;</span><br><span class="line">    &#123; maxHp = <span class="number">100</span>, damage = <span class="number">70</span>, isHaveSpecialEffect = <span class="literal">true</span> &#125;,</span><br><span class="line">    &#123; maxHp = <span class="number">50</span>, damage = <span class="number">20</span>, isHaveSpecialEffect = <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; maxHp = <span class="number">75</span>, damage = <span class="number">50</span>, isHaveSpecialEffect = <span class="literal">false</span> &#125;,</span><br><span class="line">    &#123; maxHp = <span class="number">125</span>, damage = <span class="number">80</span>, isHaveSpecialEffect = <span class="literal">true</span> &#125;</span><br><span class="line">    <span class="comment">-- 这里的参数 maxHp 指的是最高血量，damage 指的是攻击伤害， isHavaSpecialEffect 指的是是否有攻击特效</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> <span class="built_in">pairs</span>(enemy_datas) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(key, value)</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(value) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="keyword">for</span> ik,iv <span class="keyword">in</span> <span class="built_in">pairs</span>(value) <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">print</span>(ik, iv)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">"__________"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><p><strong>使用Lua可以很快的给角色赋予属性</strong><br><strong>使用Lua可以很快的设置调试属性</strong></p><h3 id="读写数据文件"><a href="#读写数据文件" class="headerlink" title="读写数据文件"></a>读写数据文件</h3><ul><li>以万能的txt文件作为例子</li><li>这里使用IO库</li></ul><h4 id="一种写法"><a href="#一种写法" class="headerlink" title="一种写法"></a>一种写法</h4><ul><li>读<figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"123.txt"</span>,<span class="string">'r'</span>))</span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">    返回一个文件流指针</span></span><br><span class="line"><span class="comment">    assert 是一个断言，当读写输入报错的时候会报错</span></span><br><span class="line"><span class="comment">    这里的io其实是一个table，正如同上面的table所讲的使用 '.' 来获取键的值</span></span><br><span class="line"><span class="comment">    这里的open就是io的一个键</span></span><br><span class="line"><span class="comment">    open 函数 有两个参数 一个是 路径名字 一个是 操作名字</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">r 以只读方式打开文件，该文件必须存在。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">w 打开只写文件，若文件存在则文件长度清为0，即该文件内容会消失。若文件不存在则建立该文件。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a 以附加的方式打开只写文件。若文件不存在，则会建立该文件，如果文件存在，写入的数据会被加到文件尾，即文件原先的内容会被保留。（EOF符保留）</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">r+ 以可读写方式打开文件，该文件必须存在。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">w+ 打开可读写文件，若文件存在则文件长度清为零，即该文件内容会消失。若文件不存在则建立该文件。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">a+ 与a类似，但此文件可读可写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">b 二进制模式，如果文件是二进制文件，可以加上b</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">+ 号表示对文件既可以读也可以写</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"><span class="keyword">local</span> <span class="built_in">string</span> = f:<span class="built_in">read</span>(<span class="string">"*all"</span>);</span><br><span class="line"><span class="comment">-- *all 表示读取文件的所有内容</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">*line 表示读取一行</span></span><br><span class="line"><span class="comment">*number 表示读取一个数字</span></span><br><span class="line"><span class="comment">&lt;num&gt;读取一个不超过num长度的字符串</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">f:<span class="built_in">close</span>() <span class="comment">-- 关闭流</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">string</span>)</span><br></pre></td></tr></table></figure></li></ul><p><strong>需要强调的是，f后面的’:’相当于面向对象的封装方式</strong></p><p>-写</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">Write_txt</span><span class="params">(filename, inData)</span></span></span><br><span class="line">    <span class="keyword">local</span> f = <span class="built_in">assert</span>(<span class="built_in">io</span>.<span class="built_in">open</span>(filename, <span class="string">'a'</span>))</span><br><span class="line">    f:<span class="built_in">write</span>(inData);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">Write_txt(<span class="string">"123.txt"</span>, <span class="string">"\nthis is a function"</span>);</span><br></pre></td></tr></table></figure><h4 id="另一种写法"><a href="#另一种写法" class="headerlink" title="另一种写法"></a>另一种写法</h4><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">------------------简单模型-----------------</span></span><br><span class="line"><span class="comment">--读</span></span><br><span class="line"><span class="keyword">local</span> file1=<span class="built_in">io</span>.<span class="built_in">input</span>(<span class="string">"1.txt"</span>)  <span class="comment">--当前目录"1.txt"要存在，不然出错</span></span><br><span class="line"><span class="keyword">local</span> str=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*a"</span>)</span><br><span class="line"><span class="built_in">print</span>(str)</span><br><span class="line"><span class="comment">--写</span></span><br><span class="line"><span class="keyword">local</span> file2=<span class="built_in">io</span>.<span class="built_in">output</span>(<span class="string">"2.txt"</span>) <span class="comment">--当前目录"2.txt"不需要存在</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(str)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">flush</span>()</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>()</span><br><span class="line"></span><br><span class="line"><span class="comment">--利用这几个函数可以做一个文件复制的函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">copy</span><span class="params">(fileA,fileB)</span></span></span><br><span class="line">  <span class="keyword">local</span> file1=<span class="built_in">io</span>.<span class="built_in">input</span>(fileA) </span><br><span class="line">  <span class="keyword">if</span> <span class="keyword">not</span> file1 <span class="keyword">then</span> <span class="built_in">print</span>(fileA..<span class="string">"不存在"</span>) <span class="keyword">return</span> <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">local</span> str=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">"*a"</span>)</span><br><span class="line">  <span class="keyword">local</span> file2=<span class="built_in">io</span>.<span class="built_in">output</span>(fileB)</span><br><span class="line">  <span class="built_in">io</span>.<span class="built_in">write</span>(str)</span><br><span class="line">  <span class="built_in">io</span>.<span class="built_in">flush</span>()</span><br><span class="line">  <span class="built_in">io</span>.<span class="built_in">close</span>()  </span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> <span class="built_in">io</span>.<span class="built_in">lines</span>(<span class="string">"1.txt"</span>) <span class="keyword">do</span></span><br><span class="line">  <span class="built_in">print</span>(line)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">------------------完整模型-----------------</span></span><br><span class="line"><span class="keyword">local</span> f=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">"3.txt"</span>,<span class="string">"a+"</span>)</span><br><span class="line">f:<span class="built_in">write</span>(<span class="string">"Happy New Year!"</span>)</span><br><span class="line">f:<span class="built_in">flush</span>()</span><br><span class="line"></span><br><span class="line">f:seek(<span class="string">"end"</span>,<span class="number">-1</span>) <span class="comment">--定位到文件末尾前一个字节</span></span><br><span class="line"><span class="keyword">local</span> str=f:<span class="built_in">read</span>(<span class="number">1</span>) <span class="comment">--读取一个字符</span></span><br><span class="line"><span class="built_in">print</span>(str) <span class="comment">--输出"!"</span></span><br><span class="line">f:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><h3 id="串行化"><a href="#串行化" class="headerlink" title="串行化"></a>串行化</h3><ul><li>当一个对象没用被用到后就会从内存中delete掉，但是有的时候我们又想在之后恢复该对象到当时的状态</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">serialize</span><span class="params">( o )</span></span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span>(o) == <span class="string">"number"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>( o )</span><br><span class="line">    <span class="keyword">elseif</span> <span class="built_in">type</span>(o) == <span class="string">"string"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">"%q"</span>, o))</span><br><span class="line">    <span class="keyword">elseif</span> <span class="built_in">type</span>(o) == <span class="string">"table"</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"&#123;\n"</span>)</span><br><span class="line">        <span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(o) <span class="keyword">do</span></span><br><span class="line">            <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"  "</span>, k, <span class="string">" = "</span>)</span><br><span class="line">            serialize( v )</span><br><span class="line">            <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">",\n"</span>)</span><br><span class="line">        <span class="keyword">end</span></span><br><span class="line">        <span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">"&#125;\n"</span>)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">file = <span class="built_in">io</span>.<span class="built_in">output</span>(<span class="string">"123.txt"</span>)</span><br><span class="line"><span class="built_in">table</span> = &#123;</span><br><span class="line">    <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span></span><br><span class="line">&#125;</span><br><span class="line">serialize(<span class="built_in">table</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">flush</span>()</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure><p><strong>上述代码将一个table对象保存到txt文件中</strong></p><h3 id="模块化-module"><a href="#模块化-module" class="headerlink" title="模块化 module"></a>模块化 module</h3><ul><li>Java有 package包 来封装类</li><li>C++有 namespace 名空间 来封住类</li></ul><h2 id="Lua与C-的交互"><a href="#Lua与C-的交互" class="headerlink" title="Lua与C++的交互"></a>Lua与C++的交互</h2><ul><li>Lua底层实现是 C/C++</li></ul><h3 id="Lua与C-交互的中间件栈"><a href="#Lua与C-交互的中间件栈" class="headerlink" title="Lua与C++交互的中间件栈"></a>Lua与C++交互的中间件栈</h3><ul><li>Lua与C++又部分不同，Lua有内部垃圾回收机制</li><li>Lua无需声明直接使用，而C++需要声明变量</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lua&quot;&gt;&lt;a href=&quot;#Lua&quot; class=&quot;headerlink&quot; title=&quot;Lua&quot;&gt;&lt;/a&gt;Lua&lt;/h1&gt;&lt;h2 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h2&gt;&lt;u
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Java基础学习</title>
    <link href="http://yoursite.com/2017/12/23/Java%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2017/12/23/Java基础学习/</id>
    <published>2017-12-23T15:03:02.000Z</published>
    <updated>2019-02-07T07:05:16.157Z</updated>
    
    <content type="html"><![CDATA[<h1 id="真～Java基础"><a href="#真～Java基础" class="headerlink" title="真～Java基础"></a>真～Java基础</h1><ul><li><p>Java SE：Java Platform， Standard Edition</p><ul><li>标准版：各应用平台的基础，桌面开发和低端商务应用的解决方案</li></ul></li><li><p>Java EE：Java Platform，Enterprise Edition</p><ul><li>企业版：以企业为环境而开发应用程序的解决方案</li></ul></li><li><p>Java ME：Java Platform，Micro Edition</p><ul><li>微型版：致力于消费产品和嵌入式设备的最佳解决方案</li></ul></li></ul><h2 id="体系特点"><a href="#体系特点" class="headerlink" title="体系特点"></a>体系特点</h2><ul><li>一种纯面向对象的编程语言</li><li>一种与平台无关（跨平台）的语言<ul><li>它提供了在不同平台下运行的解释环境</li></ul></li><li>一种健壮的语言，吸收了C/C++语言的优点</li><li>有较高的安全性<ul><li>自动垃圾回收</li><li>强制类型检查</li><li>取消指针</li></ul></li></ul><h2 id="Java跨平台"><a href="#Java跨平台" class="headerlink" title="Java跨平台"></a>Java跨平台</h2><p><img src="https://img-blog.csdnimg.cn/20181216204618646.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzQxNjcxNDcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><ul><li>对于不同的运行平台，有不同的JVM（Java Virtual M×××）<ul><li>JVM屏蔽了底层运行平台的差别，实现了“ 一次编译，随处运行”</li></ul></li><li>垃圾回收（GC）<ul><li>不再使用的内存空间应当进行回收</li><li>垃圾回收在Java程序运行过程中自动启用，用于检查并释放那些可以被释放的空间</li></ul></li></ul><h2 id="程序开发的步骤"><a href="#程序开发的步骤" class="headerlink" title="程序开发的步骤"></a>程序开发的步骤</h2><ul><li>程序：是为了实现特定目标或解决特定问题而用计算机语言编写的命令序列的集合</li></ul><p><img src="https://img-blog.csdnimg.cn/20181216210837407.png" alt="在这里插入图片描述"></p><h2 id="第一个Java程序"><a href="#第一个Java程序" class="headerlink" title="第一个Java程序"></a>第一个Java程序</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> *public：共有的</span></span><br><span class="line"><span class="comment"> *class：类</span></span><br><span class="line"><span class="comment"> *Hello：类名</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hello</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">        <span class="comment">// static 静态关键字</span></span><br><span class="line">        <span class="comment">// main 主函数，程序入口方法</span></span><br><span class="line">        <span class="comment">// void 没有返回值</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码格式："><a href="#代码格式：" class="headerlink" title="代码格式："></a>代码格式：</h3><ul><li>java 代码的位置</li><li>java 严格区分大小写</li><li>java 是一种自由格式的语言</li><li>代码分为结构定义语句和功能执行语句</li><li>功能执行语句的最后必须用分号结束</li></ul><h2 id="Java基本语法"><a href="#Java基本语法" class="headerlink" title="Java基本语法"></a>Java基本语法</h2><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><ul><li><code>变量</code>就是系统为程序分配的一块内存单元，用来存储各种类型的数据</li><li>根据所存储的数据类型的不同，有各种不同类型的变量</li><li>变量名代表这块内存中的数据</li></ul><h4 id="变量的分类"><a href="#变量的分类" class="headerlink" title="变量的分类"></a>变量的分类</h4><ul><li>变量的分类：<ol><li>按所属的数据类型划分<ol><li>基本数据类型</li><li>引用数据类型</li></ol></li><li>按被声明的位置划分<ol><li>局部变量：方法或语句块内部定义的变量</li><li>成员变量：方法外部，类的内部定义的变量</li></ol></li></ol></li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><table><thead><tr><th style="text-align:center">数据类型</th><th style="text-align:center">关键字</th><th style="text-align:center">占用字节</th><th style="text-align:center">取值范围</th><th style="text-align:center">默认值</th></tr></thead><tbody><tr><td style="text-align:center">布尔型</td><td style="text-align:center">boolean</td><td style="text-align:center">1</td><td style="text-align:center">true、false</td><td style="text-align:center">false</td></tr><tr><td style="text-align:center">字节型</td><td style="text-align:center">byte</td><td style="text-align:center">1</td><td style="text-align:center">-128～127</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">短整型</td><td style="text-align:center">short</td><td style="text-align:center">2</td><td style="text-align:center">-2^15～2^15-1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">整型</td><td style="text-align:center">int</td><td style="text-align:center">4</td><td style="text-align:center">-2^31～2^31-1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">长整形</td><td style="text-align:center">long</td><td style="text-align:center">8</td><td style="text-align:center">-2^63～2^63-1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">字符型</td><td style="text-align:center">char</td><td style="text-align:center">2</td><td style="text-align:center">0～2^16-1</td><td style="text-align:center">‘\u0000’</td></tr><tr><td style="text-align:center">单精度浮点型</td><td style="text-align:center">float</td><td style="text-align:center">4</td><td style="text-align:center">1.4013E-45～3.4028E+38</td><td style="text-align:center">0.0F</td></tr><tr><td style="text-align:center">双精度浮点型</td><td style="text-align:center">double</td><td style="text-align:center">8</td><td style="text-align:center">4.9E-324～1.7977E+308</td><td style="text-align:center">0.0F</td></tr></tbody></table><h3 id="基本数据类型转换"><a href="#基本数据类型转换" class="headerlink" title="基本数据类型转换"></a>基本数据类型转换</h3><ul><li>自动类型转换：<ul><li>容量下的类型自动转换成容量大的数据类型</li><li>byte,short,int-&gt;float-&gt;long-&gt;double</li><li>byte,short,int不会相互转换，他们三者在计算时会转换成int类型</li></ul></li><li>强制类型转换：<ul><li>容量大的类型转换成容量小的数据类型时，要加上强制转换符</li><li>long n = 100L;</li><li>int i = (int)n;</li></ul></li><li><code>boolean 类型不能转换成任何其他数据类型</code></li></ul><h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><table><thead><tr><th style="text-align:center">abstract</th><th style="text-align:center">assert</th><th style="text-align:center">boolean</th><th style="text-align:center">break</th><th style="text-align:center">byte</th></tr></thead><tbody><tr><td style="text-align:center">case</td><td style="text-align:center">catch</td><td style="text-align:center">char</td><td style="text-align:center">class</td><td style="text-align:center">const</td></tr><tr><td style="text-align:center">continue</td><td style="text-align:center">default</td><td style="text-align:center">do</td><td style="text-align:center">double</td><td style="text-align:center">else</td></tr><tr><td style="text-align:center">enum</td><td style="text-align:center">extends</td><td style="text-align:center">final</td><td style="text-align:center">finally</td><td style="text-align:center">float</td></tr><tr><td style="text-align:center">for</td><td style="text-align:center">goto</td><td style="text-align:center">if</td><td style="text-align:center">implement</td><td style="text-align:center">import</td></tr><tr><td style="text-align:center">instanceof</td><td style="text-align:center">int</td><td style="text-align:center">interface</td><td style="text-align:center">long</td><td style="text-align:center">native</td></tr><tr><td style="text-align:center">new</td><td style="text-align:center">package</td><td style="text-align:center">private</td><td style="text-align:center">protected</td><td style="text-align:center">public</td></tr><tr><td style="text-align:center">return</td><td style="text-align:center">strictfp</td><td style="text-align:center">short</td><td style="text-align:center">static</td><td style="text-align:center">super</td></tr><tr><td style="text-align:center">switch</td><td style="text-align:center">synchronized</td><td style="text-align:center">this</td><td style="text-align:center">throw</td><td style="text-align:center">throws</td></tr><tr><td style="text-align:center">transient</td><td style="text-align:center">try</td><td style="text-align:center">void</td><td style="text-align:center">volatile</td><td style="text-align:center">while</td></tr></tbody></table><p><strong>键盘输入：Scanner input = new Scanner(System.in)</strong></p><h1 id="Java面向对象编程"><a href="#Java面向对象编程" class="headerlink" title="Java面向对象编程"></a>Java面向对象编程</h1><h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="类与对象的关系"><a href="#类与对象的关系" class="headerlink" title="类与对象的关系"></a>类与对象的关系</h3><ol><li>类表示一个共性的产物，是一个综合的特征，而对象是一个个性的产物，是一个个性的特征</li><li>类由属性和方法组成<ul><li>属性：相当于特征，人的名字等</li><li>方法：相当于行为，人会吃饭等</li></ul></li></ol><h3 id="定义一个类"><a href="#定义一个类" class="headerlink" title="定义一个类"></a>定义一个类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名称</span>&#123;</span><br><span class="line">    属性名称;</span><br><span class="line">    返回值类型 方法名（）&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>类的定义<ul><li>一个类要想真正的进行操作，则必须依靠对象，对象的定义格式如下</li><li>类名称 变量名 = new 类名称();</li></ul></li></ul><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><ol><li>封装性是面向对象思想的三大特征之一</li><li>封装性就是隐藏实现细节，仅对外提供访问接口</li><li>封装有<ul><li>属性封装</li><li>方法封装</li><li>类的封装</li><li>组件封装</li><li>模块化封装</li></ul></li></ol><h4 id="封装的好处"><a href="#封装的好处" class="headerlink" title="封装的好处"></a>封装的好处</h4><ol><li>模块化</li><li>信息隐藏</li><li>代码重用</li><li>插件化易于调试</li><li>具有安全性</li></ol><h4 id="如何封装"><a href="#如何封装" class="headerlink" title="如何封装"></a>如何封装</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>通过使用方法来获取和设置类的属性，而不是让直接操作属性值</strong></p><p><strong>在set方法中，我们还可以格式化传入的参数，改变其为我们想要的类型</strong></p><h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul><li><p>什么是构造方法？</p><ul><li>构造方法就是类构造对象时调用的方法，用于对象的初始化工作</li><li>构造方法是实例化一个类的对象时，也即是new的时候，最先调用的方法</li></ul></li><li><p>构造方法的定义</p><ul><li>构造方法是在类中定义的，构造方法的定义格式：方法名与类名相同，无返回参数类型</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String Name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">// 无参构造函数</span></span><br><span class="line">    Dog()&#123;</span><br><span class="line">        <span class="keyword">this</span>(Name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 带参构造函数</span></span><br><span class="line">    Dog(String Name, <span class="keyword">int</span> age)&#123;</span><br><span class="line">        <span class="keyword">this</span>.setName(Name);</span><br><span class="line">        <span class="keyword">this</span>.setage(age);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.Name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.Name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h4><ol><li>每个类默认会有一个无参构造函数</li><li>方法名与类名相同，无返回值</li><li>构造方法可以用来初始化属性</li><li>如果类中又带参的构造方法，那么需要默认的无参构造方法时必须显示的写出来</li><li>在构造方法中调用其他的构造方法使用 this(参数) 而且必须在第一句</li></ol><h3 id="值传递与引用传递"><a href="#值传递与引用传递" class="headerlink" title="值传递与引用传递"></a>值传递与引用传递</h3><ul><li>实例一，值传递</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValueDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] agrs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> x=<span class="number">10</span>;</span><br><span class="line">        method(x);</span><br><span class="line">        System.out.println(<span class="string">"x="</span> + x);</span><br><span class="line">        <span class="comment">// 最后 x 等于 10</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(<span class="keyword">int</span> mx)</span></span>&#123;</span><br><span class="line">        mx  = <span class="number">20</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>实例二，引用传递</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RefDemo1</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Weapon w = <span class="keyword">new</span> Weapon();</span><br><span class="line">        method(w);</span><br><span class="line">        System.out.println(<span class="string">"weapon age = "</span> + w.age);</span><br><span class="line">        <span class="comment">// 最后 w.age 等于 </span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Weapon w)</span></span>&#123;</span><br><span class="line">        w.age = <span class="number">5l</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">2</span>;<span class="comment">// </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果是自定义的类，那么绝对是引用传递；如果是java自己封装的类，大多是值传递</strong></p><p><strong>正确的解释是，如果值在 栈 中，那么是值传递；如果值 在 堆中，那么是引用传递</strong></p><h3 id="static-关键字"><a href="#static-关键字" class="headerlink" title="static 关键字"></a>static 关键字</h3><ul><li>static关键字的作用：<ul><li>使用static关键字修饰一个属性<ul><li>声明为static的变量实质上就是一个全局变量</li></ul></li><li>使用static关键字修饰的一个方法<ul><li>通常是 无需实例化对象就可以调用的方法 类名().方法名()</li></ul></li><li>使用static关键字修饰一个类<ul><li>普通类不能定义为static，内部类可以</li></ul></li></ul></li></ul><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><ol><li>静态变量或方法属于类，而不是对象</li><li>所以调用静态变量或方法时直接使用类名调用，而不要用对象调用</li><li>静态变量在内存中只会保存一份，由这个类的所有对象共享</li><li>静态数据（变量和方法）在第一次使用时即载入内存，知道程序退出</li><li>静态方法不能调用非静态属性，反之可以使用（因为静态方法先于非静态属性，方法）</li></ol><h4 id="注意-1"><a href="#注意-1" class="headerlink" title="注意"></a>注意</h4><ul><li>声明为static的方法有以下几个限制<ul><li>他们仅能调用其他的static方法</li><li>他们只能访问static数据</li><li>他们不能以任何方式引用this或super</li></ul></li></ul><p><img src="https://img-blog.csdnimg.cn/20181217002007661.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2JhaWR1XzQxNjcxNDcy,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h1 id="JDBC编程"><a href="#JDBC编程" class="headerlink" title="JDBC编程"></a>JDBC编程</h1><p>目前市面上数据库管理系统已经非常多，mysql，Oracle，SQLserver等等<br>在ODBC出现之前，对这些数据库的访问是一件非常麻烦的事情，因为这些数据库虽然都支持sql，但他们针对自己数据库的访问方法，所以当用户访问不同个的数据库时，就必须使用不同API来编写相应的数据库访问程序</p><ul><li>ODBC（Open Database Connectivity）<br>通过ODBC访问不同的数据库，无需对数据库访问程序进行修改，这样ODBC的应用越来越广泛</li><li>JDBC（java data base connectivity）<br>按照ODBC的模式来制定的，它是一个通用的底层的支持sql功能的Java API</li></ul><h2 id="JDBC的组成"><a href="#JDBC的组成" class="headerlink" title="JDBC的组成"></a>JDBC的组成</h2><p>JDBC提供了两种接口</p><ol><li>JDBC API<ul><li>面向开发人员的API</li></ul></li><li>JDBC Driver API<ul><li>面向底层驱动程序开发商的API</li></ul></li></ol><h3 id="JDBC-API"><a href="#JDBC-API" class="headerlink" title="JDBC API"></a>JDBC API</h3><p> JDBC API 是一系列的应用编程接口，可以用来进行数据库连接，访问数据等</p><p> <code>JDBC API</code>的主要编程接口：</p><ol><li>DriverManager</li></ol><ul><li>驱动程序管理类</li><li>用来装载驱动程序，并为创建数据库链接提供支持</li></ul><ol><li>Connection</li></ol><ul><li>是一个接口</li><li>用来连接某一个指定的数据库</li></ul><ol><li>Statement</li></ol><ul><li>是一个接口</li><li>提供了执行SQL语句，获取查询结果的方法</li></ul><ol><li>PreparedStatement</li></ol><ul><li>用于执行预编译的SQL语句</li></ul><ol><li>ResultSet</li></ol><ul><li>提供了对接口集进行处理的方法</li></ul><h3 id="JDBC-Driver-API"><a href="#JDBC-Driver-API" class="headerlink" title="JDBC Driver API"></a>JDBC Driver API</h3><p>主要有四种类型</p><ol><li>JDBC-ODBC bridge<ul><li>通过将JDBC的调用全部委托给其他编程接口来实现    </li></ul></li><li>部分java技术的本地API驱动程序<ul><li>驱动程序部分实现通过JAVA语言</li><li>其他的部分则委托给本地的数据库的客户段代码来实现</li></ul></li><li>全部基于java技术的本地API程序<ul><li>这种驱动程序的实现全部通过Java语言</li><li>通常由某个中间件服务器提供</li><li>客户端程序可以使用数据库无关的协议和中间件服务器进行通信</li><li>中间件服务器再讲客户端的调用转发给服务器进行处理</li></ul></li><li>全部基于java技术的本地协议驱动程序<ul><li>全部基于java语言</li><li>包含了特定数据库的访问协议，使得客户端可以直接同服务器进行通信</li></ul></li></ol><h2 id="使用JDBC进行增删改"><a href="#使用JDBC进行增删改" class="headerlink" title="使用JDBC进行增删改"></a>使用JDBC进行增删改</h2><h3 id="首先建表"><a href="#首先建表" class="headerlink" title="首先建表"></a>首先建表</h3><ul><li>修改Mysql-WorkBench快捷键<ul><li>自动补全 ctrl+space<ul><li>但是和Ubuntu的输入法切换冲突</li><li>修改/usr/share/mysql-workbench/data/main_menu.xml文件</li><li>modifier + Space 就是 Ctrl+space的意思，修改为不冲突的快捷键例如F2</li><li>或者 直接 菜单栏 edit-&gt;auto complete 启动自动补全</li></ul></li></ul></li><li>创建用户表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">use jsp_db;</span><br><span class="line">create table tbl_user(</span><br><span class="line">  id int(11) unsigned not null auto_increment,</span><br><span class="line">  name varchar(50) not null default &apos;&apos;,</span><br><span class="line">  password varchar(50) not null default &apos;&apos;,</span><br><span class="line">  email varchar(50) default &apos;&apos;,</span><br><span class="line">  primary key(id)</span><br><span class="line">  )engine=InnoDB default charset=utf8;</span><br></pre></td></tr></table></figure><ul><li>创建地址表</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE tbl_address (</span><br><span class="line">  id INT(11) UNSIGNED not null auto_increment,</span><br><span class="line">  city varchar(20) default null,</span><br><span class="line">  country varchar(20) default null,</span><br><span class="line">  user_id int(11) unsigned not null,</span><br><span class="line">  primary key(id)</span><br><span class="line">) engine=InnoDB default charset = utf8;</span><br></pre></td></tr></table></figure><ul><li>表中插入记录</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">insert into tbl_user(id,name,password,email)</span><br><span class="line">values</span><br><span class="line">(1, &apos;xiaoming&apos;, &apos;123456&apos;,&apos;xiaoming@qq.com&apos;),</span><br><span class="line">(2, &apos;xiaozhang&apos;, &apos;123456&apos;, &apos;xiaozhang@qq.com&apos;);</span><br><span class="line"></span><br><span class="line">insert into tbl_address(city, country, user_id)</span><br><span class="line">values</span><br><span class="line">(&apos;beijing&apos;, &apos;china&apos;, 1),</span><br><span class="line">(&apos;tianjin&apos;, &apos;china&apos;, 2);</span><br></pre></td></tr></table></figure><h3 id="查询初体验"><a href="#查询初体验" class="headerlink" title="查询初体验"></a>查询初体验</h3><ul><li>JDBC执行流程</li></ul><p><img src="https://i.imgur.com/4GC8UgG.png" alt=""></p><ul><li>Eclise中<ul><li>Alt+ ‘/‘ 可以进行生成函数</li></ul></li><li>数据库查询</li></ul><p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">package com.JDBC.Test;</span><br><span class="line"></span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.ResultSet;</span><br><span class="line">import java.sql.Statement;</span><br><span class="line"></span><br><span class="line">import com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line">public class JDBCTest &#123;</span><br><span class="line">​public static void main(String[] args) &#123;</span><br><span class="line">​String sql = &quot;select * from tbl_user&quot;;</span><br><span class="line">​Connection connection = null;</span><br><span class="line">​Statement statement = null;</span><br><span class="line">​ResultSet resultSet = null;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><pre><code>try {    // 用于注册Mysql JDBC的驱动程序    // forName 方法用于初始化参数指定的类，并创建一个对应的实例对象    Class.forName(&quot;com.mysql.jdbc.Driver&quot;);    // 这里url 指定了 数据库的 地址 端口 以及具体访问的库名    String url = &quot;jdbc:mysql://localhost:3306/jsp_db&quot;;    String user = &quot;root&quot;;    String password = &quot;root&quot;;    // 获取Mysql 数据库的连接 这里使用的是 DriverManage 的 getConnection 方法    connection = DriverManager.getConnection(url, user, password);    // 创建一个Statement对象    statement = connection.createStatement();    // 使用Statement对象的executeQuery方法来发送Sql语句    // executeQuery 方法返回一个 ResultSet对象    resultSet = statement.executeQuery(sql);    // 遍历ResultSet对象    while (resultSet.next()) {        System.out.println(resultSet.getInt(&quot;id&quot;));        System.out.println(resultSet.getString(&quot;name&quot;));        System.out.println(resultSet.getString(&quot;password&quot;));        System.out.println(resultSet.getString(&quot;email&quot;));    }} catch (Exception e) {    // TODO: handle exception    e.printStackTrace();} finally {    try {        // 关闭ResultSet对象的结果集        resultSet.close();    } catch (Exception e2) {    }    try {        // 关闭Statement对象        statement.close();    } catch (Exception e2) {    }    try {        // 关闭数据库连接        connection.close();    } catch (Exception e2) {    }}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><h3 id="增删改查"><a href="#增删改查" class="headerlink" title="增删改查"></a>增删改查</h3><ul><li>首先写一个Connection的函数，这样执行就不用每次都写 那几条固定语句</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public static Connection getConnection() &#123;</span><br><span class="line">Connection conn = null;</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(&quot;com.mysql.jdbc.Driver&quot;);</span><br><span class="line">// 这里url 制定了 访问数据库的 地址 端口 以及 具体 库的名字</span><br><span class="line">String url = &quot;jdbc:mysql://localhost:3306/jsp_db&quot;;</span><br><span class="line">String user = &quot;root&quot;;</span><br><span class="line">String password = &quot;root&quot;;</span><br><span class="line">// 获取Mysql 数据库的连接 这里使用的是 DriverManage 的 getConnection 方法</span><br><span class="line">conn = DriverManager.getConnection(url, user, password);</span><br><span class="line"></span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">&#125;</span><br><span class="line">return conn;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>然后就是增删改的函数了</code></li><li>增</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">public static void insert() &#123;</span><br><span class="line">Connection conn = getConnection();</span><br><span class="line">try &#123;</span><br><span class="line">// 存储sql语句，用来向用户表中插入记录</span><br><span class="line">String sql = &quot;insert into tbl_user(name,password,email)&quot; </span><br><span class="line">+ &quot;values&quot; </span><br><span class="line">+&quot;(&apos;Tom&apos;, &apos;123456&apos;,&apos;Tom@qq.com&apos;),(&apos;Anny&apos;, &apos;123456&apos;, &apos;Anny@qq.com&apos;)&quot;;</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line">// Statement中的executeUpdate方法，可以执行DML语句，包括insert update 以及 delete</span><br><span class="line">// 也可以执行没有返回结果的语句 例如：DDL语句 </span><br><span class="line">// 参数是一个字符串形式的sql语句，如果执行的是DML语句，那么返回影响的记录条数，如果是DDL语句则返回0</span><br><span class="line">// 会抛出sqlExcuption 以及 sqlTimeOut 的异常</span><br><span class="line">int count = st.executeUpdate(sql);</span><br><span class="line">System.out.println(&quot;向表中插入了&quot; + count + &quot;条语句&quot;);</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>改</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void update() &#123;</span><br><span class="line">Connection conn = getConnection();</span><br><span class="line">try &#123;</span><br><span class="line">// 存储sql语句，用来向用户表中插入记录</span><br><span class="line">String sql = &quot;update tbl_user set email=&apos;Tomm@163.com&apos; where name = &apos;Tom&apos;&quot;;</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line">// Statement中的executeUpdate方法，可以执行DML语句，包括insert update 以及 delete</span><br><span class="line">// 也可以执行没有返回结果的语句 例如：DDL语句 </span><br><span class="line">// 参数是一个字符串形式的sql语句，如果执行的是DML语句，那么返回影响的记录条数，如果是DDL语句则返回0</span><br><span class="line">// 会抛出sqlExcuption 以及 sqlTimeOut 的异常</span><br><span class="line">int count = st.executeUpdate(sql);</span><br><span class="line">System.out.println(&quot;向表中更新了&quot; + count + &quot;条语句&quot;);</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>删</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">public static void delete_db() &#123;</span><br><span class="line">Connection conn = getConnection();</span><br><span class="line">try &#123;</span><br><span class="line">// 存储sql语句，用来向用户表中插入记录</span><br><span class="line">String sql = &quot;delete from tbl_user where name=&apos;Tom&apos;&quot;;</span><br><span class="line">Statement st = conn.createStatement();</span><br><span class="line">// Statement中的executeUpdate方法，可以执行DML语句，包括insert update 以及 delete</span><br><span class="line">// 也可以执行没有返回结果的语句 例如：DDL语句 </span><br><span class="line">// 参数是一个字符串形式的sql语句，如果执行的是DML语句，那么返回影响的记录条数，如果是DDL语句则返回0</span><br><span class="line">// 会抛出sqlExcuption 以及 sqlTimeOut 的异常</span><br><span class="line">int count = st.executeUpdate(sql);</span><br><span class="line">System.out.println(&quot;向表中删除了&quot; + count + &quot;条语句&quot;);</span><br><span class="line">conn.close();</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">// TODO: handle exception</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>之后只需要在 main 函数中 调用inset 等 方法就 能插入 修改 删除了</li><li>需要注意的是，不要把sql语句写错</li><li>执行之后，控制台会输出修改的语句的个数</li><li>main方法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">public static void main(String[] args) &#123;</span><br><span class="line">//insert();</span><br><span class="line">//update();</span><br><span class="line">delete_db();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JDBC事务处理"><a href="#JDBC事务处理" class="headerlink" title="JDBC事务处理"></a>JDBC事务处理</h2><p>数据库是一个多用户使用的共享资源<br>当多个用户使用数据库存取资源的时候，就会产生不同用户存取同一数据的情况<br>因此需要控制并发</p><ul><li>原子性<ul><li>事务中包含的操作都被看做是一个逻辑单元</li><li>这个逻辑单元的操作 要么全部成功 要么全部失败</li><li>事务中所有元素作为一个整体，提交或回滚</li><li>事务的所有元素是不可分割的，是一个完整的操作</li></ul></li><li>一致性<ul><li>事务开始之前和事务结束以后，数据库都处于一致性状态</li><li>数据库的完整性约束，没有被破坏</li></ul></li><li>隔离性<ul><li>对数据库进行修改的多个事务，是彼此隔离的</li><li>事务必须是独立的，不应该以任何形式影响其他事务</li></ul></li><li>持久性<ul><li>事务完成之后，对于系统的影响是永久的</li><li>该修改真实的修改了数据库，即使系统出现故障也会一直保留</li></ul></li></ul><h3 id="事务语句"><a href="#事务语句" class="headerlink" title="事务语句"></a>事务语句</h3><ul><li>开始事务<ul><li>Begin transaction</li></ul></li><li>提交事务<ul><li>Commit transaction</li></ul></li><li>回滚事务<ul><li>Rollback transaction</li></ul></li></ul><p>举个例子：<br>​    我们有 user 和 address 表<br>​    在 address 表中 插入 Tom 的地址信息<br>​    在 user 表中 插入 id 为 1 的 Tom的个人信息</p><ul><li>不难发现，由于user表中原来就有id 为 1 的信息，所以user表插入失败</li><li>但是，address 表却可以插入，因为没有主键冲突</li><li>这就是 <code>完整性 缺失</code></li></ul><h3 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h3><p>​<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">public class TransAction &#123;</span><br></pre></td></tr></table></figure></p><p>public static Connection getConnection() {<br>    Connection conn = null;<br>    try {<br>        Class.forName(“com.mysql.jdbc.Driver”);<br>        String url = “jdbc:mysql://localhost:3306/jsp_db”;<br>        String user = “root”;<br>        String password = “root”;<br>        conn = DriverManager.getConnection(url, user, password);</p><pre><code>} catch (Exception e) {}return conn;</code></pre><p>}<br>// 使用 throws SQLException 来捕获异常，因为如果数据插入失败的时候会抛出异常<br>// 通过 这种方法 将异常传递给 上层函数 通过上层函数捕捉异常 进行回滚<br>public static void insertUser(Connection conn) throws SQLException {<br>    String sql = “insert into tbl_user(name,password,email)” </p><pre><code>        + &quot;values&quot;         +&quot;(&apos;Tom&apos;, &apos;123456&apos;,&apos;Tom@qq.com&apos;),(&apos;Anny&apos;, &apos;123456&apos;, &apos;Anny@qq.com&apos;)&quot;;Statement st = conn.createStatement();int count = st.executeUpdate(sql);System.out.println(&quot;向表中插入了&quot; + count + &quot;条语句&quot;);</code></pre><p>}</p><p>public static void insertAddress(Connection conn) throws SQLException {<br>    String sql = “insert into tbl_address(id,city,country)” </p><pre><code>        + &quot;values&quot;         +&quot;(1, &apos;beijing&apos;,&apos;china&apos;),(2, &apos;tianjing&apos;, &apos;china&apos;)&quot;;Statement st = conn.createStatement();int count = st.executeUpdate(sql);System.out.println(&quot;向表中插入了&quot; + count + &quot;条语句&quot;);</code></pre><p>}</p><p>public static void main(String[] args) {<br>    Connection conn = null;<br>    try {<br>        conn = getConnection();<br>        //关闭自动提交<br>        conn.setAutoCommit(false);<br>        insertAddress(conn);<br>        insertUser(conn);</p><pre><code>    conn.commit();} catch (SQLException e) {    System.out.println(&quot;=====偶哟，捕获到SQL异常了呢====&quot;);    e.printStackTrace();    try {        // 如果捕获到异常 那么说明数据插入失败，则要回滚到插入之前的状态        // 避免出现，部分插入，部分没插入 所导致的 完整性缺失问题        System.out.println(&quot;====现在开始数据回滚呢，请等会哦====&quot;);        conn.rollback();        System.out.println(&quot;====回滚成功呢，请再看看是哪里的代码有问题呢====&quot;);    } catch (Exception e2) {        e2.printStackTrace();    }} finally {    try {        // 如果 conn 连接 不为空的时候，最后要关闭连接        if (conn != null) {            conn.close();        }    } catch (Exception e3) {        e3.printStackTrace();    }}</code></pre><p>}<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">​</span><br></pre></td></tr></table></figure></p><h2 id="JDBC-优化"><a href="#JDBC-优化" class="headerlink" title="JDBC 优化"></a>JDBC 优化</h2><p>前面的写法都是直接将 数据库链接，用户名，密码等直接内嵌到代码中<br>但是这样的写法其实重用性特别差，一旦修改了密码那么所有的文件都需要修改</p><p>这个时候最好的方法就是写一个 <code>配置文件</code>，然后所有的数据链接都用这个配置文件<br>这里 默认 <code>配置文件</code>的后缀是 <code>.properties</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">driver=com.mysql.jdbc.Driver</span><br><span class="line">dburl=jdbc\:mysql\://localhost\:3306/jsp_db</span><br><span class="line">user=root</span><br><span class="line">password=root</span><br></pre></td></tr></table></figure><p>直接写上面的内容就行了 不需要上面花里胡哨的<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">​package com.JDBC.Test;</span><br><span class="line">​</span><br><span class="line">import java.io.InputStream;</span><br><span class="line">import java.sql.Connection;</span><br><span class="line">import java.sql.DriverManager;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">import com.mysql.jdbc.Driver;</span><br><span class="line"></span><br><span class="line">public class DataConnectFactory &#123;</span><br><span class="line">private static String driver;</span><br><span class="line">private static String dburl;</span><br><span class="line">private static String user;</span><br><span class="line">private static String password;</span><br><span class="line">private static final DataConnectFactory factory = new DataConnectFactory();</span><br><span class="line">private Connection connection;</span><br><span class="line">static &#123;</span><br><span class="line">Properties prop = new Properties();</span><br><span class="line">try &#123;</span><br><span class="line">InputStream in = DataConnectFactory.class.getResourceAsStream(&quot;dbconfig.properties&quot;);</span><br><span class="line">prop.load(in);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">System.out.println(&quot;==配置问价出错了呢==&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">driver = prop.getProperty(driver);</span><br><span class="line">dburl = prop.getProperty(dburl);</span><br><span class="line">password = prop.getProperty(password);</span><br><span class="line">user = prop.getProperty(user); </span><br><span class="line">&#125;</span><br><span class="line">//定义默认构造函数</span><br><span class="line">private DataConnectFactory()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">// 单例模式</span><br><span class="line">public static DataConnectFactory getInstance() &#123;</span><br><span class="line">return factory;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Connection makeConnection() &#123;</span><br><span class="line">try &#123;</span><br><span class="line">Class.forName(driver);</span><br><span class="line">connection = DriverManager.getConnection(dburl, user, password);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">return connection;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里使用了静态代码块</p><h1 id="Java-上传下载-文件"><a href="#Java-上传下载-文件" class="headerlink" title="Java 上传下载 文件"></a>Java 上传下载 文件</h1><h2 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h2><ul><li>文件上传的作用<ul><li>上传照片</li><li>上传文档</li><li>上传简历</li><li>……</li></ul></li><li>文件上传对页面的要求<ul><li>必须使用表单，而不是超链接</li><li>表单的method 必须是 POST，而不能是GET</li><li>表单的enctype 必须是 multipart/form-data;</li><li>在表单中添加file表单字段，即&lt;input typt=”file” name=”file” …/&gt;</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"..."</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">enctype</span>=<span class="string">"multipart/form-data"</span>&gt;</span></span><br><span class="line">用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line">    照  片：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"picture"</span> /&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上传对Servlet限制<ul><li>request.getParametere(“”)在表单为 enctype=”multipart/form-data”时作废，返回null<ul><li><code>整个表单都不能用</code></li></ul></li><li>调用 request.getInputStream(); 方法，返回 ServletInputStream，返回数据包含整个请求的体</li></ul></li><li>多部件表单的体<ul><li>每个分开的多个部件，即一个表单项一个部件</li><li>一个部件中有自己的请求头和空行，还有请求提</li><li>普通表单项：<ul><li>一个头：Content-Disposition：包含name=”xxx”，即表达项名称</li><li>一个体：表单项的值</li></ul></li><li>文件表单项：<ul><li>两个头：<ul><li>Content-Disposition：包含name=”xxx”，表单项名称，还有一个filename，即上传文件的名称</li><li>Content-Type：它是上传文件的MIME类型，例如：image/pjpeg，…..</li></ul></li></ul></li></ul></li></ul><h3 id="Servlet写法"><a href="#Servlet写法" class="headerlink" title="Servlet写法"></a>Servlet写法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"></span><br><span class="line">request.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">ServletInputStream in = request.getInputStream();</span><br><span class="line">String s = IOUtils.toString(in);</span><br><span class="line">System.out.println(s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里的 IOUtils 是 commons-io.jar 包，你需要手动导入到路径中<ul><li><code>这里的jar包，一定要放到lib 文件夹中，否则无效，我也不知道为啥</code></li></ul></li><li>使用 commons-fileupload.jar 和 commons-io.jar 工具包<ul><li>帮我们解析 request 中上传的数据</li><li>解析后的结果是一个表单项数据，封装到一个FileItem对象中</li><li>调用FileItem的方法即可获取数据</li></ul></li></ul><h3 id="上传三步"><a href="#上传三步" class="headerlink" title="上传三步"></a>上传三步</h3><ul><li>相关类<ol><li>工厂：DiskFileItemFactory    </li><li>解析器：ServletFileUpload</li><li>表单项：FileItem</li></ol></li><li>创建工厂<ul><li>DiskFileItemFactory factory = new DiskFileItemFactory();</li></ul></li><li>创建解析器<ul><li>ServletFileUpload sfu = new ServletFileUpload(factory);</li></ul></li><li>使用解析器来解析request，得到FileItem集合<ul><li>List&lt;FileItem&gt; fileItemList = sfu.parseRequest(request);</li></ul></li><li>FileItem 的 API<ul><li>boolean isFormField() 是否为普通表单项<ul><li>true 为普通表单项</li><li>false 文件表单项</li></ul></li><li>String getFileName()  返回当前表单项的名称</li><li>String getString(String charset) 返回表单项的值（不适用于文件表单项）</li><li>String getName() 返回上传的文件名称</li><li>long getSize() 返回上传文件的字节数</li><li>InputStream getInputStream() 返回对应文件的输入流</li><li>void write(File destFile) 将上传的文件内容保存到指定的文件中<ul><li>如果文件存在，则替换文件</li><li>如果文件不存在，则创建文件</li></ul></li></ul></li><li>Servlet文件，注意<code>这里导入的是 org.apache.commons.fileupload 包，并且io包和fileupload 包一定要放到WEB-INF 的lib中</code></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> up;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.*;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.disk.DiskFileItemFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.fileupload.servlet.ServletFileUpload;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class upPic</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/upPic"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">upPic</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">upPic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">System.out.println(<span class="string">"get"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *上传三步</span></span><br><span class="line"><span class="comment"> *1. 得到工厂</span></span><br><span class="line"><span class="comment"> *2. 通过工厂创建解析器</span></span><br><span class="line"><span class="comment"> *3. 解析request，得到FileItem集合</span></span><br><span class="line"><span class="comment"> *4. 遍历FileItem集合，调用其API </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">DiskFileItemFactory factory = <span class="keyword">new</span> DiskFileItemFactory();</span><br><span class="line">ServletFileUpload sfu = <span class="keyword">new</span> ServletFileUpload(factory);</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;FileItem&gt; fileItems = sfu.parseRequest(request);</span><br><span class="line"><span class="comment">// 我们这里明确知道只有两个表单项，所有就不便利数组了</span></span><br><span class="line"><span class="comment">//FileItem fil1 = fileItems.get(0);// 普通表单项</span></span><br><span class="line">FileItem fil2 = fileItems.get(<span class="number">1</span>);<span class="comment">// 上传的图片表单项</span></span><br><span class="line">System.out.println(<span class="string">"Content-Type : "</span> + fil2.getContentType());</span><br><span class="line">System.out.println(<span class="string">"size : "</span> + fil2.getSize());</span><br><span class="line">System.out.println(<span class="string">"filename : "</span> + fil2.getName());</span><br><span class="line">File picture = <span class="keyword">new</span> File(<span class="string">"/home/cong/picture.jpg"</span>);</span><br><span class="line">fil2.write(picture);</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> handle exception</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jsp文件</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">"java"</span> contentType=<span class="string">"text/html; charset=UTF-8"</span></span><br><span class="line">    pageEncoding=<span class="string">"UTF-8"</span>%&gt;</span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">&lt;title&gt;Insert title here&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;form action=<span class="string">"upPic"</span> method=<span class="string">"post"</span> enctype=<span class="string">"multipart/form-data"</span>&gt;</span><br><span class="line">用户名：&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> /&gt;</span><br><span class="line">    照  片：&lt;input type=<span class="string">"file"</span> name=<span class="string">"picture"</span> /&gt;</span><br><span class="line">   &lt;input type=<span class="string">"submit"</span> value=<span class="string">"提交"</span> /&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="上传的细节"><a href="#上传的细节" class="headerlink" title="上传的细节"></a>上传的细节</h3><ul><li>把上传的文件放到<code>WEB-INF</code>目录下<ul><li>如果没有把用户的文件存放到WEB-INF目录下，那么用户可以通过浏览器直接访问上传的文件，这个是非常危险的<ul><li>加入用户上传了一个a.jsp文件，再通过浏览器链接访问a.jsp，那么就会执行a.jsp，而如果jsp文件中有”shutdown -h now”，那么后果嘛</li></ul></li><li>通常我们会在WEB-INF目录下创建一个uploads目录，来存放上传的文件，而在Servlet中找到这个目录需要使用ServletContext 的 getRealPath(String) 方法<ul><li>ServletContext servletContext = this.getServletContext();</li><li>String savepath = servletContext.getRealPaht(“/WEB-INF/uploads”);</li></ul></li></ul></li><li>文件名称相关问题<ul><li>有点浏览器上传的文件名是绝对路径，这需要切割</li><li>乱码问题，文件名乱码<ul><li>request.serCharacterEncoding(“utf-8”)</li></ul></li><li>上传文件同名问题</li><li>目录打散问题<ul><li>一个目录不能存放过多文件</li><li>一般一个目录存放1000个文件就是上限</li><li>如果文件太多就会导致打开卡顿</li><li>打散方法很多：<ol><li>按 日期 生成 文件夹</li><li>按 首字母 分 文件夹</li></ol></li></ul></li><li>上传的单个文件的大小限制<ul><li>ServletFileUpload类的setFileSizeMax(long)就可以了</li><li>参数是上传文件的上限字节数</li><li>一旦文件超过上限就会抛出FileUploadBase.FileSizeLimitExceededException异常</li></ul></li><li>缓存大小与临时目录</li></ul></li></ul><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><ul><li>下载就是向客户端响应字节数据<ul><li>原来响应的都是HTML字符数据</li><li>现在响应字节数据</li><li>把一个文件变成字节数组，使用response的流(outputstream)响应给浏览器</li></ul></li><li>下载的要求<ul><li>两个头，一个流<ul><li>头：响应头</li><li>流：字节流</li></ul></li><li>头1：Content-Type：<ul><li>你传递给客户端的文件是什么MIME类型</li><li>例如：image/pipeg</li></ul></li><li>头2：Content-Disposition：<ul><li>一般来说，如果不设置头，那么默认不弹出下载框</li><li>默认值为：inline，在浏览器窗口中打开，打不开就弹窗</li><li>修改为   “attachment;filename=***”    </li></ul></li><li>流：要下载的文件数据</li></ul></li></ul><h3 id="Servlet代码演示"><a href="#Servlet代码演示" class="headerlink" title="Servlet代码演示"></a>Servlet代码演示</h3><ul><li>Java代码</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line">package com.upload.pic;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.ServletOutputStream;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line">import javax.swing.filechooser.FileNameExtensionFilter;</span><br><span class="line"></span><br><span class="line">import org.apache.tomcat.util.http.fileupload.IOUtils;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class DownLoad</span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/DownLoad&quot;)</span><br><span class="line">public class DownLoad extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">       </span><br><span class="line">    /**</span><br><span class="line">     * @see HttpServlet#HttpServlet()</span><br><span class="line">     */</span><br><span class="line">    public DownLoad() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;get&quot;);</span><br><span class="line">/**</span><br><span class="line"> * 两个头一个流</span><br><span class="line"> * 1. content-type</span><br><span class="line"> * 2. content-dsidposition</span><br><span class="line"> * 3. 下载文件的数据流</span><br><span class="line"> */</span><br><span class="line">String wen_inf_path = getServletContext().getRealPath(&quot;/WEB-INF&quot;);</span><br><span class="line">String filename = &quot;3.Servlet获取到上传表单的数据.mp4&quot;;</span><br><span class="line">String filepath = wen_inf_path + &quot;/3.Servlet获取到上传表单的数据.mp4&quot;;</span><br><span class="line">filename = new String(filename.getBytes(&quot;GBK&quot;),&quot;ISO-8859-1&quot;);</span><br><span class="line">String contentType = this.getServletContext().getMimeType(filepath);//通过文件名称获取mime类型</span><br><span class="line">String contentDisposition = &quot;attachment;filename=&quot; + filename;//带中文则乱码，最好是英文</span><br><span class="line">System.out.println(filename);</span><br><span class="line">System.out.println(filepath);</span><br><span class="line">FileInputStream input = new FileInputStream(filepath);</span><br><span class="line"></span><br><span class="line">response.setHeader(&quot;Content-Type&quot;, contentType);</span><br><span class="line">response.setHeader(&quot;Content-Disposition&quot;, contentDisposition);</span><br><span class="line"></span><br><span class="line">// 获取绑定了客户端的流</span><br><span class="line">ServletOutputStream output = response.getOutputStream();</span><br><span class="line"></span><br><span class="line">IOUtils.copy(input, output);</span><br><span class="line"></span><br><span class="line">input.close();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;post&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="下载的细节"><a href="#下载的细节" class="headerlink" title="下载的细节"></a>下载的细节</h3><ul><li>显示在下载框中的中文名称会出现乱码<ul><li>IE浏览器会出乱码</li><li>火狐会出现乱码</li></ul></li><li>解决方案<ol><li>使用浏览器的编码<ul><li>Firefox 使用 Base64编码</li><li>其他大部分浏览器都是用 URL 编码</li></ul></li><li>通用方案<ul><li>filename = new String(filename.getBytes(“GBK”),”ISO-8859-1”);</li><li>虽然不懂为什么，但是就是有用</li><li>注意，上述代码中分 filepath 和 filename<ul><li>filepath 为 文件路径 不能 改变编码方式</li><li>filename 为 文件名称 可以 修改编码方式</li></ul></li></ul></li></ol></li></ul><h2 id="发送Mail"><a href="#发送Mail" class="headerlink" title="发送Mail"></a>发送Mail</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.mail.send;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.mail.Authenticator;</span><br><span class="line"><span class="keyword">import</span> javax.mail.MessagingException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.PasswordAuthentication;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Session;</span><br><span class="line"><span class="keyword">import</span> javax.mail.Transport;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.AddressException;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.InternetAddress;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage;</span><br><span class="line"><span class="keyword">import</span> javax.mail.internet.MimeMessage.RecipientType;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SendMail</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">SendYourMail</span><span class="params">(String address)</span> <span class="keyword">throws</span> AddressException, MessagingException</span>&#123;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 创建连接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.setProperty(<span class="string">"mail.host"</span>, <span class="string">"smtp.163.com"</span>);</span><br><span class="line">properties.setProperty(<span class="string">"mail.smtp.auth"</span>, <span class="string">"true"</span>);<span class="comment">// 制定验证为True 是否需要身份验证</span></span><br><span class="line">properties.setProperty(<span class="string">"mail.transport.protocol"</span>, <span class="string">"SMTP"</span>);</span><br><span class="line"></span><br><span class="line">Authenticator auth = <span class="keyword">new</span> Authenticator() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> PasswordAuthentication <span class="title">getPasswordAuthentication</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> PasswordAuthentication(<span class="string">"SZMT_TEAM"</span>, <span class="string">"szmt317"</span>);</span><br><span class="line">                <span class="comment">// 这个szmt317 不是我163的密码 而是我的</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">Session session = Session.getInstance(properties, auth);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编辑邮件</span></span><br><span class="line"></span><br><span class="line">MimeMessage msg = <span class="keyword">new</span> MimeMessage(session);</span><br><span class="line">msg.setFrom(<span class="keyword">new</span> InternetAddress(<span class="string">"SZMT_TEAM@163.com"</span>));<span class="comment">//设置发件人</span></span><br><span class="line">msg.setRecipients(RecipientType.TO, address);<span class="comment">//设置收件人，正常发送</span></span><br><span class="line">msg.setRecipients(RecipientType.CC, address);<span class="comment">//设置收件人，抄送（即再发送一份样的）</span></span><br><span class="line">msg.setRecipients(RecipientType.BCC, address);<span class="comment">//设置收件人，暗送</span></span><br><span class="line"></span><br><span class="line">msg.setSubject(<span class="string">"测试，测试，测试"</span>); <span class="comment">// 邮件的标题</span></span><br><span class="line">msg.setContent(<span class="string">"你的验证码是 ****"</span>, <span class="string">"text/html;charset=utf-8"</span>);<span class="comment">//邮件内容</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 发送邮件</span></span><br><span class="line">Transport.send(msg);</span><br><span class="line">System.out.println(<span class="string">"发送成功"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这里的问题就是 你的 163 邮箱需要开启服务<ul><li>设置 客户端授权密码 上述的 Authenticator 中并不是我的163账户密码，而是授权密码</li></ul></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;真～Java基础&quot;&gt;&lt;a href=&quot;#真～Java基础&quot; class=&quot;headerlink&quot; title=&quot;真～Java基础&quot;&gt;&lt;/a&gt;真～Java基础&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Java SE：Java Platform， Standard Editi
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>MyBatis学习</title>
    <link href="http://yoursite.com/2017/11/22/MyBatis/"/>
    <id>http://yoursite.com/2017/11/22/MyBatis/</id>
    <published>2017-11-22T11:13:24.000Z</published>
    <updated>2019-02-07T07:04:57.670Z</updated>
    
    <content type="html"><![CDATA[<h1 id="MyBatis"><a href="#MyBatis" class="headerlink" title="MyBatis"></a>MyBatis</h1><ul><li>MyBatis 不同与 Hiberanat</li><li>MyBatis 比较轻 而 Hiberanat 比较重<br><code>这里的 轻 代表的是 方便学习，开发，维护，简单</code></li></ul><h2 id="初识MyBatis"><a href="#初识MyBatis" class="headerlink" title="初识MyBatis"></a>初识MyBatis</h2><h3 id="MyBatis介绍"><a href="#MyBatis介绍" class="headerlink" title="MyBatis介绍"></a>MyBatis介绍</h3><h4 id="历史"><a href="#历史" class="headerlink" title="历史"></a>历史</h4><p>iBATIS = “internet” + “abatis” 的组合<br>是Apache公司的一个开源项目，这个项目是做软件加密的<br>abatis 翻译过来是 路障，铁丝网的意思<br>后来转型成为一个基于Java的持久层框架</p><ul><li>持久层<ul><li>Java中对象有两种状态<ul><li>瞬态</li><li>持久态</li></ul></li><li>瞬态<ul><li>new 了一个对象 用完之后垃圾回收</li><li>对象中的属性状态没有保存</li></ul></li><li>持久态<ul><li>对象的状态属性保持住了</li><li>保存的方法又很多种 ：文件，数据库等</li></ul></li><li>如果保存在数据库中，我们可以用JDBC来访问，操作</li><li>但是JDBC不是很方便，这样就产生了一种框架，叫做持久层框架    </li></ul></li></ul><p>iBatis 后来改名为 MyBatis<br>因为跳槽，从Apache 跳槽到 Google 再到 Github</p><h4 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h4><ul><li>开源的优秀持久层框架</li><li>轻</li><li>SQL语句和代码分离</li><li>面向配置的编程（面向切片的编程）</li><li>增强程序的可维护性，可扩展性</li><li>良好支持复杂数据映射</li><li>使用JDBC我们会拼装SQL语句，这种语句并不安全，容易造成SQL注入</li><li>MyBatis 使用 动态SQL 技术，替换拼装SQL语句</li></ul><h3 id="MyBatis环境搭建"><a href="#MyBatis环境搭建" class="headerlink" title="MyBatis环境搭建"></a>MyBatis环境搭建</h3><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p><a href="https://github.com/mybatis/mybatis-3/releases" target="_blank" rel="noopener">MyBatis下载地址</a> </p><ul><li><p>解压压缩文件</p><ul><li>其中mybatis-<em>.</em>.*.jar 是 MyBatis 的主jar包</li><li>lib/ 文件夹是他的部分依赖包，毕竟曾经是Apache的项目</li><li>mybatis-<em>.</em>.*.pdf 是 说明文档<h4 id="导入工程"><a href="#导入工程" class="headerlink" title="导入工程"></a>导入工程</h4></li></ul></li><li><p>导入 mybatis-<em>.</em>.*.jar 包</p></li><li>导入 lib 中相关的 jar</li><li>导入 mysql 数据库 针对于 JDBC 的jar包</li></ul><h4 id="日志配置"><a href="#日志配置" class="headerlink" title="日志配置"></a>日志配置</h4><ul><li><p>为什么配置日志<br>  -当我调试或者观察程序的时候，是通过输出的SQL语句看一下程序的执行状况</p><ul><li>MyBatis 是通过 日志来完成的，所以要配置日志</li></ul></li><li><p>加入日志配置文件log4.properties</p></li><li>改写日志输出级别为debug级别<ul><li>MyBatis 在日志输出的时候，SQL语句一定实在debug级别才能输出</li><li>如果是inform级，则不输出</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">log4j.rootLogger=DEBUG, Console</span><br><span class="line"></span><br><span class="line">#Console</span><br><span class="line">log4j.appender.Console=org.apache.log4j.ConsoleAppender</span><br><span class="line">log4j.appender.Console.layout=org.apache.log4j.PatternLayout</span><br><span class="line">log4j.appender.Console.layout.ConversionPattern=%d [%t] %-5p [%c] - %m%n</span><br><span class="line"></span><br><span class="line">log4j.logger.java.sql.ResultSet=INFO</span><br><span class="line">log4j.logger.org.apache=INFO</span><br><span class="line">log4j.logger.java.sql.Connection=DEBUG</span><br><span class="line">log4j.logger.java.sql.Statement=DEBUG</span><br><span class="line">log4j.logger.java.sql.PreparedStatement=DEBUG</span><br></pre></td></tr></table></figure><h3 id="MyBatis工作流程"><a href="#MyBatis工作流程" class="headerlink" title="MyBatis工作流程"></a>MyBatis工作流程</h3><h4 id="工作流程的步骤"><a href="#工作流程的步骤" class="headerlink" title="工作流程的步骤"></a>工作流程的步骤</h4><ol><li>读取配置文件<ul><li>读取的是基本配置文件</li><li>包含的是连数据库的相关信息</li></ul></li><li>生成SqlSessionFactory<ul><li>Sqlsession的工厂，用于建立与数据库之间的会话</li></ul></li><li>建立SqlSession<ul><li>用于执行Sql语句</li></ul></li><li>SqlSession 调用MyBatis提供的API</li><li>查询MAP配置<ul><li>Map配置文件里面存放的是sql语句</li></ul></li><li>返回结果<ul><li>不同的sql语句返回不同的结果</li></ul></li><li>关闭SqlSession</li></ol><h4 id="工作流程的配置文件"><a href="#工作流程的配置文件" class="headerlink" title="工作流程的配置文件"></a>工作流程的配置文件</h4><ul><li>基本配置文件</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span> # 一个environments 中有多个 environment </span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span> # 一个environment 代表连接的一个数据库 里面的是数据库的信息</span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span> #事务由谁来管理 这里是JDBC管理</span><br><span class="line">      <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span> #是否用连接池 或者 第三方child</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span> #驱动</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jikebook"</span>/&gt;</span> #链接路径</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span> # 用户名</span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"123"</span>/&gt;</span> # 密码</span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"jike/book/map/jikeUser.xml"</span>/&gt;</span>　＃　</span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>包含着连数据库的基本信息</p><ul><li>链接数据库的信息<ul><li><environments></environments></li><li>就是环境，封装的就是连数据库的信息</li></ul></li><li><p>map配置文件的数据位置</p><ul><li><mappers></mappers></li><li>映射map配置文件的路径信息</li></ul></li><li><p>map配置文件   </p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"/"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span>  <span class="attr">parameterType</span>=<span class="string">"int"</span>  <span class="attr">resultType</span>=<span class="string">"jike.book.pojo.JiKeUser"</span>&gt;</span></span><br><span class="line">    select * from jikeUser where id=#&#123;id&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="SqlSessionFactory-SqlSession"><a href="#SqlSessionFactory-SqlSession" class="headerlink" title="SqlSessionFactory, SqlSession"></a>SqlSessionFactory, SqlSession</h4><ul><li>SqlSessionFactory代表着跟数据库之间的连接</li><li>连上去之后自然要进行各种各样的操作</li><li>各种各样的操作是由SqlSession去执行的</li><li><p>SqlSession是由SQLSessionFactory来建立的</p></li><li><p>生命周期</p><ul><li>SqlSessionFactory的生命周期是程序级的<ul><li>一般一个MyBatis程序只有一个SqlSessionFactory</li><li>程序开始的时候建立，结束的时候才会消亡</li></ul></li><li>SqlSession 是过程级的<ul><li>比如在一个方法当中会建立一个SqlSession，执行完后SqlSession就应该关闭了</li></ul></li></ul></li><li><p>建立的代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> </span><br><span class="line">SqlSessionFactory sqlMapper = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line"># reader 是一个输入流，是基本配置文件的路径的流</span><br><span class="line">SqlSession session = sqlMapper.openSession();</span><br></pre></td></tr></table></figure><h4 id="Map文件"><a href="#Map文件" class="headerlink" title="Map文件"></a>Map文件</h4><h5 id="基本配置文件引用map文件"><a href="#基本配置文件引用map文件" class="headerlink" title="基本配置文件引用map文件"></a>基本配置文件引用map文件</h5><ul><li>相对路径引用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"test/book/map/TestUser.xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>绝对路径引用</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">url</span>=<span class="string">"file:///var/sqlmaps/AuthorMapper.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>包路径引用<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">"com.Test.mybatis.mapperinterface"</span> /&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h5 id="什么是map文件"><a href="#什么是map文件" class="headerlink" title="什么是map文件"></a>什么是map文件</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"Test.book.pojo.TestUser"</span>&gt;</span></span><br><span class="line">select * from TestUser where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述标签中的id，这是找到这个sql语句的标示</li><li>上述标签中的parameterType是参数类型</li><li>上述标签中的resultType指的是返回类型</li><li>上述的sql语句中id = #{id}，’#’后面的内容代表一个参数</li></ul><h4 id="看实战，学操作，我有知识我自豪"><a href="#看实战，学操作，我有知识我自豪" class="headerlink" title="看实战，学操作，我有知识我自豪"></a>看实战，学操作，我有知识我自豪</h4><h5 id="建立数据库"><a href="#建立数据库" class="headerlink" title="建立数据库"></a>建立数据库</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">create database jikebook;</span><br><span class="line"></span><br><span class="line">use jikebook;</span><br><span class="line"></span><br><span class="line"><span class="function">create table <span class="title">jikeUser</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">id <span class="keyword">int</span> not <span class="keyword">null</span> auto_increment,</span></span></span><br><span class="line"><span class="function"><span class="params">    userName varchar(<span class="number">20</span>)</span> ,</span></span><br><span class="line"><span class="function">    password <span class="title">varchar</span><span class="params">(<span class="number">20</span>)</span> ,</span></span><br><span class="line"><span class="function">    primary <span class="title">key</span><span class="params">(id)</span></span></span><br><span class="line"><span class="function">)engine</span>=InnoDB <span class="keyword">default</span> charset=utf8;</span><br><span class="line"></span><br><span class="line"><span class="function">insert into <span class="title">jikeUser</span><span class="params">(id, userName, password)</span></span></span><br><span class="line"><span class="function">values</span></span><br><span class="line"><span class="function"><span class="params">(<span class="number">1</span>, <span class="string">'hello world'</span>, <span class="string">''</span>)</span></span>;</span><br></pre></td></tr></table></figure><h5 id="查询代码"><a href="#查询代码" class="headerlink" title="查询代码"></a>查询代码</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">TestUser temp = session.selectOne("findById", 1); # 第一个参数是map配置中的id，第二个参数是 mysql数据库中 的id</span><br><span class="line">System.out.println(<span class="string">"name = "</span> +  temp.getUseName());</span><br></pre></td></tr></table></figure><ul><li>jikeUser.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test.book.map"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"test.book.pojo.TestUser"</span>&gt;</span></span><br><span class="line">select * from jikeUser where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MyBatisConfig.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jikebook"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"test/book/map/jikeUser.xml"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>TestUser.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test.book.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestUser</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">private</span> String userName;</span><br><span class="line"><span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUserName</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.userName = userName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getPassword</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> password;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line"><span class="keyword">this</span>.password = password;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>MainTest.java</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test.book.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String reource = <span class="string">"test/book/map/MyBatisConfig.xml"</span>;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">SqlSession session;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = Resources.getResourceAsReader(reource);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;</span><br><span class="line">System.out.println(<span class="string">"111"</span>);</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">System.out.println(<span class="string">"222"</span>);</span><br><span class="line">session =sqlSessionFactory.openSession();</span><br><span class="line">TestUser temp = session.selectOne(<span class="string">"findById"</span>, <span class="number">1</span>);</span><br><span class="line">System.out.println(temp.getUserName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="MyBatis-基础操作"><a href="#MyBatis-基础操作" class="headerlink" title="MyBatis 基础操作"></a>MyBatis 基础操作</h2><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><ul><li>影响行数</li></ul><h4 id="insert"><a href="#insert" class="headerlink" title="insert"></a>insert</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"TestUser"</span> <span class="attr">statementType</span>=<span class="string">"PREPARED"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">insert into JikeUser (userName, password) values(#&#123;userName, jdbcType=VARCHAR&#125;, #&#123;password, jdbcType=VARCHAR&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述代码中<ul><li>StatementType=”PERPARED” 代表这是一个 预处理的SQL语句</li><li>parameterType=”TestUser” 代表传入的类<ul><li>这里传入的应该是一个全路径名称，即com.jike.book.JikeUser </li><li>这里使用了typeAliases 标记 来定义了别名 简化了代码的书写</li></ul></li><li>keyProperty 代表 哪一个 参数 是主键</li></ul></li></ul><p><code>上一个大类中完成的基本配置中加上</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"TestUser"</span> <span class="attr">type</span>=<span class="string">"test.book.pojo.TestUser"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><blockquote><p>着重强调！！！<br>着重强调！！！<br>着重强调！！！  </p></blockquote><ul><li><p>Alias要写在environments前面，先定义别名，在配置环境，否则会报错  </p></li><li><p>切记 切记</p></li></ul><h5 id="下面介绍代码"><a href="#下面介绍代码" class="headerlink" title="下面介绍代码"></a>下面介绍代码</h5><ul><li><p>TestUser类依旧不变</p></li><li><p>MainTest类修改</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test.book.pojo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Reader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.io.Resources;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSession;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactory;</span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.session.SqlSessionFactoryBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">String reource = <span class="string">"test/book/map/MyBatisConfig.xml"</span>;</span><br><span class="line">Reader reader = <span class="keyword">null</span>;</span><br><span class="line">SqlSession session;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">reader = Resources.getResourceAsReader(reource);</span><br><span class="line">&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated catch block</span></span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line">SqlSessionFactory sqlSessionFactory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(reader);</span><br><span class="line">session =sqlSessionFactory.openSession();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestUser testUser = <span class="keyword">new</span> TestUser();</span><br><span class="line">testUser.setUserName(<span class="string">"laoziniubi"</span>);</span><br><span class="line">testUser.setPassword(<span class="string">"123456"</span>);</span><br><span class="line">session.insert(<span class="string">"insertUser"</span>, testUser);</span><br><span class="line">session.commit();<span class="comment">//提交sql语句</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>jikeUser.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"><span class="meta">&lt;!DOCTYPE mapper</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">"test.book.map"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"findById"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">resultType</span>=<span class="string">"test.book.pojo.TestUser"</span>&gt;</span></span><br><span class="line">select * from jikeUser where id=#&#123;id&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">"insertUser"</span> <span class="attr">parameterType</span>=<span class="string">"TestUser"</span> <span class="attr">statementType</span>=<span class="string">"PREPARED"</span> <span class="attr">keyProperty</span>=<span class="string">"id"</span> <span class="attr">useGeneratedKeys</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line">insert into jikeUser (userName, password) values(#&#123;userName&#125;, #&#123;password&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>MyBatisConfig.xml</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE configuration</span></span><br><span class="line"><span class="meta">    PUBLIC "-//mybatis.org//DTD Config 3.0//EN"</span></span><br><span class="line"><span class="meta">    "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">typeAlias</span> <span class="attr">alias</span>=<span class="string">"TestUser"</span> <span class="attr">type</span>=<span class="string">"test.book.pojo.TestUser"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">typeAliases</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">transactionManager</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"com.mysql.jdbc.Driver"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"jdbc:mysql://localhost:3306/jikebook"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"root"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  </span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"test/book/map/jikeUser.xml"</span> /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Update"><a href="#Update" class="headerlink" title="Update"></a>Update</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">update</span> <span class="attr">id</span>=<span class="string">"updateUser"</span> <span class="attr">parameterType</span>=<span class="string">"TestUser"</span>&gt;</span></span><br><span class="line">update jikeUser set userName=#&#123;userName, jdbcType=VARCHAR&#125;,password=#&#123;password,jdbcType=VARCHAR&#125; where id=#&#123;id,jdbcType=INTEGER&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">update</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述代码中<ul><li>parameterType 仍然利用别名</li><li>jdbcType 是 MyBatis 中 自动类型转换的一种设定<ul><li>java当中的数据类型 和 数据库当中的数据类型需要一个转换</li><li>这种转换 往往是自动完成的，但当不能自动转换的时候，就需要进行手动转换</li></ul></li></ul></li></ul><h5 id="下面介绍代码-1"><a href="#下面介绍代码-1" class="headerlink" title="下面介绍代码"></a>下面介绍代码</h5><ul><li>就不介绍xml了，和之前一样，就加上 update 标签就行了</li><li>写一下调试代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestUser testUser = <span class="keyword">new</span> TestUser();</span><br><span class="line">testUser.setUserName(<span class="string">"laoziniubi"</span>);</span><br><span class="line">testUser.setPassword(<span class="string">"666666"</span>);</span><br><span class="line">testUser.setId(<span class="number">2</span>);</span><br><span class="line">session.update(<span class="string">"updateUser"</span>, testUser);</span><br><span class="line">session.commit();<span class="comment">//提交sql语句</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="delete-使用注解方式"><a href="#delete-使用注解方式" class="headerlink" title="delete(使用注解方式)"></a>delete(使用注解方式)</h4><ul><li>在map.xml的包中新建一个interface接口，名为JikeUserMapInterface</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> test.book.map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.ibatis.annotations.Delete;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">JikeUserMapInterface</span> </span>&#123;</span><br><span class="line"><span class="meta">@Delete</span>(<span class="string">"delete from jikeUser where id=#&#123;id&#125;"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteUder</span><span class="params">(<span class="keyword">int</span> id)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在基本配置文件的mapper 标签中添加  </li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"test/book/map/jikeUser.xml"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">class</span>=<span class="string">"test.book.map.JikeUserMapInterface"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在TestMain调试文件中</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">JikeUserMapInterface jkumi = session.getMapper(JikeUserMapInterface.class);</span><br><span class="line">jkumi.deleteUder(<span class="number">1</span>);<span class="comment">//删除id为1的记录</span></span><br><span class="line">session.commit();<span class="comment">//提交sql语句</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li>返回集合</li></ul><h4 id="Select-参数-如何操作-如何得到结果集"><a href="#Select-参数-如何操作-如何得到结果集" class="headerlink" title="Select 参数 如何操作 如何得到结果集"></a>Select 参数 如何操作 如何得到结果集</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectPerson"</span> <span class="attr">parameterType</span>=<span class="string">"int"</span> <span class="attr">parameterMap</span>=<span class="string">"hashmap"</span> <span class="attr">resultType</span>=<span class="string">"hashmap"</span> <span class="attr">resultMap</span>=<span class="string">"personResultMap"</span> <span class="attr">flushCache</span>=<span class="string">"false"</span> <span class="attr">userCache</span>=<span class="string">"true"</span> <span class="attr">timeout</span>=<span class="string">"10000"</span> <span class="attr">fetchSize</span>=<span class="string">"256"</span>&gt;</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>id</td><td>在命名空间中唯一的标识符，可以被用来引用这条语句</td></tr><tr><td>parameterType</td><td>将会传入这条语句的参数类的完全限定名或类名</td></tr><tr><td>parameterMap</td><td>这是引用外部parameterMap的已经被废弃的方法。使用内敛参数映射和parameterType属性</td></tr><tr><td>resultType</td><td>从这条语句中返回的期望类型的类和完全限定名或别名。注意集合情形，那应该是集合可以包含的类型，而不能是集合。使用resultType或resultMa，但不能同时使用</td></tr><tr><td>resultMap</td><td>命名引用外部的resultMap。返回map是MyBatis最具力量的特性，对其有一个很好的理解的话，许多复杂映射的清醒就能被解决了。</td></tr><tr><td>flushCache</td><td>将其设为true，不能语句什么时候被调用，都会导致缓存被清空。默认值为false</td></tr><tr><td>userCache</td><td>将其设置为true，将会导致本条语句的结果被缓存。默认值为false</td></tr><tr><td>timeout</td><td>设置驱动程序等待数据库返回请求结果，并抛出异常时间的最大值。默认值不设定，驱动自行处理</td></tr><tr><td>fetchSize</td><td>这是暗示驱动程序每次批量返回的结果函数。默认值不设置，程序自行控制</td></tr><tr><td>statementType</td><td>STATEMENT，PREPARED或CALLABLE的一种。这会让MyBatis选择使用Statement,PreparedStatement或Callable 的一种</td></tr><tr><td>resultSetType</td><td>FORWARD_ONLY，SCROLL_SENSITIVE,SCROLL_INSTENSITIVE中的一种。默认是不设置，驱动自行处理</td></tr></tbody></table><ul><li>parameterType封装：hashmap</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"loginSelect"</span> <span class="attr">resultType</span>=<span class="string">"TestUser"</span> <span class="attr">parameterType</span>=<span class="string">"hashmap"</span>&gt;</span></span><br><span class="line">select * from jikeUser where userName=#&#123;userName&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p> 老样子 把上述代码放在map.xml文件中</p></blockquote><ul><li>测试</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">HashMap(String, String) hm = <span class="keyword">new</span> HashMap();</span><br><span class="line">hm.put(<span class="string">"userName"</span>, <span class="string">"laoziniubi"</span>);</span><br><span class="line">hm.put(<span class="string">"password"</span>, <span class="string">"666666"</span>);</span><br></pre></td></tr></table></figure><ul><li>上述的 “userName” 和 “password” 不仅是map的键，同时是 上述 select 标签中传入的参数名称</li><li><p>调用session 方法传入 hashmap</p><ul><li>TestUser ontemp = session.selectOne(“loginSelect”,     hm);</li></ul></li><li><p>调试代码 <code>(使用hashmap)</code></p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">HashMap&lt;String, String&gt; hm = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">hm.put(<span class="string">"userName"</span>, <span class="string">"laoziniubi"</span>);</span><br><span class="line">hm.put(<span class="string">"password"</span>,<span class="string">"666666"</span>);</span><br><span class="line">TestUser testUser = session.selectOne(<span class="string">"loginSelect"</span>,hm);</span><br><span class="line"><span class="keyword">if</span> (testUser != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(testUser.getUserName() + <span class="string">" 欢迎回来"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>调试代码 <code>(使用对象)</code></p><ul><li>对象参数自动匹配属性</li><li>如果对象属性与列名不一样用别名</li></ul></li><li><p>这里 要修改xml文件的select标签</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"login2"</span> <span class="attr">resultType</span>=<span class="string">"TestUser"</span> <span class="attr">parameterType</span>=<span class="string">"TestUser"</span> &gt;</span></span><br><span class="line">select * from jikeUser where userName=#&#123;userName&#125; and password=#&#123;password&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后是TestMain</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">TestUser testUser = <span class="keyword">new</span> TestUser();</span><br><span class="line">testUser.setUserName(<span class="string">"laoziniubi"</span>);</span><br><span class="line">testUser.setPassword(<span class="string">"666666"</span>);</span><br><span class="line">TestUser getone = session.selectOne(<span class="string">"login2"</span>, testUser);</span><br><span class="line"><span class="keyword">if</span> (getone != <span class="keyword">null</span>) &#123;</span><br><span class="line">System.out.println(getone.getUserName() + <span class="string">" 欢迎回来"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回多个查询"><a href="#返回多个查询" class="headerlink" title="返回多个查询"></a>返回多个查询</h4><ul><li>上述只是返回一个对象的情况，如果是返回多个对象呢？<ul><li>MyBatis会返回一个list</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectTestUserList"</span> <span class="attr">resultType</span>=<span class="string">"TestUser"</span>&gt;</span></span><br><span class="line">select * from jikeUser </span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>测试函数中调用List 来接受list<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;TestUser&gt; ap = session.selectList(<span class="string">"selectTestUserList"</span>);</span><br><span class="line"><span class="keyword">for</span> (TestUser testUser : ap) &#123;</span><br><span class="line">System.out.println(testUser.getUserName() + <span class="string">" 欢迎回来"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="resultType-与-resultMap"><a href="#resultType-与-resultMap" class="headerlink" title="resultType 与 resultMap"></a>resultType 与 resultMap</h4><ul><li><p>resultType 与 resultMap 一样用于返回结果操作</p><ul><li>但是，resultType 与 resultMap 只能用其中一个</li></ul></li><li><p>区别是 resultMap 中可以解决一些比较复杂的映射问题</p><ul><li>例如：一个对象含有另一个对象的引用</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">resultMap</span> <span class="attr">id</span> = <span class="string">"TestUserMap"</span> <span class="attr">type</span>= <span class="string">"TestUser"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">id</span> <span class="attr">property</span>=<span class="string">"id"</span> <span class="attr">column</span>=<span class="string">"id"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"userName"</span> <span class="attr">column</span>=<span class="string">"userName"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">result</span> <span class="attr">property</span>=<span class="string">"password"</span> <span class="attr">column</span>=<span class="string">"password"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resultMap</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>上述中，如果类中的参数名与数据库中的参数名不一致的时候，可以使用resultMap来改变映射关系</p></li><li><p>使用resultMap</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">"selectUsers"</span> <span class="attr">resultMap</span>=<span class="string">"TestUserMap"</span>&gt;</span></span><br><span class="line">select id,userName,password from jikeUser</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>上述代码中，resultMap 指明了使用 哪个resultMap</p></li><li><p>会按照resultMap的设定来返回对应的值</p></li><li><p>TestMain中的测试代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">List&lt;TestUser&gt; ap = session.selectList(<span class="string">"selectUsers"</span>);</span><br><span class="line"><span class="keyword">for</span> (TestUser testUser : ap) &#123;</span><br><span class="line">System.out.println(testUser.getUserName() + <span class="string">" 欢迎回来"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###事物处理</p><h4 id="事务处理配置"><a href="#事务处理配置" class="headerlink" title="事务处理配置"></a>事务处理配置</h4><ul><li><p>MyBatis的事务处理又两个选项</p><ol><li>JDBC<ul><li>JDBC代表的事</li><li>务处理由JDBC完成</li></ul></li><li>MANAGED<ul><li>MANAGED代表的事务处理由第三方的一些插件完成，例如Spring</li></ul></li></ol></li><li><p>事务处理的配置写在<code>基本配置文件当中</code></p><blockquote><p>在基本配置文件当中（就是那个调用map.xml的xml文件啦）<br>有个 transactionManager 标签，tpye属性当中就是上述的JDBC或者MANAGED</p></blockquote></li></ul><h4 id="事务处理方法"><a href="#事务处理方法" class="headerlink" title="事务处理方法"></a>事务处理方法</h4><ul><li>MyBatis JDBC事务管理（典型代码）</li></ul><ol><li>关闭自动提交<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>&#123;</span><br><span class="line">session = sqlMapper.openSession(<span class="keyword">false</span>); <span class="comment">// 关闭自动提交</span></span><br><span class="line">操作 balabalbala.....</span><br><span class="line">session.commit();<span class="comment">// 提交事务 </span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">session.rollback();<span class="comment">//回滚</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">finally</span>&#123;</span><br><span class="line">session.close(); <span class="comment">//关闭session</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;MyBatis&quot;&gt;&lt;a href=&quot;#MyBatis&quot; class=&quot;headerlink&quot; title=&quot;MyBatis&quot;&gt;&lt;/a&gt;MyBatis&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;MyBatis 不同与 Hiberanat&lt;/li&gt;
&lt;li&gt;MyBatis 比较轻 而
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Ajax</title>
    <link href="http://yoursite.com/2017/11/20/Ajax/"/>
    <id>http://yoursite.com/2017/11/20/Ajax/</id>
    <published>2017-11-20T13:12:01.000Z</published>
    <updated>2019-02-07T07:03:54.636Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是Ajax"><a href="#什么是Ajax" class="headerlink" title="什么是Ajax"></a>什么是Ajax</h2><pre><code>允许浏览器与服务器通信而无须刷新当前页面的技术都叫Ajax异步的Js和XML的通信</code></pre><h3 id="不用刷新整个页面就可以与服务器通讯的方法"><a href="#不用刷新整个页面就可以与服务器通讯的方法" class="headerlink" title="不用刷新整个页面就可以与服务器通讯的方法"></a>不用刷新整个页面就可以与服务器通讯的方法</h3><pre><code>1. Flash2. Java appleet3. 框架：如果使用一组框架构造了网页，可以只更新其中一个框架，而不用惊动整个页面4. 隐藏的iframe5. XMLHttpRequest:该对象是对JavaScript的一个扩展，可使网页与服务器进行通信。   是创建Ajax应用的最佳选择，实际上通常把Ajax当成XMLHttpRequest对象的代名词</code></pre><p><img src="https://i.imgur.com/1TQnuU0.png" alt=""></p><h3 id="Ajax工具包"><a href="#Ajax工具包" class="headerlink" title="Ajax工具包"></a>Ajax工具包</h3><pre><code>Ajax并不是一项新技术，它实际上是几种技术，每种技术各尽其职，以一种全新的方式聚合在一起：1. 服务器端语言：服务器必须具备向浏览器发送特定信息的能力。Ajax与服务器语言无关2. XMLL:Ajax程序需要某种格式化的格式来在服务器和客户端之间传递信息，XML是其中一种选择3. XHTML：使用扩展HTML和CSS标准化呈现4. DOM：实现动态交互和显示5. 使用Javascript绑定和处理所有数据6. 使用XMLHTTP组件XMLHttpRequests对象进行异步数据读取</code></pre><h3 id="Ajax的缺陷"><a href="#Ajax的缺陷" class="headerlink" title="Ajax的缺陷"></a>Ajax的缺陷</h3><pre><code>1. 由JavaScript和Ajax引擎会导致引擎的兼容性问题（现在少）2. 页面局部刷新，导致 后退功能不好用3. 对流媒体的支持没有Flash和JavaApple好4. 一些手持设备支持性差（现在少）</code></pre><h2 id="XMLHttpRequest"><a href="#XMLHttpRequest" class="headerlink" title="XMLHttpRequest"></a>XMLHttpRequest</h2><h3 id="创建XMLHttpRequest对象"><a href="#创建XMLHttpRequest对象" class="headerlink" title="创建XMLHttpRequest对象"></a>创建XMLHttpRequest对象</h3><pre><code>function getHTTPObject(){    var xhr = false;    if(window.XMLHttpRequest){        xhr = new XMLHttpRequest();    } else if(window.ActiveXObject()){        xhr = new ActiveXObject(&quot;Microsoft.XMLHttp&quot;);    }    return xhr;}</code></pre><ul><li>大多数浏览器都支持 <code>var xmlhttp = new XMLHttpRequest()</code></li><li>IE6.0： <code>var xmlhttp = new ActiveXObject(&quot;Msxml2.XMLHTTP&quot;)</code></li><li>IE5.5及更早版本的IE： <code>var xmlHttp = new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</code></li><li>对window.XMLHttpRequest的调用会返回一个对象或null，如果XMLHttpRequest对象存在，啧把xhr的值设为该对象的新实例</li></ul><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><h4 id="以下用于发送："><a href="#以下用于发送：" class="headerlink" title="以下用于发送："></a>以下用于发送：</h4><ol><li>abort()停止当前请求</li><li>getAllResponseHeader() 把HTTP请求的所有响应首部作为键值对返回</li><li>getResponseHeader(“header”); 返回指定首部的串值</li><li>open(“method”,”url”,bool);建立对服务器的调用，Method参数可以是put或post，url可以是相对url也可以是绝对url, 请求是否为异步请求</li><li>send(content) 向服务器发送请求，没有为null，最好send里面有东西（就算是null）</li><li>setRequestHeader(“header”,”value”);设置首部及其值，在设置任何首部之前必须先调用open()</li></ol><h4 id="以下用于请求："><a href="#以下用于请求：" class="headerlink" title="以下用于请求："></a>以下用于请求：</h4><ol><li>onreadystatechange    每个状态改变的是都会出发这个事件处理器，通常会条用一个JavaScript函数</li><li>readyState    请求的状态，有五个可取值：0=未初始化，1=正在加载，2=已经加载，3=交互中，4=完成</li><li>responseText    服务器的响应，表示为一个串</li><li>responseXML    服务器的响应，表示为XML，这个对象可以解析为Dom对象</li><li>status    服务器的HTTP状态码</li><li>statusText    HTTP状态码对应的文本（OK或NotFount等）</li></ol><h3 id="一个简单的案例"><a href="#一个简单的案例" class="headerlink" title="一个简单的案例"></a>一个简单的案例</h3><pre><code>目标，不刷新，不跳转界面，只alert 出 a.xml&lt;script&gt;    window.onload = funtion(){    //获取a节点    document.getElementByTagName(&quot;a&quot;)[0].onclick = function(){        // 创建一个XMLHttpRequest对象        var request = new XMLHttpRequest();        // 准备发送请求的数据：url加上时间戳        var url = this.href + &quot;?time=&quot;+new Date();        var method = &quot;GET&quot;;        // 调用XMLHttpRequest 对象的open方法        request.open(method, url);        // 调用XMLHttpRequest 对象的send方法        request.send(null);        // 为 XMLHttpRequest 对象添加onreadystatechange        // 判断响应是否完成：XMLHttpRequest对象的readyState属性为4的时候        // 再判断响应是否可用：XMLHttpReqeust对象status属性值为200        request.onreadystaechange = function(){            if(request.readyState == 4){                if(request.status == 200 || request.status == 304)                alert(request.responseText);            }        }        //返回false，取消原有功能，也就是说返回false后，不会跳转页面        return false;    }        }&lt;/script&gt;&lt;html&gt;    &lt;a href=&quot;a.xml&quot;&gt;跳转&lt;/a&gt;&lt;/html&gt;</code></pre><h3 id="发送请求"><a href="#发送请求" class="headerlink" title="发送请求"></a>发送请求</h3><ul><li>利用XMLHttpRequest实例与服务器进行通信包含一下三个关键部分：</li></ul><ol><li>onreadystatechange 事件处理函数</li><li>open 方法</li><li>send 方法</li></ol><h4 id="onreadystatechange"><a href="#onreadystatechange" class="headerlink" title="onreadystatechange"></a>onreadystatechange</h4><pre><code>该事件处理函数由服务器出发，而不是用户在Ajax执行过程中，服务器会通知客户端当前的通信状态这依靠更新XMLhttpRequest对象的readyState来实现改变readyState属性是服务器对客户端连续操作的一种方式每次readyState属性的改变都会触发readystatechange事件</code></pre><h4 id="open-methdo-url-asynch"><a href="#open-methdo-url-asynch" class="headerlink" title="open(methdo, url, asynch)"></a>open(methdo, url, asynch)</h4><ul><li><p>XMlHttpRequest对象的open方法允许程序员用一个Ajax调用向服务器发送请求</p></li><li><p>method：请求类型，类似“GET”或“POST”的字符串。</p></li><li><p>在某些情况下，有些浏览器会把多个XMLHttpRequest请求的结果缓存到用一个URL，</p></li><li><p>如果每个请求的相应不同，但是得到的结果却会一样。所以此时加一个 时间戳 到url最后，以确保url的唯一性</p></li><li><p>url：路径字符串，指向你所请求的服务器上的那个文件，可以是绝对路径，也可以是相对路径</p></li><li><p>asynch：表示是否要异步传输，默认是true</p></li></ul><h4 id="send-data"><a href="#send-data" class="headerlink" title="send(data)"></a>send(data)</h4><ol><li>open方法定义了Ajax请求的一些细节，send方法可以为已经待命的请求发送指令</li><li>data：将要发送给服务器的字符串</li><li>若用”GET”请求，则不用发任何数据，即request.send(null);</li><li>当向send()方法提供参数时，要确保open()中指定的方法是”POST”,如果没有数据发送，则使用null</li></ol><h4 id="setRequestHeader-header-value"><a href="#setRequestHeader-header-value" class="headerlink" title="setRequestHeader(header, value)"></a>setRequestHeader(header, value)</h4><ol><li>当浏览器向服务器请求页面时，它会伴随这个请求发送一组首部信息，当这些首部信息是一系列描述请求的元数据（metadata）。首部信息来声明一个请求时get还是post</li><li>Ajax请求中，发送首部信息的工作可以是由setRequestHeader完成</li><li>参数header:首部的名字；参数value:首部的值</li><li>如果用POST请求向服务器发送数据，需要将 “Content-type”的首部设置为 “application/x-www-form-urlencoded”。<ul><li>他会告知服务器正在发送数据，并且数据已经符合url编码了</li></ul></li><li>该方法必须在open()之后才能调用</li></ol><h5 id="post示例"><a href="#post示例" class="headerlink" title="post示例"></a>post示例</h5><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var url = "../jsp/forumServlet";</span><br><span class="line">var nameValue = trim(document.forumiddform.name.value);</span><br><span class="line">xhr.open("POST", url);</span><br><span class="line">xhr.setRequestHeader('Content-Type', 'application/x-www-form-urlencoded');</span><br><span class="line">xhr.send("method=name_isExist" + "&amp;name" + nameValue);</span><br></pre></td></tr></table></figure><h3 id="接收响应"><a href="#接收响应" class="headerlink" title="接收响应"></a>接收响应</h3><h4 id="readyState"><a href="#readyState" class="headerlink" title="readyState"></a>readyState</h4><ol><li>readyState 属性表示Ajax请求的当前状态<ol start="0"><li>0代表未初始化，没调用open方法</li><li>1代表正在加载，open()调用了而send()没有调用</li><li>2代表send()调用了，请求开始</li><li>3代表交互中，服务器正在发送响应</li><li>4代表完成</li></ol></li><li>readyState值的变化会出发 readystatechange 事件，如果把onreadystaechange事件赋给函数，则每次变换调用函数</li><li>readyState的值因浏览器不同有所差异，但是请求结束时，每个浏览器都会把 readyState 的值设为 4</li></ol><h4 id="status"><a href="#status" class="headerlink" title="status"></a>status</h4><pre><code>服务器发送的每一个响应也都有首部信息常用的状态码及其意义：1. 404 没有页面2. 403 禁止访问3. 500 内部服务器错误4. 200 一切正常5. 304 没有被修改在 XMLHttpRequest 对象中，服务器发送的状态码都保存在status属性中。</code></pre><h4 id="responseText"><a href="#responseText" class="headerlink" title="responseText"></a>responseText</h4><pre><code>XMLHttpRequest 的 responseText 属性包含了从服务器发送的数据。它是一个HTML，xml或普通文本当 readyState 属性值变成 4 时，responseText 属性才可以用，表明Ajax请求已经结束</code></pre><h2 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h2><pre><code>在服务器端Ajax时一门与语言无关的技术，在业务逻辑层使用何种服务器端语言都可以从服务器端接收数据的时候，那些数据必须以浏览器能够理解的格式来发送。服务器端的编程语言只能以如下三种格式返回数据：    1. XML    2. JSON    3. HTML</code></pre><h3 id="解析HTML"><a href="#解析HTML" class="headerlink" title="解析HTML"></a>解析HTML</h3><pre><code>HTML由一些普通文本组成，如果服务器通过XMLHttpRequest发送HTML，文本将存储在responseText属性中不必从responseText属性中读取数据。他已经是希望的格式，可以直接将它插入到页面中插入HTML代码最简单的方法是更新这个元素的innerHTML属性</code></pre><h4 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">document.getElementById(&quot;id&quot;).innerHTML = request.responseText;</span><br></pre></td></tr></table></figure><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><pre><code>1. 从服务器端发送的HTML代码在浏览器端不需要用Javascript解析2. HTML的可读性好3. HTML代码块与innerHTML 属性搭配，效率高</code></pre><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. 如需要通过Ajax更新一篇文档的多个部分，HTML不合适2. innnerHTML并非DOM标准（问题不大，现在浏览器大都兼容）</code></pre><h3 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h3><pre><code>1. 需要进行解析，之后再插入到HTML中2. 获得的 responseHTML 不能直接使用，必须先创建对应的节点作为容器    result = request.responseXML;3. xml可以使用DOM的方式进行解析    var name = result.getElementsByTagName(&quot;key&quot;)[0].firstChild.nodeValue;    var aNode = document.createElement(&quot;a&quot;);//创建a标签    aNode.appendChild(document.createTextNode(name));    aNode.href = &quot;url&quot;;</code></pre><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><pre><code>1. XMl是一种通用的数据格式2. 不必把数据强加到以定义好的格式中，而是要为数据自定义合适的标记3. 利用DOM可以完全掌控文档</code></pre><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><pre><code>1. 当浏览器接收到长的XML文件后，DOM解析可能会很复杂2. 如果文档来于服务器，就必须得到保证文档含有正确的首部信息。若文档类型不正确，那么responseXML的值将是空的</code></pre><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul><li><p>一种简单那的数据格式，比XML更轻巧。</p><ul><li>SON是JavaScript原生格式，这意味着JavaScript中处理JSON数据必须要任何特殊的API 或 工具包</li></ul></li><li><p>JSON的规则很简单：对象是一个无序的” ‘名称/值’对 “的集合。</p><ul><li>一个对象以”{“ 开始， “}”结束。每个“名称” 后跟一个 “:”冒号；“’名称/值’对”之间使用 “,” 逗号分隔</li></ul></li><li><p>Json用冒号来赋值</p></li><li>赋值语句用逗号分开</li><li>整个对象用大括号封装</li><li>可用大括号分装嵌套数据</li><li>对象描述中存储的数据可以是字符串，数字，布尔值，甚至函数方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> jsonObjec = &#123;</span><br><span class="line"><span class="string">"name"</span> : <span class="string">"test"</span>,</span><br><span class="line"><span class="string">"age"</span>:<span class="number">12</span>,</span><br><span class="line"><span class="string">"address"</span>:&#123;<span class="string">"city"</span>:<span class="string">"wuhan"</span>, <span class="string">"contury"</span>:<span class="string">"chind"</span>&#125;</span><br><span class="line"><span class="string">"teaching"</span> : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"this is a funtion"</span>); </span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">alert(jsonObjec.name);</span><br><span class="line">jsonObjec.teaching();</span><br></pre></td></tr></table></figure><ul><li>其实嘛，json可以用jar包打包，不用自己写</li></ul><h4 id="字符串转为json对象"><a href="#字符串转为json对象" class="headerlink" title="字符串转为json对象"></a>字符串转为json对象</h4><ul><li>Json保存在responseText中</li><li><p>需要借助JavaScript的eval语句</p><ul><li>函数eval会把一个字符串当做它的参数，然后这个字符串会被当做JavaScript代码来执行</li><li>var JsonResponse = xmlHttp.responseText;</li><li>var personJson = eval(“(“ + JsonResponse + “)”);</li><li>上述的 左括号和右括号 一定要加</li></ul></li><li><p>Json 提供了json.js 包，下载<a href="http://www.json.org/json.js" target="_blank" rel="noopener">http://www.json.org/json.js</a> 后，使用parseJSON()方法将字符串解析</p><ul><li>var JsonResponse = xmlHttp.responseText;</li><li>personJson = JsonResponse.parseJSON();</li></ul></li></ul><h2 id="看实战学操作"><a href="#看实战学操作" class="headerlink" title="看实战学操作"></a>看实战学操作</h2><h3 id="发送post请求，判断账户名是否存在"><a href="#发送post请求，判断账户名是否存在" class="headerlink" title="发送post请求，判断账户名是否存在"></a>发送post请求，判断账户名是否存在</h3><p><code>如果发送请求时带有参数，一般都用post请求</code></p><ul><li>请求头有个 <code>默认值</code> 是 Content-Type: application/x-www-form-urlencoded</li><li><p>open : xmlHttp.open(“post”, …..);</p></li><li><p>添加一步：设置Content-Type请求头：</p><blockquote><p>xmlHttp.setRequeestHeader(“Conten-Type”,”application/x-www-form-urlencoded”);</p></blockquote></li><li><p>send : xmlHttp.send(“username=zhanshan&amp;password=123”);</p></li></ul><h4 id="JSP的写法"><a href="#JSP的写法" class="headerlink" title="JSP的写法"></a>JSP的写法</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%--</span></span></span><br><span class="line"><span class="tag">  <span class="attr">User:</span> <span class="attr">cong</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Date:</span> <span class="attr">18-11-22</span></span></span><br><span class="line"><span class="tag">  <span class="attr">Time:</span> 下午<span class="attr">3:48</span></span></span><br><span class="line"><span class="tag">  <span class="attr">To</span> <span class="attr">change</span> <span class="attr">this</span> <span class="attr">template</span> <span class="attr">use</span> <span class="attr">File</span> | <span class="attr">Settings</span> | <span class="attr">File</span> <span class="attr">Templates.</span></span></span><br><span class="line"><span class="tag"><span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Ajax<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.1.0.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">"post"</span> <span class="attr">action</span>=<span class="string">""</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"can1"</span> <span class="attr">style</span>=<span class="string">"color: red"</span> &gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>密 码：<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">id</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"注册"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> username = <span class="built_in">document</span>.getElementById(<span class="string">"username"</span>);</span></span><br><span class="line"><span class="javascript">        <span class="function"><span class="keyword">function</span> <span class="title">createXMLHttpRequest</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="keyword">new</span> XMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Msxm12.XMLHTTP"</span>);</span></span><br><span class="line"><span class="javascript">                &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">try</span> &#123;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">return</span> <span class="keyword">new</span> ActiveXObject(<span class="string">"Microsoft.XMLHTTP"</span>);</span></span><br><span class="line"><span class="javascript">                    &#125; <span class="keyword">catch</span> (e) &#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">"浏览器太几把差了"</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">throw</span> e;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="javascript">        username.onblur = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 当失去焦点的时候 触发函数</span></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 获取异步对象</span></span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> xmlHttp = createXMLHttpRequest();</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 打开链接</span></span></span><br><span class="line"><span class="javascript">            xmlHttp.open(<span class="string">"post"</span>, <span class="string">"Exist"</span>, <span class="literal">true</span>);</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 设置请求头</span></span></span><br><span class="line"><span class="javascript">            xmlHttp.setRequestHeader(<span class="string">"Content-Type"</span>, <span class="string">"application/x-www-form-urlencoded"</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 发送请求 给出请求体</span></span></span><br><span class="line"><span class="javascript">            xmlHttp.send(<span class="string">"username="</span> + username.value);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">            <span class="comment">// 给xmlHttp的onreadystatechange事件注册监听</span></span></span><br><span class="line"><span class="javascript">            xmlHttp.onreadystatechange = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span> (xmlHttp.readyState === <span class="number">4</span>) &#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">if</span> (xmlHttp.status === <span class="number">200</span>)&#123;</span></span><br><span class="line"><span class="javascript">                        <span class="comment">// 4 代表 运行完成  200 代表状态码</span></span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> text = xmlHttp.responseText;</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">var</span> can1 = <span class="built_in">document</span>.getElementById(<span class="string">"can1"</span>);</span></span><br><span class="line"><span class="javascript">                        <span class="keyword">if</span> (text == <span class="string">"1"</span>) &#123;</span></span><br><span class="line"><span class="javascript">                            can1.innerHTML = <span class="string">"用户名已存在"</span></span></span><br><span class="line"><span class="javascript">                        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">                            can1.innerHTML = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">                        &#125;</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">                        alert(<span class="string">"false"</span>);</span></span><br><span class="line"><span class="undefined">                    &#125;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="Servlet写法"><a href="#Servlet写法" class="headerlink" title="Servlet写法"></a>Servlet写法</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.ajax.test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.annotation.WebServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServlet;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Servlet implementation class Exist</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@WebServlet</span>(<span class="string">"/Exist"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Exist</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">1L</span>;</span><br><span class="line">       </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@see</span> HttpServlet#HttpServlet()</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Exist</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">// TODO Auto-generated constructor stub</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// response.getWriter().append("Served at: ").append(request.getContextPath());</span></span><br><span class="line">System.out.println(<span class="string">"get"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@see</span> HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"><span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line"><span class="comment">// doGet(request, response);</span></span><br><span class="line">System.out.println(<span class="string">"post"</span>);</span><br><span class="line">request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">response.setContentType(<span class="string">"text/html;charaset=utf-8"</span>);</span><br><span class="line">String username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line"><span class="keyword">if</span>(username.equalsIgnoreCase(<span class="string">"lc"</span>)) &#123;</span><br><span class="line">response.getWriter().print(<span class="string">"1"</span>);</span><br><span class="line">System.out.println(<span class="string">"1"</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">response.getWriter().print(<span class="string">"0"</span>);</span><br><span class="line">System.out.println(<span class="string">"0"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="响应内容为XML"><a href="#响应内容为XML" class="headerlink" title="响应内容为XML"></a>响应内容为XML</h3><ul><li>首先就要设置响应头</li><li>服务器端：<ul><li>Contentype 设置为 text/xml;charset=utf-8</li></ul></li><li>客户端：<ul><li>var doc = xmlHttp.responseXML; //得到的是Documented对象</li><li>获取服务器的响应结果</li><li>使用dom运用</li></ul></li></ul><h2 id="JQuery的Ajax"><a href="#JQuery的Ajax" class="headerlink" title="JQuery的Ajax"></a>JQuery的Ajax</h2><ul><li>jQuery对Ajax操作进行了封装<ul><li>在jQuery中最底层的方式是 $.ajax()</li><li>第二层是load()，$.get() 和 $.post()</li><li>第三层是$.getScript()和$.getJSON()</li></ul></li></ul><h3 id="ajax-方法（底层接口）"><a href="#ajax-方法（底层接口）" class="headerlink" title="ajax 方法（底层接口）"></a>ajax 方法（底层接口）</h3><ul><li>$.ajax(url,setttring)<ul><li>url 参数地址</li><li>setttring 例如下面（包括大括号都是）<ul><li>{type:’post’, data : {id : 1, name : “test”} ,beforeSend:function(xhr){},success:function (data){},error(xhr){},conplete:function(){}}</li><li>data 为 服务端的响应体</li><li>success 为 响应成功的时候的回调函数<ul><li>其中 data 的数据类型 会通过 服务端的 设置 自动转换</li></ul></li><li>data 为 传递参数<ul><li>post 通过请求体传递</li><li>get 通过 url 传递</li></ul></li><li>通过设置dataType 设置 返回的参数类型</li><li>error 请求不正常(状态码不为200)的时候执行的函数</li><li>complete 请求完成(readystatus 到达 4 )时执行的回调函数</li><li>beforeSend 在 执行 xmlHtpp.open 之前调用的回调函数</li></ul></li><li>setting 还有其他参数 放在下面的链接里面咯<ul><li><a href="https://www.jquery123.com/jQuery.ajax/" target="_blank" rel="noopener">jQuery.Ajax</a> </li></ul></li><li>其实嘛 你也可以吧 url 放入 setting 里面 </li></ul></li></ul><h4 id="为什么使用jQuery呢"><a href="#为什么使用jQuery呢" class="headerlink" title="为什么使用jQuery呢"></a>为什么使用jQuery呢</h4><p><code>在访问一个不存在的页面时 会返回一个404页面</code></p><ul><li>如果用原生js<ul><li>返回的是一个404页面代码 </li><li>即 一串 html 代码</li></ul></li><li>如果是jQuery<ul><li>返回空 </li></ul></li></ul><h3 id="load方法"><a href="#load方法" class="headerlink" title="load方法"></a>load方法</h3><ul><li>load()<ul><li><code>载入远程HTML文件代码并插入至DOM中</code></li><li>load(url,[data],[callback]);</li><li>url 待装入HTML网页的网址，必须是JSON格式，一旦url不为空，那么请求方式就默认改为POST</li><li>data（可选） 发送至服务器的 key/value 数据，在jQuery1.3中也可以接受一个字符串</li><li>callback（可选）载入成功时回调函数 </li><li>如果只需要加载目标HTML网页内的某些元素，则可以通过load()方法的URL参数来达到目的<ul><li>通过URL参数制定选择符就可以方便的从加载过来的HTML文档中挑选内容</li><li>语法结构是 “url selector”(注意：url 和 选择器 中间有个空格)</li><li>如果返回的是&lt;h2&gt;文本1&lt;/h2&gt;&lt;h3&gt;文本2&lt;/h3&gt;</li><li>如果url  后面 加上 “ h2” ，那么就只会得到 h2 部分</li></ul></li><li>传递方式： load()方法的传递参数根据参数data来自动自定<ul><li>如果没有参数传递，采用GET方式传递，否则POST</li></ul></li><li>对于必须在加载完才能继续的操作，load()方法提供了回调函数<ul><li>该回调函数有三个参数<ul><li>data 代表请求返回内容</li><li>textStatus 代表请求状态</li><li>XMLHttpRequest 代表请求状态</li></ul></li></ul></li><li>任何一个节点都可以使用load()方法来加载Ajax，结果直接插入到html节点中</li></ul></li></ul><h3 id="get和post-方法"><a href="#get和post-方法" class="headerlink" title="get和post 方法"></a>get和post 方法</h3><ul><li><p>$.get() （或$.post()）方法</p></li><li><p>$.get() 方法使用GET方式来进行异步请求</p><ul><li>它的结构是 $.get(url, [data], [callback], [type]);</li><li>url，String类型，请求HTML页面的URL地址</li><li>data，Object类型，发送到服务器的key/value数据会作为Query/String附加到URL中</li><li>callback， function类型，载入成功时的回调函数</li><li>type，String类型，服务器返回内容的格式，包括xml,html,script,json等 </li></ul></li><li><p>$.get()方法的回调函数只有两个参数</p><ul><li>data， 代表返回的内容，可以是一个XML文档，JSON文件，HTMl片段等</li><li>textstatus代表请求状态，其值可能是<ol><li>succuss</li><li>error</li><li>notmodify</li><li>timeout</li></ol></li></ul></li><li>$.get()和$.post()方法是jQuery中的全局函数，而find()等方法都是对jQuery对象进行操作的方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> url = <span class="keyword">this</span>.href;</span><br><span class="line"><span class="keyword">var</span> args= &#123;<span class="string">"time"</span> : <span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span><br><span class="line">$.post(url, args, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line"><span class="keyword">var</span> name = $(data).find(<span class="string">"name"</span>).text();</span><br><span class="line"><span class="keyword">var</span> email = $(data).find(<span class="string">"email"</span>).text();</span><br><span class="line"><span class="keyword">var</span> website = $(data).find(<span class="string">"website"</span>).text();</span><br><span class="line">&#125;, <span class="string">"JSON"</span>);</span><br><span class="line"></span><br><span class="line">$.getJSON(url, args, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123; <span class="comment">// 这里直接通过getJSON 将 data 转为JSON格式</span></span><br><span class="line"><span class="keyword">var</span> name = data.person.name;</span><br><span class="line"><span class="keyword">var</span> email = data.person.email;</span><br><span class="line"><span class="keyword">var</span> website = data.person.website;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="Ajax的全局事件"><a href="#Ajax的全局事件" class="headerlink" title="Ajax的全局事件"></a>Ajax的全局事件</h3><ul><li><p>所谓全局事件，就是在所有ajax调用的时候，都会执行的事件</p><ul><li>例如：我有一个请求开始的动画，我整个页面写了100个Ajax</li><li>有一天 我想把所有的动画全部改了 我要改100个</li><li>全局事件就是用在这个地方的</li></ul></li><li><p>.ajaxComplete()</p><ul><li>当Ajax请求完成后注册一个回调函数。这是一个 AjaxEvent。</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxError()</p><ul><li>Ajax请求出错时注册一个回调处理函数，这是一个 Ajax Event。</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxSend()</p><ul><li>在Ajax请求发送之前绑定一个要执行的函数，这是一个 Ajax Event.</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxStart()</p><ul><li>在AJAX 请求刚开始时执行一个处理函数。 这是一个 Ajax Event.</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxStop()</p><ul><li>在AJAX 请求完成时执行一个处理函数。 这是一个 Ajax Event。</li><li>Ajax &gt; 全局 Ajax 事件处理器</li></ul></li><li><p>.ajaxSuccess()</p><ul><li>绑定一个函数当 Ajax 请求成功完成时执行。 这是一个Ajax Event.</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ajaxComplete(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> $( <span class="string">".log"</span> ).text( <span class="string">"Triggered ajaxComplete handler."</span> );</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="jQuery-Servlet实现-验证用户名是否存在"><a href="#jQuery-Servlet实现-验证用户名是否存在" class="headerlink" title="jQuery + Servlet实现 验证用户名是否存在"></a>jQuery + Servlet实现 验证用户名是否存在</h3><ul><li>HTML 写法</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">language</span>=<span class="string">"java"</span> <span class="attr">contentType</span>=<span class="string">"text/html; charset=UTF-8"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">pageEncoding</span>=<span class="string">"UTF-8"</span>%&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>检查用户名是否注册<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/JS/jquery-1.12.4.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#usernmae"</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="comment">//当value值改变时触发函数</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> val = $(<span class="keyword">this</span>).val();<span class="comment">//获取值</span></span></span><br><span class="line"><span class="javascript">val = $.trim(val);<span class="comment">//去除前后的空格</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">if</span>(val != <span class="string">""</span>)&#123;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> url = <span class="string">"$&#123;pageContext.request.contextPath&#125;/Exist"</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> args = &#123;<span class="string">"username"</span> : val, <span class="string">"time"</span>:<span class="keyword">new</span> <span class="built_in">Date</span>()&#125;;</span></span><br><span class="line"><span class="javascript">$.post(url, args, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">$(<span class="string">"#message"</span>).html(data);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> &gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">UserName:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"usernmae"</span> /&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"message"</span> <span class="attr">style</span>=<span class="string">"color:red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>/&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"submit"</span> /&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>Servlet写法</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">package com.ajax.test;</span><br><span class="line"></span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.util.Arrays;</span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">import javax.servlet.ServletException;</span><br><span class="line">import javax.servlet.annotation.WebServlet;</span><br><span class="line">import javax.servlet.http.HttpServlet;</span><br><span class="line">import javax.servlet.http.HttpServletRequest;</span><br><span class="line">import javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * Servlet implementation class Exist</span><br><span class="line"> */</span><br><span class="line">@WebServlet(&quot;/Exist&quot;)</span><br><span class="line">public class Exist extends HttpServlet &#123;</span><br><span class="line">private static final long serialVersionUID = 1L;</span><br><span class="line">       </span><br><span class="line">    /**</span><br><span class="line">     * @see HttpServlet#HttpServlet()</span><br><span class="line">     */</span><br><span class="line">    public Exist() &#123;</span><br><span class="line">        super();</span><br><span class="line">        // TODO Auto-generated constructor stub</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doGet(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doGet(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;get&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @see HttpServlet#doPost(HttpServletRequest request, HttpServletResponse response)</span><br><span class="line"> */</span><br><span class="line">protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException &#123;</span><br><span class="line">// TODO Auto-generated method stub</span><br><span class="line">System.out.println(&quot;post&quot;);</span><br><span class="line">String username = request.getParameter(&quot;username&quot;);</span><br><span class="line">List&lt;String&gt; userNames = Arrays.asList(&quot;AAA&quot;,&quot;BBB&quot;,&quot;CCC&quot;);</span><br><span class="line">response.setCharacterEncoding(&quot;utf-8&quot;);</span><br><span class="line">response.setContentType(&quot;text/html;charaset=utf-8&quot;);</span><br><span class="line">if (userNames.contains(username)) &#123;</span><br><span class="line">response.getWriter().print(&quot;改用户名以存在&quot;);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">response.getWriter().print(&quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">System.out.println(&quot;请求已发送&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="使用jackson包去生成json"><a href="#使用jackson包去生成json" class="headerlink" title="使用jackson包去生成json"></a>使用jackson包去生成json</h2><ol><li>导入jar包</li><li>创建ObjectMappter 对象<ul><li>ObjectMapper mapper = new ObjectMapper();</li></ul></li><li>调用 mapper 的 writerValueAsString() 方法 把一个对象转为一个 Json 字符串</li></ol><h3 id="先写好一个class"><a href="#先写好一个class" class="headerlink" title="先写好一个class"></a>先写好一个class</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Customer</span></span>&#123;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String id;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Customer</span><span class="params">(String name, Stirng id)</span></span>&#123;</span><br><span class="line"><span class="keyword">this</span>.name = name;</span><br><span class="line"><span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getBrithday</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"2018.12.01"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hubei-wuhan"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写一个main类去调用上述Customer"><a href="#写一个main类去调用上述Customer" class="headerlink" title="写一个main类去调用上述Customer"></a>写一个main类去调用上述Customer</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> JsonGenerationException, JsonMappingException, IOE......</span>&#123;</span><br><span class="line">ObjectMapper mapper = <span class="keyword">new</span> ObjectMapper();</span><br><span class="line"></span><br><span class="line">Customer customer = <span class="keyword">new</span> Customer(<span class="string">"Name"</span>, <span class="string">"1001"</span>);</span><br><span class="line">String jsonStr = mapper.writeValueAsStirng(customer);</span><br><span class="line">System.out.println(jsonStr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><code>注意</code></p><ul><li>JackSon 使用 getter 方法来定位Json 对象的属性</li><li>自行尝试上述的代码，你会发现 没有定义为 string 的 address 和 birthday 也会出现在最后的json中</li><li>因为 addrss 和 birthday 都 定义了 get 方法</li><li>即 只要是定义了 get 方法的，其返回值都会被放入json对象中</li><li>如果 getName() 修改 为 getCustName()，那么最后放入json的键的名字就是 “csunstName”</li></ul></li><li><p>可以通过在CLASS中添加注解来使某些get方法不放入json对象中</p><ul><li>@JsonIgnore 放在 get 函数前面</li></ul></li></ul><h2 id="jQuery-block-ui"><a href="#jQuery-block-ui" class="headerlink" title="jQuery block ui"></a>jQuery block ui</h2><p>jQuery BlockUI 插件可以在不同锁定浏览器的同时，模拟同步模式下发起Ajax请求的行为<br>该插件激活时，会阻止用户在页面进行的操作，直到插件被关闭<br>BlockUI通过向DOM中添加元素实现其外观和组织用户交互的行为。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span> <span class="attr">src</span>=<span class="string">"http://malsup.github.io/min/jquery.blockUI.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="阻止页面交互"><a href="#阻止页面交互" class="headerlink" title="阻止页面交互"></a>阻止页面交互</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.blockUI();</span><br></pre></td></tr></table></figure><h3 id="自定义消息阻塞UI"><a href="#自定义消息阻塞UI" class="headerlink" title="自定义消息阻塞UI"></a>自定义消息阻塞UI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.blockUI(&#123;message:&apos;&lt;h1&gt;&lt;img src=&quot;busy.gif&quot; /&gt;Just a moment...&lt;/h1&gt;&apos;&#125;);</span><br></pre></td></tr></table></figure><h3 id="自定义样式阻塞UI"><a href="#自定义样式阻塞UI" class="headerlink" title="自定义样式阻塞UI"></a>自定义样式阻塞UI</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.blockUI(&#123;css:&#123;backgroundColor: &apos;red&apos;; color:&apos;#fff&apos;&#125;&#125;);</span><br></pre></td></tr></table></figure><h3 id="解除对页面的遮罩"><a href="#解除对页面的遮罩" class="headerlink" title="解除对页面的遮罩"></a>解除对页面的遮罩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$.unblockUI();</span><br></pre></td></tr></table></figure><h3 id="使用缺省设置对所有的ajax请求都使用UI遮罩"><a href="#使用缺省设置对所有的ajax请求都使用UI遮罩" class="headerlink" title="使用缺省设置对所有的ajax请求都使用UI遮罩"></a>使用缺省设置对所有的ajax请求都使用UI遮罩</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(document).ajaxStart($.blockUI).ajaxStop($.unblockUI);</span><br></pre></td></tr></table></figure><h3 id="学习学习"><a href="#学习学习" class="headerlink" title="学习学习"></a>学习学习</h3><p><a href="好东西">http://bookshadow.com/weblog/2014/09/26/jquery-blockui-js-introduction/</a> </p><h4 id="全局覆盖"><a href="#全局覆盖" class="headerlink" title="全局覆盖"></a>全局覆盖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// change message border</span><br><span class="line">$.blockUI.defaults.css.border = &apos;5px solid red&apos;;</span><br><span class="line"></span><br><span class="line">// make fadeOut effect shorter</span><br><span class="line">$.blockUI.defaults.fadeOut = 200;</span><br></pre></td></tr></table></figure><h4 id="局部覆盖"><a href="#局部覆盖" class="headerlink" title="局部覆盖"></a>局部覆盖</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// change message border</span><br><span class="line">$.blockUI(&#123; css: &#123; border = &apos;5px solid red&apos;&#125; &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// make fadeOut effect shorter</span><br><span class="line">$.unblockUI(&#123; fadeOut: 200 &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// use a different message</span><br><span class="line">$.blockUI(&#123; message: &apos;Hold on!&apos; &#125;);</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">// use a different message</span><br><span class="line">$(&apos;#myDiv&apos;).block(&#123; message: &apos;Processing...&apos; &#125;);</span><br></pre></td></tr></table></figure><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><ul><li>xmlHttp.response 和 xmlHttp.responseText 都是获取响应<ul><li>responseText 获取的永远是以文本格式，字符串形式的响应体</li><li>response 会 根据 responseType的变化而变化<ul><li>xmlHttp.responseType = “json” 则 response 则为 json 格式</li><li>通过代码告诉请求代理对象服务器端响应的是JSON对象 </li></ul></li></ul></li></ul><h3 id="模板引擎的使用（这里用的是art-template）"><a href="#模板引擎的使用（这里用的是art-template）" class="headerlink" title="模板引擎的使用（这里用的是art-template）"></a>模板引擎的使用（这里用的是art-template）</h3><ul><li>首先我们要选择模板引擎<ul><li>市面上的模板引擎很多<ul><li>art-template（国产）</li><li>Handlebars（最火）</li><li>ejs</li><li>doT</li><li>swig（不维护了）</li><li>……</li></ul></li></ul></li><li>下载模板引擎JS文件</li><li>引入到页面中<ul><li>&lt;script src=”js/template-web.js”&gt;&lt;/script&gt;</li></ul></li><li>准备一个模板</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;script id = <span class="string">"tmple"</span> type=<span class="string">"text/javascript"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br><span class="line"><span class="comment">// 如果 type 不为 text/javascript 那么 标签内部的内容不会作为 js语句 执行</span></span><br><span class="line"><span class="string">`</span></span><br></pre></td></tr></table></figure><ul><li>准备一个数据</li><li>通过模板引擎的JS文件提供的一个函数/方法 将模板和数据整合的到渲染结果HTML</li><li>将渲染结果的HTML设置到某个元素的innderHTML中</li></ul><h2 id="跨域"><a href="#跨域" class="headerlink" title="跨域"></a>跨域</h2><ul><li>跨域可以说Ajax没有一点关系，也可以说与Ajax有着绝对的联系</li></ul><h3 id="同源策略"><a href="#同源策略" class="headerlink" title="同源策略"></a>同源策略</h3><pre><code>同源策略是浏览器的一种安全策略所谓同源是指：域名，协议，端口 完全相同只有同源的地址才可以通过Ajax的方式请求不同源地址之间，默认不能相互进行Ajax请求不同源地址之间的请求我们称之为跨域请求</code></pre><p>不同源则报错：<font style="color:red">No ‘Access-Control-Allow-Origin’ header is present on the requested resource</font></p><ul><li>翻译过来就是 目标地址 不允许不同源的地址对其进行Ajax操作<h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是Ajax&quot;&gt;&lt;a href=&quot;#什么是Ajax&quot; class=&quot;headerlink&quot; title=&quot;什么是Ajax&quot;&gt;&lt;/a&gt;什么是Ajax&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;允许浏览器与服务器通信而无须刷新当前页面的技术都叫Ajax
异步的Js和XML的通信
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Cocos2dx基础</title>
    <link href="http://yoursite.com/2017/11/04/Cocos2dx%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/11/04/Cocos2dx基础/</id>
    <published>2017-11-04T11:43:40.000Z</published>
    <updated>2019-02-10T10:19:13.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Cocos2dx-网络通信"><a href="#Cocos2dx-网络通信" class="headerlink" title="Cocos2dx-网络通信"></a>Cocos2dx-网络通信</h1><ol><li>Socket通讯</li><li>http协议</li><li>WebSocket协议     </li></ol><ul><li>Cocos2d-x封装了3个类来处理HTTP请求<ul><li>HttpRequest</li><li>HttpClient</li><li>HttpResponse</li></ul></li><li>他们在命名空间cocos2d::network中定义</li><li>WebSocket protocol是HTML5一种新的协议<ul><li>实现了浏览器和服务器全双工通信</li><li>实现浏览器和服务器的即时通讯</li></ul></li></ul><h2 id="使用Http协议进行网络通信"><a href="#使用Http协议进行网络通信" class="headerlink" title="使用Http协议进行网络通信"></a>使用Http协议进行网络通信</h2><ol><li>HttpRequest</li><li>HttpClient</li><li>HttpRespose</li></ol><ul><li>在使用上述三个类的时候，必须遵守一定的流程<ol><li>创建HttpRequest实例</li><li>设置请求方式-Get/Post等</li><li>设置请求地址和发送数据</li><li>设置响应回调函数，在回调函数中处理获取的数据</li><li>创建HttpClient实例，发送请求</li><li>释放连接</li></ol></li></ul><h3 id="HttpRequest"><a href="#HttpRequest" class="headerlink" title="HttpRequest"></a>HttpRequest</h3><ul><li>是一种数据类型</li><li><p>提供了一些定义或获取HTTP请求的参数的方法</p></li><li><p>常用方法</p><ul><li>设置请求连接<ul><li>void setUrl(const char *url)</li></ul></li><li>设置请求类型<ul><li>void setRequestType(Type type)</li><li>Type是一个枚举类型</li><li>enum class Type{<ul><li>GET,</li><li>POST,</li><li>PUT,</li><li>DELETE,</li><li>UNKOW,</li></ul></li><li>};</li></ul></li><li>设置回调函数<ul><li>void setResponseCallback(Ref *pTarget, SEL_HttpResponse pSelector)</li></ul></li><li>设置请求的数据，参数buffer是提交的数据，len是请求数据的长度<ul><li>void serRequestData(const char *buffer, unsigned int len)</li></ul></li></ul></li></ul><h3 id="HttpClient"><a href="#HttpClient" class="headerlink" title="HttpClient"></a>HttpClient</h3><ul><li>在创建完HttpRequest之后，就需要创建HttpClient对象</li><li>HttpClient对象控制请求相关的参数<ul><li>发送请求</li><li>设置请求超时时间</li><li>……</li></ul></li><li>使用单例模式，是唯一实例</li><li>常用方法<ul><li>发送请求<ul><li>send(Http Request* request)</li></ul></li><li>设置连接超时时间<ul><li>setTimeoutForConnect(int value)</li></ul></li></ul></li></ul><h3 id="HttpRespose"><a href="#HttpRespose" class="headerlink" title="HttpRespose"></a>HttpRespose</h3><ul><li>包含服务器返回的数据等信息</li><li>使用HTTPResponse提供的方法可获取这些数据<ul><li>获取请求返回的数据<ul><li>std::vector<char>* getResponseData();</char></li></ul></li><li>获取返回状态（200,300,404,500…）<ul><li>getResponseState()</li></ul></li><li>判断是否返回成功<ul><li>issucced()</li></ul></li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入头文件</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"network/HttpRequest.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"network/HttpClient.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"network/HttpResponse.h"</span></span></span><br><span class="line"><span class="comment">// 引入名空间</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> cocos2d::network;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取HttpRequest对象</span></span><br><span class="line"><span class="keyword">auto</span> request = <span class="keyword">new</span> HttpRequest();</span><br><span class="line"><span class="comment">// 设置请求连接</span></span><br><span class="line">request-&gt;setUrl(<span class="string">"http://httpbin.org/ip"</span>);</span><br><span class="line"><span class="comment">// 设置请求方式</span></span><br><span class="line">request-&gt;setRequestType(HttpRequest::Type::GET);</span><br><span class="line"><span class="comment">// 设置发送数据</span></span><br><span class="line"><span class="keyword">char</span> data[<span class="number">50</span>] = <span class="string">"data"</span>;</span><br><span class="line">request-&gt;setRequestData(data, <span class="built_in">strlen</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置回调函数</span></span><br><span class="line">request-&gt;setResponseCallback(CC_CALLBACK_2(HelloWorld::ConnetIntnet,<span class="keyword">this</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取唯一的clien实例</span></span><br><span class="line"><span class="keyword">auto</span> client = HttpClient::getInstance();</span><br><span class="line"><span class="comment">// 设置超时时间</span></span><br><span class="line">client-&gt;setTimeoutForConnect(<span class="number">60</span>);</span><br><span class="line"><span class="comment">// 设置读取时间</span></span><br><span class="line">client-&gt;setTimeoutForRead(<span class="number">100</span>);</span><br><span class="line"><span class="comment">// 发送请求</span></span><br><span class="line">client-&gt;send(request);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HelloWorld::ConnetIntnet(HttpClient * client, HttpResponse * response)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"response code = %d"</span>, response-&gt;getResponseCode());</span><br><span class="line"><span class="keyword">if</span> (response-&gt;isSucceed())&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">char</span>&gt; *data = response-&gt;getResponseData();</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">stringstream</span> oss;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; data-&gt;size(); i++) &#123;</span><br><span class="line">oss &lt;&lt; (*data)[i];</span><br><span class="line">&#125;</span><br><span class="line">CCLOG(<span class="string">" response data is %s"</span>, oss.str().c_str());</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">CCLOG(<span class="string">"error msg is : %s"</span>, response-&gt;getErrorBuffer());</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><ul><li>很简单</li><li>修改上述的部分代码即可</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">request-&gt;setUrl(<span class="string">"http://httpbin.org/post"</span>);</span><br><span class="line"><span class="comment">// 设置请求方式</span></span><br><span class="line">request-&gt;setRequestType(HttpRequest::Type::POST);</span><br><span class="line"><span class="comment">// 设置发送数据</span></span><br><span class="line"><span class="keyword">char</span> data[<span class="number">50</span>] = <span class="string">"controller=cocos2d&amp;username=test"</span>;</span><br><span class="line">request-&gt;setRequestData(data, <span class="built_in">strlen</span>(data));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后加上</span></span><br><span class="line">request-&gt;release();</span><br></pre></td></tr></table></figure><ul><li>观察输出结构<ul><li>form 表单中 controller 就是 cocos2d，username 是 test</li></ul></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">response code = 200</span><br><span class="line"> response data is &#123;</span><br><span class="line">  "args": &#123;&#125;, </span><br><span class="line">  "data": "", </span><br><span class="line">  "files": &#123;&#125;, </span><br><span class="line">  "form": &#123;</span><br><span class="line">    "controller": "cocos2d", </span><br><span class="line">    "username": "test"</span><br><span class="line">  &#125;, </span><br><span class="line">  "headers": &#123;</span><br><span class="line">    "Accept": "*/*", </span><br><span class="line">    "Accept-Encoding": "identity", </span><br><span class="line">    "Connection": "close", </span><br><span class="line">    "Content-Length": "32", </span><br><span class="line">    "Content-Type": "application/x-www-form-urlencoded", </span><br><span class="line">    "Host": "httpbin.org"</span><br><span class="line">  &#125;, </span><br><span class="line">  "json": null, </span><br><span class="line">  "origin": "61.136.151.254", </span><br><span class="line">  "url": "http://httpbin.org/post"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="设置Content-Type"><a href="#设置Content-Type" class="headerlink" title="设置Content-Type"></a>设置Content-Type</h4><ul><li><p>POST请求需要设置 Content-type的格式</p><ul><li>application/html 或者 xml 或 json</li><li>默认为text/html</li></ul></li><li><p>一般来说 Content-Type:application/html;charset=uft-8</p></li></ul><h4 id="设置请求头信息"><a href="#设置请求头信息" class="headerlink" title="设置请求头信息"></a>设置请求头信息</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">set</span>::<span class="built_in">vector</span>&lt;<span class="built_in">std</span>::<span class="built_in">string</span>&gt; header;</span><br><span class="line">header.push_back(<span class="string">"Content-Type:application/html;charset=utf-8"</span>);</span><br><span class="line">request-&gt;setHeaders(header);</span><br><span class="line"><span class="comment">// 具体情况具体分析吧，有的服务器使用的是XML，有的是HTML，有的是Json</span></span><br></pre></td></tr></table></figure><h2 id="使用WebSocket发送请求"><a href="#使用WebSocket发送请求" class="headerlink" title="使用WebSocket发送请求"></a>使用WebSocket发送请求</h2><h3 id="WebSocket"><a href="#WebSocket" class="headerlink" title="WebSocket"></a>WebSocket</h3><ul><li>WebSocket类了跟websocket相关操作的方法。他的作用包括<ol><li>创建socket对象<ul><li>new 方法</li></ul></li><li>向服务器发送数据，可以是文本数据，也可以是二进制数据<ul><li>send方法</li></ul></li><li>半段连接状态</li><li>等等</li></ol></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">enum</span> <span class="class"><span class="keyword">class</span> <span class="title">ErrorCode</span>&#123;</span></span><br><span class="line">TIME_OUT,<span class="comment">// 连接超时</span></span><br><span class="line">CONNECTION_FAILURE, <span class="comment">// 连接失败</span></span><br><span class="line">UNKNOW, <span class="comment">// 为止错误</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">cocos2d::network::WebSocket* wsSendText = <span class="keyword">new</span> network::WebSocket();</span><br><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"></span><br><span class="line">wsSendText-&gt;init(*<span class="keyword">this</span>, <span class="string">"ws://echo.websocket.org"</span>);</span><br><span class="line"><span class="comment">// 初始化请求地址</span></span><br><span class="line"></span><br><span class="line">weSendText-&gt;send(<span class="string">"hello WebSocket, I'm a text message"</span>);</span><br><span class="line"><span class="comment">// 发送数据</span></span><br></pre></td></tr></table></figure><h3 id="WebSocket-Delegete"><a href="#WebSocket-Delegete" class="headerlink" title="WebSocket::Delegete"></a>WebSocket::Delegete</h3><ul><li>类似Socket</li><li>WebSocket::Delegete提供了四个纯虚函数</li><li>在使用WebSocket时，要先继承Delegete类，实现四个纯虚函数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onOpen</span><span class="params">(WebSocket* ws)</span></span>;</span><br><span class="line"><span class="comment">// 当打开websocket连接时调用</span></span><br><span class="line"><span class="comment">// 即WebSocket new 出来的时候调用的函数</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onMessage</span><span class="params">(WebSocket* ws, <span class="keyword">const</span> Data&amp; data)</span></span>;</span><br><span class="line"><span class="comment">// 当接收到数据时调用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">onClose</span><span class="params">(WebSocket* ws)</span></span>;</span><br><span class="line"><span class="comment">// 当关闭连接时调用</span></span><br><span class="line"></span><br><span class="line"><span class="function">voirtual <span class="keyword">void</span> <span class="title">onError</span><span class="params">(WebSocket* ws, <span class="keyword">const</span> ErrorCode&amp; error)</span></span>;</span><br><span class="line"><span class="comment">// 当发送数据但没有建立连接，或者收到断开连接信号时调用</span></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">wstest = <span class="keyword">new</span> WebSocket();</span><br><span class="line">wstest-&gt;init(*<span class="keyword">this</span>,<span class="string">"ws://echo.websocket.org"</span>);</span><br><span class="line">wstest-&gt;send(<span class="string">"hello world"</span>);</span><br><span class="line">wstest-&gt;close();</span><br></pre></td></tr></table></figure><h1 id="Box2D物理引擎在Cocos的应用"><a href="#Box2D物理引擎在Cocos的应用" class="headerlink" title="Box2D物理引擎在Cocos的应用"></a>Box2D物理引擎在Cocos的应用</h1><ul><li>为了能够使用BOX2D，所以需要在vs中配置<ul><li>右键工程名，选择属性</li><li>在常规中 设置 附加包含目录（第一个）<ul><li>修改 $(EngineRoot)external\chipmunk\include\chipmunk </li><li>为 $(EngineRoot)external\Box2D\include\</li></ul></li><li>在 预处理 器中 设置 预处理器定义<ul><li>修改 CC_ENABLE_CHIPMUNK_INTEGRATION= 1</li><li>为 CC_ENABLE_BOX2D_INTEGRATION= 1</li></ul></li></ul></li></ul><h2 id="创建世界，设置边界"><a href="#创建世界，设置边界" class="headerlink" title="创建世界，设置边界"></a>创建世界，设置边界</h2><ul><li>HelloWorld.cpp文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"HelloWorldScene.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SimpleAudioEngine.h"</span></span></span><br><span class="line"></span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line">Scene* HelloWorld::createScene()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> HelloWorld::create();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HelloWorld::~HelloWorld()</span><br><span class="line">&#123;</span><br><span class="line">CC_SAFE_DELETE(world);<span class="comment">//删除对象 并指向一个NULL</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">problemLoading</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* filename)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Error while loading: %s\n"</span>, filename);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"Depending on how you compiled you might have to add 'Resources/' in front of filenames in HelloWorldScene.cpp\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> HelloWorld::init()</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> ( !Scene::init() )</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;initpjysics();</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;scheduleUpdate();</span><br><span class="line"></span><br><span class="line">EventListenerTouchOneByOne *listener = EventListenerTouchOneByOne::create();</span><br><span class="line">listener-&gt;onTouchBegan = CC_CALLBACK_2(HelloWorld::onTouchBegan, <span class="keyword">this</span>);</span><br><span class="line">_eventDispatcher-&gt;addEventListenerWithSceneGraphPriority(listener, <span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> visibleSize = Director::getInstance()-&gt;getVisibleSize();</span><br><span class="line">    Vec2 origin = Director::getInstance()-&gt;getVisibleOrigin();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HelloWorld::update(<span class="keyword">float</span> dt)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 同步精灵与物体</span></span><br><span class="line"><span class="keyword">float</span> timeStep = <span class="number">0.03f</span>;</span><br><span class="line">int32 velocityIterations = <span class="number">8</span>;</span><br><span class="line">int32 positionIterations = <span class="number">1</span>;</span><br><span class="line"><span class="comment">// 设置刷新时间</span></span><br><span class="line">world-&gt;Step(timeStep, velocityIterations, positionIterations);</span><br><span class="line"><span class="keyword">for</span> (b2Body *b = world-&gt;GetBodyList(); b; b = b-&gt;GetNext()) &#123;</span><br><span class="line"><span class="keyword">if</span> (b-&gt;GetUserData() != <span class="literal">nullptr</span>) &#123;</span><br><span class="line"><span class="comment">// 运动只有两种运动 一个旋转 一个位移，因此只需要将物体角度，位置与精灵角度，位置同步</span></span><br><span class="line">Sprite* sprite = (Sprite *)b-&gt;GetUserData();</span><br><span class="line"><span class="comment">// 物体的单位是 m ， 精灵的单位是 像素</span></span><br><span class="line">sprite-&gt;setPosition(Vec2(b-&gt;GetPosition().x * PTM_PATIO, b-&gt;GetPosition().y * PTM_PATIO));</span><br><span class="line">sprite-&gt;setRotation(<span class="number">-1</span> * CC_RADIANS_TO_DEGREES(b-&gt;GetAngle()));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HelloWorld::menuCloseCallback(Ref* pSender)</span><br><span class="line">&#123;</span><br><span class="line">    Director::getInstance()-&gt;end();</span><br><span class="line"></span><br><span class="line">    <span class="meta">#<span class="meta-keyword">if</span> (CC_TARGET_PLATFORM == CC_PLATFORM_IOS)</span></span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建世界，引入世界边界</span></span><br><span class="line"><span class="keyword">void</span> HelloWorld::initpjysics()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> visibleSize = Director::getInstance()-&gt;getVisibleSize();</span><br><span class="line">Vec2 origin = Director::getInstance()-&gt;getVisibleOrigin();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置重力</span></span><br><span class="line">b2Vec2 gravity;</span><br><span class="line">gravity.Set(<span class="number">0.0f</span>, <span class="number">-10.0f</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建世界</span></span><br><span class="line">world = <span class="keyword">new</span> b2World(gravity);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许物体休眠</span></span><br><span class="line">world-&gt;SetAllowSleeping(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">// 开启连续物理测试</span></span><br><span class="line"><span class="comment">// 防止 物体 间 出现 物体穿透</span></span><br><span class="line">world-&gt;SetContinuousPhysics(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 物理世界的边界</span></span><br><span class="line">b2BodyDef groundBody;</span><br><span class="line">groundBody.position.Set(<span class="number">0</span>,<span class="number">0</span>);<span class="comment">//左下角</span></span><br><span class="line"></span><br><span class="line">b2Body *ground = world-&gt;CreateBody(&amp;groundBody);</span><br><span class="line"></span><br><span class="line">b2EdgeShape groundBox;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义底部</span></span><br><span class="line">groundBox.Set(b2Vec2(<span class="number">0</span>,<span class="number">0</span>), b2Vec2(visibleSize.width/PTM_PATIO,<span class="number">0</span>)); <span class="comment">// / PTM_PATIO 是 把像素换成 米</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用夹具 固定 形状到物体</span></span><br><span class="line"><span class="comment">// 参数是 形状指针， 密度</span></span><br><span class="line">ground-&gt;CreateFixture(&amp;groundBox, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义顶部</span></span><br><span class="line">groundBox.Set(b2Vec2(<span class="number">0</span>, visibleSize.height/PTM_PATIO), b2Vec2(visibleSize.width / PTM_PATIO, visibleSize.height/PTM_PATIO)); <span class="comment">// / PTM_PATIO 是 把像素换成 米</span></span><br><span class="line">ground-&gt;CreateFixture(&amp;groundBox, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义左侧</span></span><br><span class="line">groundBox.Set(b2Vec2(<span class="number">0</span>, <span class="number">0</span>), b2Vec2(<span class="number">0</span>, visibleSize.height/PTM_PATIO)); <span class="comment">// / PTM_PATIO 是 把像素换成 米</span></span><br><span class="line">ground-&gt;CreateFixture(&amp;groundBox, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义右侧</span></span><br><span class="line">groundBox.Set(b2Vec2(visibleSize.width/PTM_PATIO, <span class="number">0</span>), b2Vec2(visibleSize.width / PTM_PATIO, visibleSize.height/PTM_PATIO)); <span class="comment">// / PTM_PATIO 是 把像素换成 米</span></span><br><span class="line">ground-&gt;CreateFixture(&amp;groundBox, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> HelloWorld::addNewSprite(Touch * touch, Event * unused_event)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">auto</span> p = touch-&gt;getLocation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建物理相关精灵</span></span><br><span class="line"><span class="keyword">auto</span> sprite = Sprite::create(<span class="string">""</span>);</span><br><span class="line">sprite-&gt;setPosition(touch-&gt;getLocation());</span><br><span class="line"><span class="keyword">this</span>-&gt;addChild(sprite);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义物体</span></span><br><span class="line">b2BodyDef bodyDef;</span><br><span class="line">bodyDef.type = b2_dynamicBody;<span class="comment">//动态物体</span></span><br><span class="line">bodyDef.position.Set(p.x/PTM_PATIO, p.y/PTM_PATIO);</span><br><span class="line"></span><br><span class="line">b2Body *body = world-&gt;CreateBody(&amp;bodyDef);<span class="comment">//从物理世界创建body</span></span><br><span class="line"></span><br><span class="line">body-&gt;SetUserData(sprite); <span class="comment">//将 物体 与 body 关联</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义形状</span></span><br><span class="line">    <span class="keyword">auto</span> contenSize = sprite.getContentSize();</span><br><span class="line">b2PolygonShape dynamicBox;<span class="comment">//这是个结构体</span></span><br><span class="line">dynamicBox.SetAsBox(contenSize.width/PTM_RATIO/<span class="number">2</span>,contenSeiz.width/PTM_PATIO/<span class="number">2</span>); <span class="comment">//设置形状大小，中心点到左边距，右边距</span></span><br><span class="line">    <span class="comment">// 这里自动适配图片大小，又因为 是 中心点到左右两边的距离，所以要 除以 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义夹具</span></span><br><span class="line">b2FixtureDef fixtrue;</span><br><span class="line">fixtrue.shape = &amp;dynamicBox;</span><br><span class="line">fixtrue.density = <span class="number">1.0f</span>;<span class="comment">//密度</span></span><br><span class="line">fixtrue.friction = <span class="number">0.3f</span>;<span class="comment">// 摩擦系数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 将夹具 与 body 连接</span></span><br><span class="line">body-&gt;CreateFixture(&amp;fixtrue);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 但是物体并不会动，需要在update函数中设置</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> HelloWorld::onTouchBegan(Touch * touch, Event * event)</span><br><span class="line">&#123;</span><br><span class="line">addNewSprite(touch, event);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HelloWorld.h文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __HELLOWORLD_SCENE_H__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __HELLOWORLD_SCENE_H__</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Box2D\Box2D.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ContactListener.h"</span></span></span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PTM_PATIO 32</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> :</span> <span class="keyword">public</span> cocos2d::Scene</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">static</span> cocos2d::<span class="function">Scene* <span class="title">createScene</span><span class="params">()</span></span>;</span><br><span class="line">~HelloWorld();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">bool</span> <span class="title">init</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(<span class="keyword">float</span> dt)</span></span>;</span><br><span class="line">    <span class="comment">// a selector callback</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">menuCloseCallback</span><span class="params">(cocos2d::Ref* pSender)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initpjysics</span><span class="params">()</span></span>;<span class="comment">//初始化物理引擎</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addNewSprite</span><span class="params">(Touch* touch, Event* unused_event)</span></span>;</span><br><span class="line">b2World *world;</span><br><span class="line">ContactListener* contactListener;</span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">onTouchBegan</span><span class="params">(Touch* touch, Event *event)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// implement the "static create()" method manually</span></span><br><span class="line">    CREATE_FUNC(HelloWorld);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// __HELLOWORLD_SCENE_H__</span></span></span><br></pre></td></tr></table></figure><h2 id="碰撞检测"><a href="#碰撞检测" class="headerlink" title="碰撞检测"></a>碰撞检测</h2><ul><li>ContactListener.h</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"cocos2d.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Box2D\Box2D.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ContactListener</span> :</span> <span class="keyword">public</span> b2ContactListener &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">BeginContact</span><span class="params">(b2Contact* contact)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">EndContact</span><span class="params">(b2Contact* contact)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PreSolve</span><span class="params">(b2Contact* contact, <span class="keyword">const</span> b2Manifold* oldManifold)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">PostSolve</span><span class="params">(b2Contact* contact, <span class="keyword">const</span> b2ContactImpulse* impulse)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>ContactListener.cpp 文件</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ContactListener.h"</span></span></span><br><span class="line">USING_NS_CC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ContactListener::BeginContact(b2Contact * contact)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"begin"</span>);</span><br><span class="line">b2Body* bodyA = contact-&gt;GetFixtureA()-&gt;GetBody();<span class="comment">// 通过夹具获得物体A的body</span></span><br><span class="line">b2Body* bodyB = contact-&gt;GetFixtureB()-&gt;GetBody();<span class="comment">// 通过夹具获得物体A的body</span></span><br><span class="line"><span class="keyword">auto</span> spriteA = (Sprite *)bodyA-&gt;GetUserData(); <span class="comment">// 通过body获取精灵，强转一下</span></span><br><span class="line"><span class="keyword">auto</span> spriteB = (Sprite *)bodyB-&gt;GetUserData(); <span class="comment">// 通过body获取精灵，强转一下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (spriteA != <span class="literal">nullptr</span> &amp;&amp; spriteB != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">spriteA-&gt;setColor(Color3B::YELLOW);</span><br><span class="line">spriteB-&gt;setColor(Color3B::YELLOW);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ContactListener::EndContact(b2Contact * contact)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"end"</span>);</span><br><span class="line">b2Body* bodyA = contact-&gt;GetFixtureA()-&gt;GetBody();<span class="comment">// 通过夹具获得物体A的body</span></span><br><span class="line">b2Body* bodyB = contact-&gt;GetFixtureB()-&gt;GetBody();<span class="comment">// 通过夹具获得物体A的body</span></span><br><span class="line"><span class="keyword">auto</span> spriteA = (Sprite *)bodyA-&gt;GetUserData(); <span class="comment">// 通过body获取精灵，强转一下</span></span><br><span class="line"><span class="keyword">auto</span> spriteB = (Sprite *)bodyB-&gt;GetUserData(); <span class="comment">// 通过body获取精灵，强转一下</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (spriteA != <span class="literal">nullptr</span> &amp;&amp; spriteB != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">spriteA-&gt;setColor(Color3B::WHITE);</span><br><span class="line">spriteB-&gt;setColor(Color3B::WHITE);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ContactListener::PreSolve(b2Contact * contact, <span class="keyword">const</span> b2Manifold * oldManifold)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"PreSolve"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ContactListener::PostSolve(b2Contact * contact, <span class="keyword">const</span> b2ContactImpulse * impulse)</span><br><span class="line">&#123;</span><br><span class="line">CCLOG(<span class="string">"PostSolve"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="关节"><a href="#关节" class="headerlink" title="关节"></a>关节</h2><ol><li>距离关节<ul><li>两个物体之间保持固定的距离，每个物体上的点称为锚点。</li><li>关节定义是b2DistanceJoinDef</li></ul></li><li>旋转关节<ul><li>允许物体围绕公共点旋转。</li><li>关节定义是 b2RevoluteJoiDef</li></ul></li><li>平移关节<ul><li>两个物体之间的相对旋转是固定的，他们可以沿着一个坐标轴进行平移。</li><li>关节定义是 b2PrismaticJointDef</li></ul></li><li>焊接关节<ul><li>可以吧物体固定在相同方向上。</li><li>关节定义是 b2WeldJointDef</li></ul></li><li>轮滑关节<ul><li>轮滑关节用于创建理想的轮滑，两个物体唯一绳子两端，绳子通过某个固定点（轮滑的位置）将两个物体连接起来</li><li>当一个物体升起，另一个物体就会下降</li><li>关节定义是 b2PulleyJointDef</li></ul></li><li>摩擦关节<ul><li>降低两个物体之间的相对运动</li><li>关节定义是 b2FrictionJointDef</li></ul></li><li>齿轮关节<ul><li>控制其他两个关节（旋转关节或者平移关节），其中一个的愚弄的那个会影响另一个</li><li>关节定义是 b2GearJointDef</li></ul></li><li>鼠标关节<ul><li>点击物体上任意一个点可以在世界范围内进行拖动</li><li>关节定义是 b2MouseJointDef</li></ul></li></ol><h1 id="动作"><a href="#动作" class="headerlink" title="动作"></a>动作</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">Sprite * sp= Sprite::create(<span class="string">"Icon.png"</span>);</span><br><span class="line">sp-&gt;setPosition(Vec2(<span class="number">150</span>, <span class="number">150</span>));</span><br><span class="line">addChild(sp,<span class="number">0</span>,<span class="number">922</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    Action动作</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MoveBy  创建一个移动的动作   参数1：移动到目标坐标所需的时间 参数2：目标坐标    </span></span><br><span class="line"><span class="comment">// 支持reverse 可以获取其反向动作</span></span><br><span class="line"><span class="comment">//     MoveTo  一样的</span></span><br><span class="line">ActionInterval * moveBy = MoveBy::create(<span class="number">5</span>,Vec2(<span class="number">300</span>, <span class="number">100</span>));</span><br><span class="line">ActionInterval * actionmoveback= moveBy-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(actionmoveback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     ScaleTo   作用：创建一个缩放的动作</span></span><br><span class="line"><span class="comment">//    参数1：达到缩放大小所需的时间</span></span><br><span class="line"><span class="comment">//    参数2 ：缩放的比例</span></span><br><span class="line">ActionInterval * scaleto = ScaleTo ::create(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">sp-&gt;runAction(scaleto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     ScaleBy  作用:创建一个缩放的动作</span></span><br><span class="line"><span class="comment">//    参数1：达到缩放大小的所需时间  参数2：缩放比例</span></span><br><span class="line">ActionInterval * scaleby = ScaleBy::create(<span class="number">2</span>, <span class="number">2</span>);</span><br><span class="line">ActionInterval * actionbyback = scaleby-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(actionbyback);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     RotateTo</span></span><br><span class="line"><span class="comment">//    作用创建一个旋转的动作</span></span><br><span class="line"><span class="comment">//    参数1：旋转的时间  参数2：旋转饿角度  0 - 360</span></span><br><span class="line">ActionInterval * rotateto = RotateTo::create(<span class="number">2</span>, <span class="number">90</span>);</span><br><span class="line">sp-&gt;runAction(rotateto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//   SkewTo</span></span><br><span class="line"><span class="comment">//   作用创建一个倾斜的动作</span></span><br><span class="line"><span class="comment">//    参数1：倾斜到特定角度所需的时间</span></span><br><span class="line"><span class="comment">//    参数2：x轴的倾斜角度</span></span><br><span class="line"><span class="comment">//    参数3：y轴的倾斜角度</span></span><br><span class="line">ActionInterval * skewto = SkewTo::create(<span class="number">2</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">sp-&gt;runAction(skewto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     JumpTo</span></span><br><span class="line"><span class="comment">//    作用：创建一个跳的动作</span></span><br><span class="line"><span class="comment">//    参数1：跳到目标动作位子的所需时间</span></span><br><span class="line"><span class="comment">//    参数2：目标位置</span></span><br><span class="line"><span class="comment">//    参数3：跳的高度</span></span><br><span class="line"><span class="comment">//    参数4跳到目标位置的次数</span></span><br><span class="line">ActionInterval* jumpto = JumpTo ::create(<span class="number">2</span>, Vec2(<span class="number">300</span>, <span class="number">200</span>), <span class="number">50</span>, <span class="number">4</span> );</span><br><span class="line">sp-&gt;runAction(jumpto);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     JumpBy</span></span><br><span class="line"><span class="comment">//    作用：创建一个跳的动作</span></span><br><span class="line"><span class="comment">//    参数1：跳到目标动作位子的所需时间</span></span><br><span class="line"><span class="comment">//    参数2：目标位置</span></span><br><span class="line"><span class="comment">//    参数3：跳的高度</span></span><br><span class="line"><span class="comment">//    参数4跳到目标位置的次数</span></span><br><span class="line"><span class="comment">//    这个支持方向动作reverse</span></span><br><span class="line">ActionInterval * jumpby = JumpBy ::create(<span class="number">3</span>, Vec2(<span class="number">300</span>, <span class="number">200</span>), <span class="number">50</span>, <span class="number">4</span>);</span><br><span class="line">ActionInterval * ac= jumpby-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(ac);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//         Bezier</span></span><br><span class="line"><span class="comment">//     BezierConfig结构体</span></span><br><span class="line"> BezierConfig bezierCon;</span><br><span class="line">bezierCon.controlPoint_1=Vec2(<span class="number">200</span>, <span class="number">150</span>);<span class="comment">//控制点1</span></span><br><span class="line">bezierCon.controlPoint_2=Vec2(<span class="number">200</span>, <span class="number">160</span>);<span class="comment">//控制点2</span></span><br><span class="line">bezierCon.endPosition =Vec2(<span class="number">340</span>, <span class="number">100</span>);<span class="comment">// 结束位置</span></span><br><span class="line"><span class="comment">//BezierTo</span></span><br><span class="line"><span class="comment">//        创建一个贝塞尔曲线运动的动作</span></span><br><span class="line"><span class="comment">//        参数1：贝塞尔曲线运动的时间</span></span><br><span class="line"><span class="comment">//        参数2 ： BezierConfig结构体</span></span><br><span class="line">ActionInterval * action = BezierTo::create(<span class="number">2</span>, bezierCon);</span><br><span class="line">ActionInterval * action1 = BezierBy::create(<span class="number">3</span>, bezierCon);<span class="comment">//支持反向</span></span><br><span class="line">ActionInterval * action2 = action-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(action1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//FadeIn</span></span><br><span class="line"><span class="comment">//作用：创建一个渐变出现的动作</span></span><br><span class="line"><span class="comment">//参数是时间</span></span><br><span class="line">ActionInterval * fadein = FadeIn::create(<span class="number">2</span>);</span><br><span class="line">sp-&gt;runAction(fadein);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     FadeOut</span></span><br><span class="line"><span class="comment">//    作用：创建一个渐变消失的动作</span></span><br><span class="line"><span class="comment">//    参数是时间</span></span><br><span class="line">ActionInterval * fadeout = FadeOut::create(<span class="number">2</span>);</span><br><span class="line">sp-&gt;runAction(fadeout);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// TintTo</span></span><br><span class="line"><span class="comment">//    作用：创建一个色彩变化的消失动作</span></span><br><span class="line"><span class="comment">//    参数1：色彩变化的动作</span></span><br><span class="line"><span class="comment">//    参数2 ：红色分量</span></span><br><span class="line"><span class="comment">//    参数3：蓝色分量</span></span><br><span class="line">ActionInterval * tinto = TintTo ::create(<span class="number">3</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);</span><br><span class="line">sp-&gt;runAction(tinto);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     TintBy</span></span><br><span class="line"><span class="comment">//    作用：创建一个色彩变化的出现动作</span></span><br><span class="line"><span class="comment">//    参数1：色彩变化的动作</span></span><br><span class="line"><span class="comment">//    参数2 ：红色分量</span></span><br><span class="line"><span class="comment">//    参数3：蓝色分量   但是家了reverse就是 反向的</span></span><br><span class="line">ActionInterval * tintby = TintBy::create(<span class="number">3</span>, <span class="number">0</span>, <span class="number">255</span>, <span class="number">255</span>);</span><br><span class="line">ActionInterval * tintby1 = tintby-&gt;reverse();</span><br><span class="line">sp-&gt;runAction(tintby1);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     Blink</span></span><br><span class="line"><span class="comment">//    作用 :创建一额闪烁的动作</span></span><br><span class="line"><span class="comment">//    参数1：闪烁完成的时间</span></span><br><span class="line"><span class="comment">//    参数2:闪烁的次数</span></span><br><span class="line"></span><br><span class="line">ActionInterval * blink = Blink ::create(<span class="number">3</span>, <span class="number">10</span>);</span><br><span class="line">sp-&gt;runAction(blink);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     DelayTime</span></span><br><span class="line"><span class="comment">//    创建一个延迟的动作</span></span><br><span class="line"><span class="comment">//    参数  延迟的时间</span></span><br><span class="line">ActionInterval * delaytime = DelayTime::create(<span class="number">3</span>);</span><br><span class="line">sp-&gt;runAction(delaytime);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     OrbitCamera</span></span><br><span class="line"><span class="comment">//    作用：创建一个球面坐标轨迹进行旋转的动作</span></span><br><span class="line"><span class="comment">//    参数1 ： 旋转轨迹的时间</span></span><br><span class="line"><span class="comment">//    参数2 ：起始半径</span></span><br><span class="line"><span class="comment">//    参数3：半径差</span></span><br><span class="line"><span class="comment">//    参数4：起始z角</span></span><br><span class="line"><span class="comment">//    参数5：旋转z角的差</span></span><br><span class="line"><span class="comment">//    参数6：起始x角</span></span><br><span class="line"><span class="comment">//    参数7：旋转x角的差</span></span><br><span class="line">ActionInterval * orbitcameraa = OrbitCamera::create(<span class="number">3</span>, <span class="number">10</span>, <span class="number">0</span>, <span class="number">45</span>, <span class="number">180</span>, <span class="number">90</span>, <span class="number">0</span>);</span><br><span class="line">sp-&gt;runAction(orbitcameraa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     CardinalSpline</span></span><br><span class="line"><span class="comment">//    作用：创建数组  点的数组</span></span><br><span class="line">PointArray * <span class="built_in">array</span> = PointArray::create(<span class="number">20</span>);</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">210</span>,<span class="number">0</span>));</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">210</span>,<span class="number">240</span>));</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">0</span>,<span class="number">160</span>));</span><br><span class="line"><span class="built_in">array</span>-&gt;addControlPoint(Vec2(<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line"><span class="comment">//    CardinalSplineTo</span></span><br><span class="line"><span class="comment">//    作用：创建一个样条曲线轨迹的动作</span></span><br><span class="line"><span class="comment">//    参数1：完成轨迹所需的时间</span></span><br><span class="line"><span class="comment">//    参数2：控制点的坐标数组</span></span><br><span class="line"><span class="comment">//    拟合度  其值= 0 路径最柔和</span></span><br><span class="line">ActionInterval  * CardinalSplineTo=CardinalSplineTo::create(<span class="number">3</span>, <span class="built_in">array</span>, <span class="number">0</span>);</span><br><span class="line">sp-&gt;runAction(CardinalSplineTo);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//    CardinalSplineBy</span></span><br><span class="line"><span class="comment">//    作用：创建一个样条曲线轨迹的动作</span></span><br><span class="line"><span class="comment">//    参数1：完成轨迹所需的时间</span></span><br><span class="line"><span class="comment">//    参数2：控制点的坐标数组</span></span><br><span class="line"><span class="comment">//    拟合度  其值= 0 路径最柔和</span></span><br><span class="line">ActionInterval * CardinalSplineBy = CardinalSplineBy::create(<span class="number">3</span>, <span class="built_in">array</span>, <span class="number">0</span>);</span><br><span class="line">sp-&gt;runAction(CardinalSplineBy);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    CatmullRomTo   CatmullRomBY</span></span><br><span class="line"><span class="comment">//    作用：创建一个样条插值轨迹</span></span><br><span class="line"><span class="comment">//    参数1：完成轨迹的时间</span></span><br><span class="line"><span class="comment">//    参数2：控制点的数组坐标</span></span><br><span class="line">ActionInterval * catmullRomTo = CatmullRomTo::create(<span class="number">3</span>, <span class="built_in">array</span>);</span><br><span class="line">sp-&gt;runAction(catmullRomTo);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    Follow</span></span><br><span class="line"><span class="comment">//    作用：创建一个跟随动作</span></span><br><span class="line"><span class="comment">//    参数1：跟随的目标对象</span></span><br><span class="line"><span class="comment">//    跟随范围，离开范围就不再跟随</span></span><br><span class="line"><span class="comment">//创建一个参照物spT</span></span><br><span class="line">Sprite * spt = Sprite::create(<span class="string">"Icon.png"</span>);</span><br><span class="line">spt-&gt;setPosition(Vec2(<span class="number">420</span>,<span class="number">40</span>));</span><br><span class="line">addChild(spt);</span><br><span class="line">sp-&gt;runAction(MoveTo::create(<span class="number">3</span>, Vec2(<span class="number">940</span>,sp-&gt;getPositionY())));</span><br><span class="line"></span><br><span class="line">Follow * follow = Follow::create(sp,Rect(<span class="number">0</span>, <span class="number">0</span>, <span class="number">960</span>, <span class="number">320</span>));</span><br><span class="line"><span class="keyword">this</span>-&gt; runAction(follow);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseBounceIn</span></span><br><span class="line"><span class="comment">//    目标动作</span></span><br><span class="line">ActionInterval* move = MoveTo::create(<span class="number">3</span>, Vec2(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"><span class="comment">////    让目标动作缓慢开始</span></span><br><span class="line"><span class="comment">////    参数：目标动作</span></span><br><span class="line">ActionInterval * EaseBounceIn = EaseBounceIn::create(move);</span><br><span class="line">sp-&gt;runAction(EaseBounceIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    EaseBounceOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予反弹力，且以目标动作结束位子开始反弹</span></span><br><span class="line"><span class="comment">//    参数目标动作</span></span><br><span class="line">ActionInterval * easeBounceOut = EaseBounceOut ::create(move);</span><br><span class="line">sp-&gt;runAction(easeBounceOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    EaseBounceInOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予反弹力，且以目标动作起始与结束位子开始反弹</span></span><br><span class="line">ActionInterval * easeBounceInOut= EaseBounceInOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeBounceInOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//   EaseBackIn</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予回力 ， 且以目标动作起点位置作为回力点</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line">ActionInterval * easeBackIn = EaseBackIn::create(move);</span><br><span class="line">sp-&gt;runAction(easeBackIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//    EaseBackOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予回力 ， 且以目标动作终点位置作为回力点</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line">ActionInterval *easeBackOut = EaseBackOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeBackOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseBackInOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予回力 ， 且以目标动作起点和终点位置作为回力点</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line"> ActionInterval * easeBackInOut =  EaseBackInOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeBackInOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseElasticIn</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予弹性 ，且以目标动作起点位子赋予弹性</span></span><br><span class="line"><span class="comment">//     参数：目标动作</span></span><br><span class="line"> ActionInterval * easeElasticIn=  EaseElasticIn::create(move);</span><br><span class="line">sp-&gt;runAction(easeElasticIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//      EaseElasticOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予弹性 ，且以目标动作终点位子赋予弹性</span></span><br><span class="line"><span class="comment">//     参数：目标动作</span></span><br><span class="line"> ActionInterval *easeElasticOut =  EaseElasticOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeElasticOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseElasticInOut</span></span><br><span class="line"><span class="comment">//    作用：让目标动作赋予弹性 ，且以目标动作起点和终点位子赋予弹性</span></span><br><span class="line"><span class="comment">//     参数：目标动作</span></span><br><span class="line"> ActionInterval *easeElasticInOut =  EaseElasticOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeElasticInOut);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseExponentialIn</span></span><br><span class="line"><span class="comment">//    让目标动作缓慢开始</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line"> ActionInterval * easeExponentialIn=  EaseExponentialIn::create(move);</span><br><span class="line">sp-&gt;runAction(easeExponentialIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseExponentialOut</span></span><br><span class="line"><span class="comment">//    让目标动作缓慢中止</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line">ActionInterval * easeExponentialInt=  EaseExponentialOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeExponentialInt);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseExponentialInOut</span></span><br><span class="line"><span class="comment">//    让目标动作缓慢开始和中止</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line"> ActionInterval * easeExponentialInOut=  EaseExponentialInOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeExponentialInOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseRateAction</span></span><br><span class="line"><span class="comment">//    作用 ： 让目标动作设置速率</span></span><br><span class="line"><span class="comment">//    参数1:目标动作</span></span><br><span class="line"><span class="comment">//    参数2：速率</span></span><br><span class="line"> ActionInterval * moveto =  MoveTo::create(<span class="number">5</span>,  p(<span class="number">300</span>,sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * easeRateAction =  EaseRateAction::create(move, <span class="number">3</span>);</span><br><span class="line">sp-&gt;runAction(easeRateAction);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseSineIn</span></span><br><span class="line"><span class="comment">//    作用：动作由慢到快</span></span><br><span class="line"><span class="comment">//      参数：目标动作</span></span><br><span class="line"> ActionInterval * easeSineIn =  EaseSineIn::create(move);</span><br><span class="line">sp-&gt;runAction(easeSineIn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseSineOut</span></span><br><span class="line"><span class="comment">//    作用：动作由快到慢</span></span><br><span class="line"><span class="comment">//      参数：目标动作</span></span><br><span class="line"> ActionInterval * easeSineOut =  EaseSineOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeSineOut);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     EaseSineInOut</span></span><br><span class="line"><span class="comment">//    作用：动作由慢到快再快到慢</span></span><br><span class="line"><span class="comment">//      参数：目标动作</span></span><br><span class="line"> ActionInterval * easeSineInOut =  EaseSineInOut::create(move);</span><br><span class="line">sp-&gt;runAction(easeSineInOut);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     Speed</span></span><br><span class="line"><span class="comment">//    作用：让目标动作运行速度加倍</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2:倍速</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">10</span>,  p(<span class="number">300</span>,sp-&gt;getPositionY()));</span><br><span class="line"> Speed * speed = Speed::create(move, <span class="number">100</span>);</span><br><span class="line">sp-&gt;runAction(speed);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     Spawn</span></span><br><span class="line"><span class="comment">//  作用：让多个动作同时执行</span></span><br><span class="line"><span class="comment">//    参数：目标动作的可变参数</span></span><br><span class="line"> ActionInterval * move1 =  MoveTo::create(<span class="number">10</span>,  p(<span class="number">300</span>,sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * scale =  ScaleTo::create(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"> ActionInterval * rotate =  RotateTo::create(<span class="number">4</span>, <span class="number">190</span>);</span><br><span class="line"> FiniteTimeAction * spawn = Spawn::create(move1,scale,rotate,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(spawn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     Sequence</span></span><br><span class="line"><span class="comment">//    作用：让多个动作按照前后顺序逐一执行</span></span><br><span class="line"><span class="comment">//    参数：目标动作的可变参数</span></span><br><span class="line"> ActionInterval * move2 =  MoveTo::create(<span class="number">2</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * scalet =  ScaleTo::create(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"> FiniteTimeAction * seq=  Sequence::create(move2,scalet,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(seq);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//    扩展如果要对目标动作全部进行方向运动，可以使用如下形式操作</span></span><br><span class="line"> FiniteTimeAction *seqe= Sequence::create(moveby,scaleby,...<span class="literal">NULL</span>);</span><br><span class="line"> FiniteTimeAction * reverseseq =  Sequence::create(seqe,seq-&gt;reverse(),<span class="literal">NULL</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意 Sequence中的所有动作都必须支持reverse函数，否则会出现异常</span></span><br><span class="line"> ActionInterval * move =  MoveBy::create(<span class="number">2</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * scale =  ScaleBy::create(<span class="number">2</span>, <span class="number">3</span>);</span><br><span class="line"> FiniteTimeAction * seq=  Sequence::create(move,scale,<span class="literal">NULL</span>);</span><br><span class="line"> FiniteTimeAction * reveseseq =  Sequence::create(seq,seq-&gt;reverse(),<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(reveseseq);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     Repeat</span></span><br><span class="line"><span class="comment">//    作用：对目标动作进行重复运动（目标动作可以是 Sequence ， Spawn）</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2：重复次数</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">2</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * move2 =  MoveTo::create(<span class="number">2</span>,  p(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"> FiniteTimeAction*seq = Sequence::create(move,move2,<span class="literal">NULL</span>);</span><br><span class="line"> FiniteTimeAction *repeat =  Repeat::create(seq, <span class="number">3</span>);</span><br><span class="line">sp-&gt;runAction(repeat);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//     RepeatForever</span></span><br><span class="line"><span class="comment">//    作用：对目标动作进行永久性的重复运动（目标动作可以是 Sequence ， Spawn）</span></span><br><span class="line"><span class="comment">//    参数：目标动作</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> ActionInterval * move1 =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">100</span>,<span class="number">100</span>));</span><br><span class="line"> FiniteTimeAction* seq =  Sequence::create(move,move1,<span class="literal">NULL</span>);</span><br><span class="line"> ActionInterval * repeatForever = RepeatForever::create(( ActionInterval* )seq);</span><br><span class="line">sp-&gt;runAction(repeatForever);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     CallFunc</span></span><br><span class="line"><span class="comment">//    作用：创建一个回调动作（调用不带参数的回调方法）；</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2：目标回调函数</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> CallFunc * funcall=  CallFunc::create(<span class="keyword">this</span>, callfunc_selector(HelloWorld::callbackC));</span><br><span class="line"> FiniteTimeAction * seq =  Sequence::create(move,funcall,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(seq);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     CallFuncN</span></span><br><span class="line"><span class="comment">//    作用：创建一个回调动作（调用 带一个参数的回调方法）；</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2：目标回调函数</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> CallFuncN * funcall=  CallFuncN::create(<span class="keyword">this</span>, callfuncN_selector(HelloWorld::callbackN));</span><br><span class="line"> FiniteTimeAction * seq =  Sequence::create(move,funcall,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(seq);</span><br><span class="line"></span><br><span class="line"><span class="comment">//     CallFuncND</span></span><br><span class="line"><span class="comment">//    作用：创建一个回调动作（调用 带两个参数的回调方法）；</span></span><br><span class="line"><span class="comment">//    参数1：目标动作</span></span><br><span class="line"><span class="comment">//    参数2：目标回调函数</span></span><br><span class="line"> ActionInterval * move =  MoveTo::create(<span class="number">1</span>,  p(<span class="number">300</span>, sp-&gt;getPositionY()));</span><br><span class="line"> CallFuncND * funcall=  CallFuncND::create(<span class="keyword">this</span>, callfuncND_selector(HelloWorld::callbackND)  ,(<span class="keyword">void</span>*)<span class="number">0xbebabeba</span>);</span><br><span class="line"> FiniteTimeAction * seq =  Sequence::create(move,funcall,<span class="literal">NULL</span>);</span><br><span class="line">sp-&gt;runAction(seq);</span><br></pre></td></tr></table></figure><h1 id="内存管理机制"><a href="#内存管理机制" class="headerlink" title="内存管理机制"></a>内存管理机制</h1><h2 id="常用算法"><a href="#常用算法" class="headerlink" title="常用算法"></a>常用算法</h2><h3 id="引用计数算法"><a href="#引用计数算法" class="headerlink" title="引用计数算法"></a>引用计数算法</h3><ul><li>每个对象都有一个引用，一个数来跟踪它被引用的次数</li><li>每增加一次 引用计数+1 ，每减少一次 应用计数-1</li><li>垃圾回收时 引用计数 为0 时就要被回收</li><li><code>最为致命</code>的问题是无法解决循环引用</li></ul><h3 id="标记清除算法"><a href="#标记清除算法" class="headerlink" title="标记清除算法"></a>标记清除算法</h3><ul><li>根可达的集合，cocos中的所有对象都有一个同一个父节点</li><li>第一个阶段从应用节点开始标记所有被引用的对象</li><li>第二个阶段遍历整个堆，把未标记的对象清除</li><li><code>最为致命</code>的问题是这个算法需要暂停整个应用，并且会产生内存碎片</li></ul><h3 id="复制算法"><a href="#复制算法" class="headerlink" title="复制算法"></a>复制算法</h3><ul><li>将内存分为连个区域，每次只使用其中一个区域。</li><li>垃圾回收时，遍历整个区域，将正在使用的对象复制到另一个区域中</li><li>复制成本较小，而且可以进行内存管理，不会出现内存碎片</li><li><code>最为致命</code>的问题是这个算法需要两倍的内存空间</li></ul><h3 id="标记-整理算法"><a href="#标记-整理算法" class="headerlink" title="标记-整理算法"></a>标记-整理算法</h3><ul><li>集合了标记清除和复制算法</li><li>第一阶段，从根节点开始标记所有的被应用的节点</li><li>第二阶段，清除未被标记的节点，同时将被标记的节点压缩到一起，按顺序排放</li></ul><h2 id="delete和new"><a href="#delete和new" class="headerlink" title="delete和new"></a>delete和new</h2><h3 id="new运算符使用的一般格式为"><a href="#new运算符使用的一般格式为" class="headerlink" title="new运算符使用的一般格式为 　　"></a>new运算符使用的一般格式为 　　</h3><pre><code>new 类型 [初值] 　　用new分配数组空间时不能指定初值。如果由于内存不足等原因而无法正常分配空间，则new会返回一个空指针NULL，用户可以根据该指针的值判断分配空间是否成功。new int;//开辟一个存放整数的存储空间，返回一个指向该存储空间的地址(即指针) 　　new int(100);//开辟一个存放整数的空间，并指定该整数的初值为100，返回一个指向该存储空间的地址　　new char[10];//开辟一个存放字符数组(包括10个元素)的空间，返回首元素的地址 　　new int[5][4];//开辟一个存放二维整型数组(大小为5*4)的空间，返回首元素的地址float *p=new float (3.14159);//开辟一个存放单精度数的空间，并指定该实数的初值为//3.14159，将返回的该空间的地址赋给指针变量p 　　</code></pre><h3 id="delete运算符使用的一般格式为"><a href="#delete运算符使用的一般格式为" class="headerlink" title="delete运算符使用的一般格式为 　　"></a>delete运算符使用的一般格式为 　　</h3><pre><code>delete [ ]指针变量 　　例如要撤销上面用new开辟的存放单精度数的空间(上面第5个例子)，应该用 　　delete p；　　前面用“new char[10];”开辟的字符数组空间，如果把new返回的指针赋给了指针变量pt，则应该用以下形式的delete运算符撤销该空间： 　　  delete [] pt；//在指针变量前面加一对方括号，表示是对数组空间的操作 　　</code></pre><h2 id="Cocos2dx-的内存管理"><a href="#Cocos2dx-的内存管理" class="headerlink" title="Cocos2dx 的内存管理"></a>Cocos2dx 的内存管理</h2><ul><li>使用的是 引用计数方法</li><li>所有的自动释放的对象都<code>继承</code>于<code>Ref</code>类<ul><li>Node基类也继承与<code>Ref</code>类</li></ul></li><li>Ref类用于管理引用计数</li></ul><h3 id="Ref的方法"><a href="#Ref的方法" class="headerlink" title="Ref的方法"></a>Ref的方法</h3><ul><li>retain() 增加引用计数</li><li>release() 减少引用计数</li><li>autorelease() 生成自动释放对象</li><li>getReferanceCount() 获取对象的引用计数</li></ul><h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><ul><li>创建一个对象的时候</li><li>首先调用对象的父类的构造函数</li><li>最终会调用到<code>Ref</code>这个基类</li><li>在<code>Ref</code>这基类中会初始化引用计数<code>ReferanceCount</code>为1</li></ul><p><strong>在release函数中，有判断引用计数的值，如果为0会自动释放对象</strong></p><h2 id="CREATE-FUNC-函数"><a href="#CREATE-FUNC-函数" class="headerlink" title="CREATE_FUNC()函数"></a>CREATE_FUNC()函数</h2><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * define a create function for a specific type, such as CCLayer </span></span><br><span class="line"><span class="comment"> * @__TYPE__ class type to add create(), such as CCLayer </span></span><br><span class="line"><span class="comment"> */</span>  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE_FUNC(__TYPE__) \  </span></span><br><span class="line">static __TYPE__* create() \  </span><br><span class="line">&#123; \  </span><br><span class="line">    __TYPE__ *pRet = <span class="keyword">new</span> __TYPE__(); \</span><br><span class="line"> <span class="comment">//创建传过来的东西</span></span><br><span class="line">    <span class="keyword">if</span> (pRet &amp;&amp; pRet-&gt;init()) \  </span><br><span class="line">    &#123; \  </span><br><span class="line">        pRet-&gt;autorelease(); \  </span><br><span class="line">        <span class="keyword">return</span> pRet; \  </span><br><span class="line">    &#125; \  </span><br><span class="line">    <span class="keyword">else</span> \  </span><br><span class="line">    &#123; \  </span><br><span class="line">        <span class="keyword">delete</span> pRet; \  </span><br><span class="line">        pRet = <span class="literal">NULL</span>; \  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>; \  </span><br><span class="line">    &#125; \  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>很明显上面的pRet 使用了 autorelease() 方法</strong><br><strong>先使用C++的new方法创建一个对象，如果创建成功，则添加自动清除</strong>rc</p><h3 id="什么是CREATE-FUNC"><a href="#什么是CREATE-FUNC" class="headerlink" title="什么是CREATE_FUNC()"></a>什么是CREATE_FUNC()</h3><pre><code>为类似CCLayer类的特定类增加一个create函数，我们也可以看到在宏的下面定义了一个create()函数返回到类型就是宏带入的参数&quot;__TYPE__&quot;指针类型</code></pre><h3 id="create（）函数做了什么？"><a href="#create（）函数做了什么？" class="headerlink" title="create（）函数做了什么？"></a>create（）函数做了什么？</h3><pre><code>他执行了类的构造函数，执行了init()初始化函数，最后又设置创建出的对象为自动释放内存，这样其他人在使用这个类的时候，只要是用create（）函数创建出来的对象就是不用费心区管理释放内存</code></pre><h2 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h2><h3 id="什么时候引用计数"><a href="#什么时候引用计数" class="headerlink" title="什么时候引用计数"></a>什么时候引用计数</h3><pre><code>每一个对象都有一个关联的引用计数 —— 对该对象的活跃引用的数量。如果对象的引用计数是零，那么它就是垃圾（用户程序不可到达它），并可以回收。</code></pre><h2 id="Cocos2dx内存管理分为两块"><a href="#Cocos2dx内存管理分为两块" class="headerlink" title="Cocos2dx内存管理分为两块"></a>Cocos2dx内存管理分为两块</h2><pre><code>1. 通过加入 `autorelease` 来自动释放那些创建后未使用的对象2. 通过`节点管理`来保证对象在弃用后及时的删除</code></pre><h3 id="及时释放弃用的对象"><a href="#及时释放弃用的对象" class="headerlink" title="及时释放弃用的对象"></a>及时释放弃用的对象</h3><p><code>使用条件</code>：该对象是Node的子类对象<br><code>使用方法</code>：addChild，removeChild</p><h4 id="内存管理过程："><a href="#内存管理过程：" class="headerlink" title="内存管理过程："></a>内存管理过程：</h4><pre><code>addChild  添加对象后，对象可以被使用removeChild 删除对象后，对象被立刻删除（通过 delete）</code></pre><h3 id="及时释放未使用的对象"><a href="#及时释放未使用的对象" class="headerlink" title="及时释放未使用的对象"></a>及时释放未使用的对象</h3><h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><pre><code>新创建的对象如果 一帧 内不使用，就会被自动释放。（所谓一针，即是一个gameloop）</code></pre><h4 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h4><pre><code>对象通过CREAT_FUNC()宏创建或者对象使用autorelease加入了自动释放池</code></pre><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><pre><code>自动实现</code></pre><h4 id="管理过程"><a href="#管理过程" class="headerlink" title="管理过程"></a>管理过程</h4><h5 id="对象不使用的情况"><a href="#对象不使用的情况" class="headerlink" title="对象不使用的情况"></a>对象不使用的情况</h5><pre><code>对象创建        引用+1对象自动释放     引用-1</code></pre><h5 id="对象使用的情况"><a href="#对象使用的情况" class="headerlink" title="对象使用的情况"></a>对象使用的情况</h5><pre><code>对象创建        引用+1对象使用        引用+1//通过 addchild 使用对象对象自动释放    引用-1</code></pre><p>引用的初始值为0，如果一阵结束后对象的引用值还是0，那就会被delete掉</p><h2 id="内存管理的实现原理"><a href="#内存管理的实现原理" class="headerlink" title="内存管理的实现原理"></a>内存管理的实现原理</h2><h3 id="第一部分"><a href="#第一部分" class="headerlink" title="第一部分"></a>第一部分</h3><p><code>Red</code>类：进行引用计数，提供加入自动释放池的接口。<br><code>AutoreleasePool</code>类：管理一个<code>vector</code>数组来存放自动释放池的对象。提供对释放池的清空操作<br><code>PoolManager</code>类：管理一个<code>vector</code>数组来存放自动释放池。默认情况下引擎只创建一个自动释放池，因此这个类是提供给开发者使用的，例如处于性能考虑添加自己的自动释放池<br><code>DisplayLinkDirector</code>类：只是一个导演类，提供游戏的主循环，实现每一帧的资源释放。这个类继承自<code>Director</code>类，也是唯一一个继承了<code>Director</code>的类，也就是说完全可以合并为一个类。</p><h4 id="Ref源码"><a href="#Ref源码" class="headerlink" title="Ref源码"></a>Ref源码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引用计数变量</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> _referenceCount;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 对象被构造后，引用计数值为 1</span></span><br><span class="line">Ref::Ref()</span><br><span class="line">: _referenceCount(<span class="number">1</span>) <span class="comment">//当Ref对象被创建时，引用计数的值为 1</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_ENABLE_SCRIPT_BINDING</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">int</span> uObjectCount = <span class="number">0</span>;</span><br><span class="line">_luaID = <span class="number">0</span>;</span><br><span class="line">_ID = ++uObjectCount;</span><br><span class="line">_scriptObject = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_USE_MEM_LEAK_DETECTION</span></span><br><span class="line">trackRef(<span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用+1</span></span><br><span class="line"><span class="keyword">void</span> Ref::retain()</span><br><span class="line">&#123;</span><br><span class="line">CCASSERT(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should greater than 0"</span>);</span><br><span class="line">++_referenceCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用-1 。如果引用为0则释放对象</span></span><br><span class="line"><span class="keyword">void</span> Ref::release()</span><br><span class="line">&#123;</span><br><span class="line">CCASSERT(_referenceCount &gt; <span class="number">0</span>, <span class="string">"reference count should greater than 0"</span>);</span><br><span class="line">--_referenceCount;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (_referenceCount == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> CC_USE_MEM_LEAK_DETECTION</span></span><br><span class="line">untrackRef(<span class="keyword">this</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">delete</span> <span class="keyword">this</span>; <span class="comment">// 注意这里 把对象 delete 了</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 提供加入自动释放池的接口。对象调用此函数即可加入自动释放池的管理。</span></span><br><span class="line">Ref* Ref::autorelease()</span><br><span class="line">&#123;</span><br><span class="line">PoolManager::getInstance()-&gt;getCurrentPool()-&gt;addObject(<span class="keyword">this</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取引用计数值</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> Ref::getReferenceCount() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _referenceCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="AutoreleasePool源码"><a href="#AutoreleasePool源码" class="headerlink" title="AutoreleasePool源码"></a>AutoreleasePool源码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 存放释放池对象的数组</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;Ref*&gt; _managedObjectArray;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往释放池添加对象</span></span><br><span class="line"><span class="keyword">void</span> AutoreleasePool::addObject(Ref* object)</span><br><span class="line">&#123;</span><br><span class="line">_managedObjectArray.push_back(object);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空释放池，将其中的所有对象都 delete</span></span><br><span class="line"><span class="keyword">void</span> AutoreleasePool::clear()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 释放所有对象</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span> &amp;obj : _managedObjectArray)</span><br><span class="line">&#123;</span><br><span class="line">obj-&gt;release();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 清空vector数组</span></span><br><span class="line">_managedObjectArray.clear();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看某个对象是否在释放池中</span></span><br><span class="line"><span class="keyword">bool</span> AutoreleasePool::contains(Ref* object) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; obj : _managedObjectArray)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (obj == object)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="PoolManager源码"><a href="#PoolManager源码" class="headerlink" title="PoolManager源码"></a>PoolManager源码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 释放池管理器单例对象</span></span><br><span class="line"><span class="keyword">static</span> PoolManager* s_singleInstance;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放池数组</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;AutoreleasePool*&gt; _releasePoolStack;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 释放池管理器的单例</span></span><br><span class="line">PoolManager* PoolManager::getInstance()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s_singleInstance == <span class="literal">nullptr</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 新建一个管理器对象</span></span><br><span class="line">s_singleInstance = <span class="keyword">new</span> PoolManager(); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加一个自动释放池</span></span><br><span class="line"><span class="keyword">new</span> AutoreleasePool(<span class="string">"cocos2d autorelease pool"</span>);<span class="comment">// 内部使用了释放池管理器的push，这里的调用很微妙，读者可以动手看一看</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> s_singleInstance;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取当前的释放池</span></span><br><span class="line">AutoreleasePool* PoolManager::getCurrentPool() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> _releasePoolStack.back();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 查看对象是否在某个释放池内</span></span><br><span class="line"><span class="keyword">bool</span> PoolManager::isObjectInPools(Ref* obj) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">const</span> <span class="keyword">auto</span>&amp; pool : _releasePoolStack)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (pool-&gt;contains(obj))</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 添加释放池对象</span></span><br><span class="line"><span class="keyword">void</span> PoolManager::push(AutoreleasePool *pool)</span><br><span class="line">&#123;</span><br><span class="line">_releasePoolStack.push_back(pool);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 释放池对象出栈</span></span><br><span class="line"><span class="keyword">void</span> PoolManager::pop()</span><br><span class="line">&#123;</span><br><span class="line">CC_ASSERT(!_releasePoolStack.empty());</span><br><span class="line">_releasePoolStack.pop_back();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="DisplayLinkDirector源码"><a href="#DisplayLinkDirector源码" class="headerlink" title="DisplayLinkDirector源码"></a>DisplayLinkDirector源码</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">void</span> DisplayLinkDirector::mainLoop()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//第一次当导演</span></span><br><span class="line"><span class="keyword">if</span> (_purgeDirectorInNextLoop)</span><br><span class="line">&#123;</span><br><span class="line">_purgeDirectorInNextLoop = <span class="literal">false</span>;</span><br><span class="line">purgeDirector();<span class="comment">//进行清理工作</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (! _invalid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 绘制场景，游戏主要工作都在这里完成</span></span><br><span class="line">drawScene();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 清空资源池</span></span><br><span class="line">PoolManager::getInstance()-&gt;getCurrentPool()-&gt;clear();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="过程分析"><a href="#过程分析" class="headerlink" title="过程分析"></a>过程分析</h3><pre><code>首先，创建了一个 Node 对象A，Node 继承Ref，因此 Ref 的引用计数为1；然后，A通过 autorelease 将自己放入自动释放池；drawScene() 完成后，一帧结束，Director 通过释放池将池中的对象 clear()，即对 Node 对象A进行 release() 操作。A的引用计数变为0，执行 delete 释放A对象。</code></pre><h1 id="Cocos2dx-文件读写"><a href="#Cocos2dx-文件读写" class="headerlink" title="Cocos2dx 文件读写"></a>Cocos2dx 文件读写</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><ul><li>在Pc端，程序是可以读写任意电脑的文件夹的</li><li>在 IOC/安卓 端，程序可以安装在任意文件夹下，但是只能访问安装文件夹里的文件</li><li>这是一个安全机制</li></ul><p><strong>cocos2dx 中的resouce资源文件夹 在打包安装到 IOS/安卓 上的时候是写死的不能更改的</strong></p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><ul><li>使用到的类 <code>FileUtils::getInstance()</code></li><li>getWritablePath() 返回一个字符串string，获取一个可以写的文件路径</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="built_in">string</span> filePath = FileUtils::getInstance()-&gt;getWritablePath() + <span class="string">"user,txt"</span>; </span><br><span class="line"><span class="comment">// 这里的getWriteablePath() 是获取可以写的路径</span></span><br><span class="line"><span class="built_in">string</span> userData = FileUtils::getInstance()-&gt;getStringFromFile(filePath);</span><br><span class="line">FileUtils::getInstance()-&gt;writeStringToFile(userData, filePath); </span><br><span class="line"><span class="comment">// 保存文本的文件信息</span></span><br></pre></td></tr></table></figure><p><strong>如果是获取安装路径的文件信息，则可以直接使用路径信息</strong><br><strong>例如，在resouce资源文件夹下有个Data文件夹，里面有个user.txt文件，则直接使用FileUtils::getInstance()-&gt;getStringFromFile(“Data/user.txt”);就可以，而不需要使用可写路径</strong></p><h2 id="反蓄序列化"><a href="#反蓄序列化" class="headerlink" title="反蓄序列化"></a>反蓄序列化</h2><ul><li><p>通过一个JSON文件，给一个类赋值</p></li><li><p>保存为UTF-8无dom格式</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"tom"</span>,<span class="attr">"age"</span>:<span class="number">12</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"lucy"</span>,<span class="attr">"age"</span>:<span class="number">13</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"jack"</span>,<span class="attr">"age"</span>:<span class="number">14</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"拉拉"</span>,<span class="attr">"age"</span>:<span class="number">15</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"波"</span>,<span class="attr">"age"</span>:<span class="number">16</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">&#123;<span class="attr">"name"</span>:<span class="string">"树莓"</span>,<span class="attr">"age"</span>:<span class="number">17</span>,<span class="attr">"address"</span>:<span class="string">"******"</span>&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student(<span class="built_in">string</span> _name, <span class="keyword">int</span> _age, <span class="built_in">string</span> _address);</span><br><span class="line">~Student();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span> name, address;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student(<span class="built_in">string</span> _name, <span class="keyword">int</span> _age, <span class="built_in">string</span> _address)&#123;</span><br><span class="line"><span class="keyword">this</span>.name = _name;</span><br><span class="line"><span class="keyword">this</span>.address = _address;</span><br><span class="line"><span class="keyword">this</span>.age = _age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>如果是在代码中用new的方法写死这个Student类，很明显是很2的</strong></p><ul><li>在Cocos2dx 的代码中使用 <code>#include &quot;spine/Json.h&quot;</code></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 需要注意的是，这里并没有使用 上面的 可写路径</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> strRoles = FileUtils::getInstance()-&gt;getStringFromFile(<span class="string">"Data/User.txt"</span>);</span><br><span class="line"><span class="comment">// 反序列化，将字符串转为json格式</span></span><br><span class="line">Json* data = Json_create(strRoles.c_str());</span><br><span class="line"><span class="comment">// 由于上述的json是一个数组，所以这里的data是一个数组</span></span><br><span class="line">Json* stu = js-&gt;child;</span><br><span class="line"><span class="comment">// json数组的第一个元素</span></span><br><span class="line"><span class="keyword">while</span>(stu)&#123;</span><br><span class="line"><span class="comment">// 这里就是一个获取的过程</span></span><br><span class="line"><span class="keyword">int</span> id = Json_getItem(stu, <span class="string">"age"</span>);</span><br><span class="line"><span class="comment">// 由于返回的是一个string类型，所以使用valueString, 同理还有 valuefloat 等</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> name = Json_getItem(stu, <span class="string">"name"</span>)-&gt;valueString;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">string</span> address = Json_getItem(stu, <span class="string">"name"</span>)-&gt;valueString;</span><br><span class="line"></span><br><span class="line">Studen stu1 = <span class="keyword">new</span> Student(name, age, address);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 往下走</span></span><br><span class="line">stu = stu-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="自带物理引擎"><a href="#自带物理引擎" class="headerlink" title="自带物理引擎"></a>自带物理引擎</h1><p>setCategoryBitmask，setCollisionBitmask，setContactTestBitmask是什么意思呢？看了官方的文档，注释，还有不知其数的介绍物理引擎大神的文章，还是一头雾水不知所以。一般为了省事，都把这三个掩码设为1，这样不论什么物体都会发生碰撞，也能响应处理函数，但是这样做真的好吗？所谓不求甚解只求洒脱可能就是这个意思，但这可不是什么好的治学态度，也正是国人从古到今这个态度造就了我国自古以来就诞生不了科学这种奇葩景象还不以为耻反以为荣到现在沦落为到处抱别人大腿求施舍的窘境…</p><p>CategoryBitmask好理解，表示一个物体所属哪个类别</p><p>可是CollisionBitmask和ContactTestBitmask就不好理解了，官方文档解释为前者与category掩码相与是否为1表示是否能发生碰撞，contactTest掩码与category掩码相于是否为1决定了是与能产生碰撞响应…. 这是什么话，我翻来覆去怎么看都觉得说了半天都是一个意思嘛！都是是否能产生碰撞响应。到底有什么区别呢？</p><p>后来经过我不断的尝试修改，终于搞明白两者含义的区别：</p><p>setCategoryBitmask，setCollisionBitmask决定了是否能产生碰撞。产生碰撞和发生碰撞响应是不同的概念。如人物奔跑时碰到了金币，这里如果没有碰撞处理函数，且把什么掩码都设为1，那么你会发现角色碰到金币时角色不再向前移动了，金币成了一个挡在路上的砖块，这时已经发生了碰撞 了，但如果你把人的类别设为1，金币的类别设为0，而两者的CollisionBitmask都为1，则金币和人的CategoryBitmask和CollisionBitmask掩码相与为0，则不会发生碰撞，在游戏里效果就是人奔跑时穿过了金币，金币就像空气一样，这就是没有发生碰撞的含义。</p><p>那么ContactTestBitmask呢，这个参数决定了是否能触发碰撞响应函数onContactBegin. 有些碰撞我们是不想处理的，如人物从空中落到一块大石头上，落到石头上只须停在石头上就行了，不需要做什么特殊的处理，这时你只需要将地面的类别设为0，人的类别设为1，ContactTestBitmask都设为1，这样相与的结果为0，就不会触发onContactBegin函数。那你该问了，你不处理那人怎么会停在石头上而不掉下去？不用担心，这是物理引擎的事，也正是物理引擎的强大之处，我们只要设置了刚体body就可以很轻松的写出一个像超级马里奥那种平台跳跃游戏也不需要判断马里奥脚上是否踩到地啦？跳的时候是不是头顶到地板啦？这种种复杂的情况，一个精灵设置了body，它就是一个硬硬的砖头，你只要掩码设好无论如何也穿不过去的。回到刚才人碰到金币的例子，如金币这种我们希望人碰到金币就Money + 1，并且金币消失，那么,就把金币和人的不论类别掩码还是ContactTest掩码都设为1，这样就瞎猫碰到死耗子一样触发了碰撞响应函数，在响应函数里再设置人的money++并且金币消失，也就达到了我们的效果</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Cocos2dx-网络通信&quot;&gt;&lt;a href=&quot;#Cocos2dx-网络通信&quot; class=&quot;headerlink&quot; title=&quot;Cocos2dx-网络通信&quot;&gt;&lt;/a&gt;Cocos2dx-网络通信&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;Socket通讯&lt;/li&gt;
&lt;li&gt;ht
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>作死的学习Linux运维</title>
    <link href="http://yoursite.com/2017/10/27/linux-%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/10/27/linux-命令/</id>
    <published>2017-10-27T08:07:26.000Z</published>
    <updated>2019-02-07T07:05:08.528Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Linux命令行"><a href="#Linux命令行" class="headerlink" title="Linux命令行"></a>Linux命令行</h2><p>大多是互联网企业在安装系统甚至不会安装图形管理软件包，而是直接使用文本模式安装，因此登陆后直接面对的就是命令行的界面</p><h3 id="Linux命令行提示符介绍"><a href="#Linux命令行提示符介绍" class="headerlink" title="Linux命令行提示符介绍"></a>Linux命令行提示符介绍</h3><p>Linux命令行结尾的提示符有 “#” 和 “$” 两种不同的符号  </p><pre><code># 是超级管理员root用户对应的命令行 $ 是普通用户oldboy对应的命令行</code></pre><h3 id="命令行的快捷键"><a href="#命令行的快捷键" class="headerlink" title="命令行的快捷键"></a>命令行的快捷键</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">tab命令或路径等的补全键，Linux最有用的快捷键</span><br><span class="line">Ctrl+a光标回到命令行行首</span><br><span class="line">Ctrl+e光标回到命令行行尾</span><br><span class="line">Ctrl+f光标向右移动一个字符（相当于方向键右键）</span><br><span class="line">Ctrl+b光标向左移动一个字符（相当于方向键左键）</span><br><span class="line">Ctrl+insert复制命令行内容</span><br><span class="line">shift+insert粘贴命令行内容</span><br><span class="line">Ctrl+k剪切（删除）光标处到行尾的字符</span><br><span class="line">Ctrl+u剪切（删除）光标处到行首的字符</span><br><span class="line">Ctrl+w剪切（删除）光标钱的一个单词</span><br><span class="line">Ctrl+y粘贴上面三个剪贴的内容</span><br><span class="line">Ctrl+c中断终端正在执行的任务或者删除整行</span><br><span class="line">!!执行上一条命令</span><br><span class="line">!pw执行最近以pw开头的命令</span><br><span class="line">!pw:p仅打印最近以pw开头的命令，不执行</span><br><span class="line">!num执行历史命令列表的第num条命令</span><br><span class="line">!$上一条命令的最后一个参数</span><br><span class="line">Esc+.获取上一条命令最后的部分</span><br><span class="line">Esc+b移动到当前单词的开头</span><br><span class="line">Esc+f移动到当前单词的结尾</span><br></pre></td></tr></table></figure><h3 id="Linux命令行下查看命令帮助"><a href="#Linux命令行下查看命令帮助" class="headerlink" title="Linux命令行下查看命令帮助"></a>Linux命令行下查看命令帮助</h3><h4 id="man命令"><a href="#man命令" class="headerlink" title="man命令"></a>man命令</h4><p>man命令是Linux系统中最核心的命令之一，因为通过它可以查看其他linux命令的使用信息，当然还可以查看软件的配置文件、系统调用、库函数等的帮助信息</p><h5 id="语法格式"><a href="#语法格式" class="headerlink" title="语法格式"></a>语法格式</h5><pre><code>man 参数选项 命令/文件</code></pre><h6 id="参数选项"><a href="#参数选项" class="headerlink" title="参数选项"></a>参数选项</h6><table><br><tr><br><td>数字参数</td><td>说明</td><td>解释说明</td><br></tr><br><tr><br><td>1</td><td>User Commands</td><td>用户命令相关</td><br></tr><br><tr><br><td>2</td><td>System Calls</td><td>系统调用相关</td><br></tr><br><tr><br><td>3</td><td>C Library Functions</td><td>C的库函数相关</td><br></tr><br><tr><br><td>4</td><td>Devices and Special Files</td><td>设备和特殊文件相关</td><br></tr><br><tr><br><td>5</td><td>File Formats and Conventions</td><td>文件格式和规则</td><br></tr><br><tr><br><td>6</td><td>Games et. AI.</td><td>游戏及其他</td><br></tr><br><tr><br><td>7</td><td>Miscellanea</td><td>宏，包，及其他杂项</td><br></tr><br><tr><br><td>8</td><td>System Administration tools and Deamons</td><td>系统管理员命令和进程</td><br></tr><br></table><h5 id="查阅的内容格式"><a href="#查阅的内容格式" class="headerlink" title="查阅的内容格式"></a>查阅的内容格式</h5><table><br><tr><br><td>man帮助信息中的标题</td><td>功能说明</td><br></tr><br><tr><br><td>NAME</td><td>命令说明介绍</td><br></tr><br><tr><br><td>SYNOPSIS</td><td>命令的基本使用语法</td><br></tr><br><tr><br><td>DESCRIPTION</td><td>命令行使用详细描述，以及相关参数选项说明</td><br></tr><br><tr><br><td>OPTION</td><td>命令相关参数选项说明</td><br></tr><br><tr><br><td>COMMANDS</td><td>在执行这个程序的时候，可以在此程序中执行的命令</td><br></tr><br><tr><br><td>FILES</td><td>程序涉及的相关文件</td><br></tr><br><tr><br><td>EXAMPLES</td><td>命令的一些例子</td><br></tr><br><tr><br><td>SEE ALSO</td><td>和命令相关的信息说明</td><br></tr><br><tr><br><td>BUGS（REPORTIONG BUGS）</td><td>命令对应缺陷问题的描述</td><br></tr><br><tr><br><td>COPYRIGHT</td><td>坂玄信息相关声明</td><br></tr><br><tr><br><td>AUTHOR</td><td>作者介绍</td><br></tr><br></table><h4 id="–help获取命令帮助"><a href="#–help获取命令帮助" class="headerlink" title="–help获取命令帮助"></a>–help获取命令帮助</h4><p>使用起来很简单啦，就是 “ 命令 –help “</p><h5 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h5><pre><code>--help 获取的是常用的帮助信息， man命令获取的是更过更复杂的帮助信息例如：    mv --help</code></pre><h4 id="help获取bash内置命令"><a href="#help获取bash内置命令" class="headerlink" title="help获取bash内置命令"></a>help获取bash内置命令</h4><p>在Linux系统里有一些特殊的命令，他们就是bash程序的内置命令，例如：cd，ls……<br>这些命令并不存在真实的程序文件，对于这些命令，查看帮助的方式就是使用help</p><h5 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h5><pre><code>help 命令例如：    help cd</code></pre><h4 id="info获取帮助信息"><a href="#info获取帮助信息" class="headerlink" title="info获取帮助信息"></a>info获取帮助信息</h4><p>Linux系统中的info命令是一个查看程序对应文档的命令，可以作为man及help命令的帮助补充，用的少</p><h5 id="使用方法-2"><a href="#使用方法-2" class="headerlink" title="使用方法"></a>使用方法</h5><pre><code>info 命令例如：    info ls</code></pre><h4 id="从互联网获取命令帮助信息"><a href="#从互联网获取命令帮助信息" class="headerlink" title="从互联网获取命令帮助信息"></a>从互联网获取命令帮助信息</h4><pre><code>简单一条 百度，google，总之怎么快怎么来。</code></pre><p><img src="https://i.imgur.com/wrkAmPX.jpg" alt=""></p><h3 id="Linux的关机，重启，注销命令"><a href="#Linux的关机，重启，注销命令" class="headerlink" title="Linux的关机，重启，注销命令"></a>Linux的关机，重启，注销命令</h3><h4 id="shutdown命令"><a href="#shutdown命令" class="headerlink" title="shutdown命令"></a>shutdown命令</h4><h5 id="使用方法及例子"><a href="#使用方法及例子" class="headerlink" title="使用方法及例子"></a>使用方法及例子</h5><pre><code>shutdown [OPTION]... TIME[MESSAFE]shutdown [选项] 时间 信息通常形况下，一般用的比较多的就是 shutdown -h now 或者 shutdown -r now例子：    shutdown -h +1        #一分钟后关机    shutdown -r 11:00    #十一点关机</code></pre><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-r</td><td>重启系统，而不是关机</td><br></tr><br><tr><br><td>-h</td><td>关机</td><br></tr><br><tr><br><td>-H</td><td>关机，但是并不是完全关机，不常用</td><br></tr><br><tr><br><td>-P</td><td>关机，不常用</td><br></tr><br><tr><br><td>-c</td><td>取消正在执行的shutdown命令</td><br></tr><br><tr><br><td>-k</td><td>只发送关机提示，但是并不关机，就闹着玩玩</td><br></tr><br></table><br>​<br><br>##### 工作原理<br><br>shutdown命令的工作原理为：一旦到达关机时间，shutdown命令就会发送请求给系统的init进程将系统调整到合适的运行级别（运行级别请参考runlevel命令，运行级别请查看/etc/inittab文件说明），其中0表示关机，6表示重启。所以，执行 “init 0”就表示关机，执行”init 6”表示重启<br><br><br><br>#### halt/poweroff/reboot 重启关机命令<br><br>##### 语法格式<br>    reboot [OPTION]…<br>    halt [OPTION]…<br>    poweroff [OPTION]…<br>    通常情况下，执行这三个命令不带任何参数<br><br>##### 使用<br>    halt         #就是直接关机<br>    reboot         #就是直接重启<br>    poweroff    #就是直接关机<br><br><br>#### 一些常见的关机，重启，注销命令<br><br><table><br><tr><br><td>命令</td><td>说明</td><br></tr><br><tr><br><td>shutdown -h now</td><td>立刻关机</td><br></tr><br><tr><br><td>shutdwn -h +1</td><td>一分钟后关机，+1也可以是时间点，例如：11：00</td><br></tr><br><tr><br><td>halt</td><td>立刻停止系统，需要人工关闭电源</td><br></tr><br><tr><br><td>init 0</td><td>切换运行级别到0，关机</td><br></tr><br><tr><br><td>poweroff</td><td>立刻停止系统，并且关闭电源</td><br></tr><br><tr><br><td>reboot</td><td>立刻重启</td><br></tr><br><tr><br><td>shutdown -r now</td><td>立刻重启</td><br></tr><br><tr><br><td>shutdown -r +1</td><td>一分钟后重启</td><br></tr><br><tr><br><td>init 6</td><td>切换运行级别到6，重启</td><br></tr><br><tr><br><td>logout</td><td>注销退出当前用户</td><br></tr><br><tr><br><td>exit</td><td>注销退出当前用户窗口</td><br></tr><br></table><h2 id="文件和目录操作命令"><a href="#文件和目录操作命令" class="headerlink" title="文件和目录操作命令"></a>文件和目录操作命令</h2><h3 id="pwd-显示当前所在的位置"><a href="#pwd-显示当前所在的位置" class="headerlink" title="pwd 显示当前所在的位置"></a>pwd 显示当前所在的位置</h3><h4 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h4><pre><code>pwd命令是 &quot;print working directory&quot;中每个单词的首字母缩写，其功能是显示当前工作目录的绝对路径。</code></pre><h4 id="语法格式-1"><a href="#语法格式-1" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>pwd [option]pwd [选项]</code></pre><h4 id="选项说明"><a href="#选项说明" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-L</td><td>logical首字母缩写，表示显示逻辑路径，取PWD系统环境变量的值</td><br></tr><br><tr><br><td>-P</td><td>physical首字符缩写，表示显示物理路径时如果当前目录路径是软链接文件，则会显示软链接文件对应的源文件</td><br></tr><br></table><pre><code>查看命令帮助时，我们经常会看到 &quot;-L,--logical&quot; 这样的选项格式，这种写法的意思是 -L 和 --logical 的功能是一样的。</code></pre><h4 id="高级范例"><a href="#高级范例" class="headerlink" title="高级范例"></a>高级范例</h4><p>为什么管理员会用到pwd命令呢？<br>这是因为我们通过命令行管理Linux时，经常会切换到不同的路径，而输入pwd命令可以随时查看当前的路径是什么。<br>其实，在喜荣忠使用Bash命令行就会自动显示用户当前所在的路径，但是默认情况下这种路径显示不全。  </p><p>当然可以通过修改PS1对应的值来改变；</p><h4 id="修改PS1"><a href="#修改PS1" class="headerlink" title="修改PS1"></a>修改PS1</h4><table><br><tr><br><td>PS1</td><td>含义</td><br></tr><br><tr><br><td>\d</td><td>代表日期，格式为 weekday month date</td><br></tr><br><tr><br><td>\H</td><td>完整的主机名称</td><br></tr><br><tr><br><td>\h</td><td>仅取主机的第一个名字</td><br></tr><br><tr><br><td>\t</td><td>显示时间为24小时格式，如：HH：MM：SS</td><br></tr><br><tr><br><td>\T</td><td>显示时间为12小时格式</td><br></tr><br><tr><br><td>\A</td><td>显示时间为24小时格式，如：HH：MM</td><br></tr><br><tr><br><td>\u</td><td>当前用户的账号信息</td><br></tr><br><tr><br><td>\v</td><td>BASH的版本信息</td><br></tr><br><tr><br><td>\w</td><td>显示完整的路径，其中家目录会以~替代</td><br></tr><br><tr><br><td>\W</td><td>利用basename取得工作目录名称，所以只会列出最后一个目录</td><br></tr><br><tr><br><td>#</td><td>执行的第几条命令</td><br></tr><br><tr><br><td>\$</td><td>提示字符，root用户为#，否则为$</td><br></tr><br></table><pre><code>因此，要查看当前PS1变量的值，可采用如下命令：    echo $PS1        #打印超级管理员对应的PS1值    打印出：[\u@\u \W]\$        #  @时一个分隔符，和邮箱地址中的@作用类似修改PS1变量对应的值：    PS1=&apos;[\u@\h \w]&apos;    #此命令仅临时生效    编辑 /etc/bashrc 文件，找到这个语句 [&quot;$PS1&quot;=&quot;\\s-\\v\\\$&quot;]&amp;&amp;PS1=&quot;[\u@\h \W]\\$&quot;    修改为：[&quot;$PS1&quot;=&quot;\\s-\\v\\\$&quot;]&amp;&amp;PS1=&quot;[\u@\h \w]\\$&quot;最后注销重启就行了</code></pre><h3 id="cd-切换目录"><a href="#cd-切换目录" class="headerlink" title="cd 切换目录"></a>cd 切换目录</h3><h4 id="功能说明"><a href="#功能说明" class="headerlink" title="功能说明"></a>功能说明</h4><pre><code>cd命令时 &quot;change direcotry&quot;中每个单词的首字母缩写，其功能时从当前工作目录切换到制定的工作目录</code></pre><h4 id="语法格式-2"><a href="#语法格式-2" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>cd [option] [dir]cd [选项] [目录]</code></pre><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-P</td><td>如果切换的目标目录是一个软链接，则会直接切换到软链接指向的真正物理目标目录，和pwd命令的-P选项功能类似</td><br></tr><br><tr><br><td>-L</td><td>功能与-P相反，如果切换的目标目录是一个软连接，则直接切换到软链接所在的目录</td><br></tr><br><tr><br><td>-</td><td>当只使用”-“选项时，将会从当前目录切换到系统环境变量”OLDPWD”对应值的目录路径</td><br></tr><br><tr><br><td>~</td><td>当只是用”~”选项时，将会从当前目录切换到系统环境变量”HOME”对应值的目录路径</td><br></tr><br><tr><br><td>..</td><td>当只是用”..”选项时，将会从当前目录切换到当前目录的上一级目录所在的路径</td><br></tr><br></table><h4 id="使用范例"><a href="#使用范例" class="headerlink" title="使用范例"></a>使用范例</h4><ul><li>cd /etc        进入系统etc目录</li><li>cd ..            返回上一级目录</li><li>cd ../../        退回当前目录的上两级目录</li><li>cd ~            切换到家目录</li><li>cd -            返回当前用户上一次所在的目录</li></ul><h3 id="mkdir创建目录"><a href="#mkdir创建目录" class="headerlink" title="mkdir创建目录"></a>mkdir创建目录</h3><ul><li>mkdir命令是”make directories”中每个单词的字母组成，其功能是创建目录，默认情况下要创建的目录已存在，则会报错。</li></ul><h4 id="语法格式-3"><a href="#语法格式-3" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>mkdir [optioin] [directory]mkdir [选项] [目录]mkdir 可以同时创建多个目录，格式为 mkdir dir1 dir2 dir3 ...</code></pre><h4 id="选项说明-1"><a href="#选项说明-1" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-p</td><td>递归创建目录，即使要创建的目录已经存在也不会报错提示目录存在</td><br></tr><br><tr><br><td>-m</td><td>设置新创建目录的默认目录对应的权限</td><br></tr><br><tr><br><td>-v</td><td>显示创建目录的过程</td><br></tr><br></table><h4 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h4><ul><li>mkdir data             #创建data文件夹</li><li>mkdir oldboy/test        #创建oldboy文件夹并在oldboy目录下创建test目录</li><li>mkdir -pv oldboy1/test#创建oldboy目录并在oldboy目录下创建test目录，同时显示过程</li><li>mkdir -m 333 dir2        #创建dir2目录，并且设置权限为333</li><li>mkdir -pv oldboy/{dir1_1,dir1_2}/{dir2_1, dir2_2}…<ul><li>解释：</li><li>mkdir: created direcory ‘oldboy/dir1_1’</li><li>mkdir: created direcory ‘oldboy/dir1_1/dir2_1’</li><li>mkdir: created direcory ‘oldboy/dir1_1/dir2_2’</li><li>mkdir: created direcory ‘oldboy/dir1_2’</li><li>mkdir: created direcory ‘oldboy/dir1_2/dir2_1’</li><li>mkdir: created direcory ‘oldboy/dir1_2/dir2_2’</li></ul></li></ul><h3 id="touch-创建空文件或改变文件的时间戳属性"><a href="#touch-创建空文件或改变文件的时间戳属性" class="headerlink" title="touch 创建空文件或改变文件的时间戳属性"></a>touch 创建空文件或改变文件的时间戳属性</h3><ul><li>touch 有两个功能<ul><li>创建新的空文件</li><li>改变已有文件的时间戳属性</li></ul></li></ul><h4 id="语法格式-4"><a href="#语法格式-4" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>touch [optioini] [file]touch [选项]    [文件]</code></pre><ul><li>touch 是创建空的文件， mkdir 是创建空的目录，是不一样的</li></ul><h4 id="选项说明-2"><a href="#选项说明-2" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-a</td><td>只更改指定文件的最后访问时间</td><br></tr><br><tr><br><td>-d STRING</td><td>使用字符串STRING代表的时间作为模板设置指定文件的时间属性</td><br></tr><br><tr><br><td>-m</td><td>只更改指定文件的最后修改时间</td><br></tr><br><tr><br><td>-r file</td><td>将指定问及爱你的时间属性这是为与模板文件file的时间属性相同</td><br></tr><br><tr><br><td>-t STAMP</td><td>使用[[CC]YY]MMDDhhmm[.ss]格式的时间设置文件的时间属性，从左到右依次是：世纪，年，月，日，时，分，秒</td><br></tr><br></table><h4 id="使用范例-1"><a href="#使用范例-1" class="headerlink" title="使用范例"></a>使用范例</h4><ul><li>touch test.txt            #创建空的文件test.txt</li><li>touch a.txt b.txt         #同时创建多个文件</li><li>touch stu{01..05}.txt        #同时创建01~05文件</li><li>stat test.txt                #用stat命令查看文件是时间戳属性</li><li>touch test.txt            #更改最后的修改的时间为当前时间</li><li>touch -d 20201001 test.txt#修改时间更改为2020年</li><li>touch -r a.txt test.txt    #修改test.txt的时间属性与a.txt时间属性一致</li></ul><h4 id="时间戳形式"><a href="#时间戳形式" class="headerlink" title="时间戳形式"></a>时间戳形式</h4><ul><li><p>stat命令对应的时间戳</p><ul><li>Access:     最后访问时间</li><li>Modify:    最后修改文件时间</li><li>Change:    最后改变文件状态的时间</li></ul></li><li><p>ls命令对应的时间戳</p><ul><li>mtime:    最后修改时间(ls -lt)</li><li>ctime:    状态改变时间(ls -lc)</li><li>atime:    最后访问时间(ls -lu)</li></ul></li></ul><h3 id="ls-显示目录下的内容及相关属性"><a href="#ls-显示目录下的内容及相关属性" class="headerlink" title="ls 显示目录下的内容及相关属性"></a>ls 显示目录下的内容及相关属性</h3><ul><li>ls命令可以理解为英文单词list的缩写，其功能是列出列表的内容及其内容属性</li></ul><h4 id="语法格式-5"><a href="#语法格式-5" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>ls [option] [file]ls [选项] [&lt;文件或目录&gt;]</code></pre><h4 id="选项说明-3"><a href="#选项说明-3" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-l</td><td>使用长格式列出文件及目录信息</td><br></tr><br><tr><br><td>-a</td><td>显示目录下的所有文件，包括以’.’字符开始的隐藏文件</td><br></tr><br><tr><br><td>-t</td><td>根据最后的修改时间(mtime)排序，默认是按文件名排序</td><br></tr><br><tr><br><td>-r</td><td>以相反次序排序</td><br></tr><br><tr><br><td>-F</td><td>在条目后加上文件类型的只是符号(*,.,=,@,|中的一个)</td><br></tr><br><tr><br><td>-p</td><td>直在目录后面加上 ‘/‘</td><br></tr><br><tr><br><td>-i</td><td>显示inode节点信息</td><br></tr><br><tr><br><td>-d</td><td>当遇到目录时，列出目录本身而非目录内的文件，并不跟随符号链接</td><br></tr><br><tr><br><td>-h</td><td>以人类可读的信息显示文件或目录大小</td><br></tr><br><tr><br><td>-A</td><td>列出所有文件，包括隐藏文件，但不包括’.’’..’</td><br></tr><br><tr><br><td>-S</td><td>根据文件大小排序</td><br></tr><br><tr><br><td>-R</td><td>递归列数所有子目录</td><br></tr><br><tr><br><td>-x</td><td>逐行列出项目而不是逐栏列出</td><br></tr><br><tr><br><td>-X</td><td>根据扩展名排序</td><br></tr><br><tr><br><td>-c</td><td>根据状态改变时间排序(ctime)</td><br></tr><br><tr><br><td>-u</td><td>根据最后访问时间排序(atime)</td><br></tr><br><tr><br><td>-color={never,always,auto}</td><td>不同的文件类型显示不同的颜色参数，never不现实，auto自动，always总是显示</td><br></tr><br><tr><br><td>–full-time</td><td>以完整的时间格式输出</td><br></tr><br><tr><br><td>–time-style={full-iso,long-iso,iso,local}</td><td>以不同的时间格式输出，long-iso效果最好</td><br></tr><br><tr><br><td>–time={atime,ctiom}</td><td>按不同的时间属性输出</td><br></tr><br></table><h4 id="使用范例-2"><a href="#使用范例-2" class="headerlink" title="使用范例"></a>使用范例</h4><ul><li>ls                #不带参数</li><li>ls -a                #显示’.’</li><li>ls -A                #显示所有文件，包括隐藏文件</li><li>ls -l                #长格式输出文件类型，权限，链接数，属组，时间等</li><li>ls -l –time-style=long-iso #以long-iso方式显示时间</li><li>ls -F                #显示文件，文件夹后加上’/‘</li><li>当然你也可以用alias方法给原本很长ls命令取个别名<ul><li>alias lst=’ls -l –time-style=long-iso’<ul><li>给 ls -l –time-style=long-iso 起别名为 lst</li></ul></li></ul></li><li><p>ls -F                #给文件夹后加上’/‘，其他文件加上其他字符</p><ul><li>‘*’    可执行的普通文件</li><li>‘/‘    目录</li><li>‘=’    套接字(sockets)</li><li>‘|’    FIFOS</li><li>‘@’    符号链接</li></ul></li><li><p>ls -lhi</p><ul><li>命令对应列数意义</li><li>第一列：    inode索引节点的编号</li><li>第二列:    文件类型及权限</li><li>第三列：    硬连接个数</li><li>第四列:    文件或目录所属的用户</li><li>第五列：    文件或目录所属的组</li><li>第六列：    文件或目录的大小</li><li>第七，八，九列：    文件或目录的修改时间</li><li>第十列：    实际的文件名或目录名</li></ul></li></ul><h3 id="cp-复制文件或目录"><a href="#cp-复制文件或目录" class="headerlink" title="cp 复制文件或目录"></a>cp 复制文件或目录</h3><ul><li>cp命令可以理解为英文单词copy的缩写，其功能为复制文件或目录</li></ul><h4 id="语法格式-6"><a href="#语法格式-6" class="headerlink" title="语法格式"></a>语法格式</h4><pre><code>cp [option] [source] [dest]cp [选项] [源文件] [目标文件]</code></pre><h4 id="选项说明-4"><a href="#选项说明-4" class="headerlink" title="选项说明"></a>选项说明</h4><table><br><tr><br><td>参数选项</td><td>解释说明</td><br></tr><br><tr><br><td>-p</td><td>复制文件时保持源文件的所有者，权限信息及时间属性</td><br></tr><br><tr><br><td>-d</td><td>如果复制的源文件是符号链接，那么仅复制链接本身，而且保留符号链接所指向的目标文件或目录</td><br></tr><br><tr><br><td>-r</td><td>递归复制目录，即复制目录下的所有层级的子目录及文件</td><br></tr><br><tr><br><td>-a</td><td>等同于上面的p,d,r这三个选项功能的综合</td><br></tr><br><tr><br><td>-i</td><td>覆盖已有文件前提示用户确认</td><br></tr><br><tr><br><td>-t</td><td>默认情况下命令格式是 ‘cp源文件 目标文件’，使用-t后变成 ‘cp 目标文件 源文件’</td><br></tr><br></table><h4 id="使用范例-3"><a href="#使用范例-3" class="headerlink" title="使用范例"></a>使用范例</h4><ul><li>cp -i test.file file1.test</li></ul><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><pre><code>arch 显示机器的处理器架构(1) uname -m 显示机器的处理器架构(2) uname -r 显示正在使用的内核版本 dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI) hdparm -i /dev/hda 罗列一个磁盘的架构特性 hdparm -tT /dev/sda 在磁盘上执行测试性读取操作 cat /proc/cpuinfo 显示CPU info的信息 cat /proc/interrupts 显示中断 cat /proc/meminfo 校验内存使用 cat /proc/swaps 显示哪些swap被使用 cat /proc/version 显示内核的版本 cat /proc/net/dev 显示网络适配器及统计 cat /proc/mounts 显示已加载的文件系统 lspci -tv 罗列 PCI 设备 lsusb -tv 显示 USB 设备 date 显示系统日期 cal 2007 显示2007年的日历表 date 041217002007.00 设置日期和时间 - 月日时分年.秒 clock -w 将时间修改保存到 BIOS </code></pre><h2 id="文件和目录"><a href="#文件和目录" class="headerlink" title="文件和目录"></a>文件和目录</h2><pre><code>cd /home 进入 &apos;/ home&apos; 目录&apos; cd .. 返回上一级目录 cd ../.. 返回上两级目录 cd 进入个人的主目录 cd ~user1 进入个人的主目录 cd - 返回上次所在的目录 pwd 显示工作路径 ls 查看目录中的文件 ls -F 查看目录中的文件 ls -l 显示文件和目录的详细资料 ls -a 显示隐藏文件 ls *[0-9]* 显示包含数字的文件名和目录名 tree 显示文件和目录由根目录开始的树形结构(1) lstree 显示文件和目录由根目录开始的树形结构(2) mkdir dir1 创建一个叫做 &apos;dir1&apos; 的目录&apos; mkdir dir1 dir2 同时创建两个目录 mkdir -p /tmp/dir1/dir2 创建一个目录树 rm -f file1 删除一个叫做 &apos;file1&apos; 的文件&apos; rmdir dir1 删除一个叫做 &apos;dir1&apos; 的目录&apos; rm -rf dir1 删除一个叫做 &apos;dir1&apos; 的目录并同时删除其内容 rm -rf dir1 dir2 同时删除两个目录及它们的内容 mv dir1 new_dir 重命名/移动 一个目录 cp file1 file2 复制一个文件 cp dir/* . 复制一个目录下的所有文件到当前工作目录 cp -a /tmp/dir1 . 复制一个目录到当前工作目录 cp -a dir1 dir2 复制一个目录 ln -s file1 lnk1 创建一个指向文件或目录的软链接 ln file1 lnk1 创建一个指向文件或目录的物理链接 touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm) file file1 outputs the mime type of the file as text iconv -l 列出已知的编码 iconv -f fromEncoding -t toEncoding inputFile &gt; outputFile creates a new from the given input file by assuming it is encoded in fromEncoding and converting it to toEncoding. find . -maxdepth 1 -name *.jpg -print -exec convert &quot;{}&quot; -resize 80x60 &quot;thumbs/{}&quot; \; batch resize files in the current directory and send them to a thumbnails directory (requires convert from Imagemagick) </code></pre><h2 id="文件搜索"><a href="#文件搜索" class="headerlink" title="文件搜索"></a>文件搜索</h2><pre><code>find / -name file1 从 &apos;/&apos; 开始进入根文件系统搜索文件和目录 find / -user user1 搜索属于用户 &apos;user1&apos; 的文件和目录 find /home/user1 -name \*.bin 在目录 &apos;/ home/user1&apos; 中搜索带有&apos;.bin&apos; 结尾的文件 find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件 find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件 find / -name \*.rpm -exec chmod 755 &apos;{}&apos; \; 搜索以 &apos;.rpm&apos; 结尾的文件并定义其权限 find / -xdev -name \*.rpm 搜索以 &apos;.rpm&apos; 结尾的文件，忽略光驱、捷盘等可移动设备 locate \*.ps 寻找以 &apos;.ps&apos; 结尾的文件 - 先运行 &apos;updatedb&apos; 命令 whereis halt 显示一个二进制文件、源码或man的位置 which halt 显示一个二进制文件或可执行文件的完整路径 </code></pre><h2 id="挂载一个文件系统"><a href="#挂载一个文件系统" class="headerlink" title="挂载一个文件系统"></a>挂载一个文件系统</h2><pre><code>mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 &apos;/ mnt/hda2&apos; 已经存在 umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 &apos;/ mnt/hda2&apos; 退出 fuser -km /mnt/hda2 当设备繁忙时强制卸载 umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用 mount /dev/fd0 /mnt/floppy 挂载一个软盘 mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrom mount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrom mount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrom mount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件 mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统 mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备 mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享 </code></pre><h2 id="磁盘空间"><a href="#磁盘空间" class="headerlink" title="磁盘空间"></a>磁盘空间</h2><pre><code>df -h 显示已经挂载的分区列表 ls -lSr |more 以尺寸大小排列文件和目录 du -sh dir1 估算目录 &apos;dir1&apos; 已经使用的磁盘空间&apos; du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小 rpm -q -a --qf &apos;%10{SIZE}t%{NAME}n&apos; | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统) dpkg-query -W -f=&apos;${Installed-Size;10}t${Package}n&apos; | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统) </code></pre><h2 id="用户和群组"><a href="#用户和群组" class="headerlink" title="用户和群组"></a>用户和群组</h2><pre><code>groupadd group_name 创建一个新用户组 groupdel group_name 删除一个用户组 groupmod -n new_group_name old_group_name 重命名一个用户组 useradd -c &quot;Name Surname &quot; -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 &quot;admin&quot; 用户组的用户 useradd user1 创建一个新用户 userdel -r user1 删除一个用户 ( &apos;-r&apos; 排除主目录) usermod -c &quot;User FTP&quot; -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性 passwd 修改口令 passwd user1 修改一个用户的口令 (只允许root执行) chage -E 2005-12-31 user1 设置用户口令的失效期限 pwck 检查 &apos;/etc/passwd&apos; 的文件格式和语法修正以及存在的用户 grpck 检查 &apos;/etc/passwd&apos; 的文件格式和语法修正以及存在的群组 newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 </code></pre><h2 id="文件的权限-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的权限-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消</h2><pre><code>ls -lh 显示权限 ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示 chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限 chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限 chown user1 file1 改变一个文件的所有人属性 chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性 chgrp group1 file1 改变文件的群组 chown user1:group1 file1 改变一个文件的所有人和群组属性 find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件 chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限 chmod u-s /bin/file1 禁用一个二进制文件的 SUID位 chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的 chmod g-s /home/public 禁用一个目录的 SGID 位 chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件 chmod o-t /home/public 禁用一个目录的 STIKY 位 </code></pre><h2 id="文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消"><a href="#文件的特殊属性-使用-“-”-设置权限，使用-“-“-用于取消" class="headerlink" title="文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消"></a>文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消</h2><pre><code>chattr +a file1 只允许以追加方式读写文件 chattr +c file1 允许这个文件能被内核自动压缩/解压 chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件 chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接 chattr +s file1 允许一个文件被安全地删除 chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘 chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件 lsattr 显示特殊的属性 </code></pre><h2 id="打包和压缩文件"><a href="#打包和压缩文件" class="headerlink" title="打包和压缩文件"></a>打包和压缩文件</h2><pre><code>bunzip2 file1.bz2 解压一个叫做 &apos;file1.bz2&apos;的文件 bzip2 file1 压缩一个叫做 &apos;file1&apos; 的文件 gunzip file1.gz 解压一个叫做 &apos;file1.gz&apos;的文件 gzip file1 压缩一个叫做 &apos;file1&apos;的文件 gzip -9 file1 最大程度压缩 rar a file1.rar test_file 创建一个叫做 &apos;file1.rar&apos; 的包 rar a file1.rar file1 file2 dir1 同时压缩 &apos;file1&apos;, &apos;file2&apos; 以及目录 &apos;dir1&apos; rar x file1.rar 解压rar包 unrar x file1.rar 解压rar包 tar -cvf archive.tar file1 创建一个非压缩的 tarball tar -cvf archive.tar file1 file2 dir1 创建一个包含了 &apos;file1&apos;, &apos;file2&apos; 以及 &apos;dir1&apos;的档案文件 tar -tf archive.tar 显示一个包中的内容 tar -xvf archive.tar 释放一个包 tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下 tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包 tar -jxvf archive.tar.bz2 解压一个bzip2格式的压缩包 tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包 tar -zxvf archive.tar.gz 解压一个gzip格式的压缩包 zip file1.zip file1 创建一个zip格式的压缩包 zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包 unzip file1.zip 解压一个zip格式压缩包 </code></pre><h2 id="RPM-包-（Fedora-Redhat及类似系统）"><a href="#RPM-包-（Fedora-Redhat及类似系统）" class="headerlink" title="RPM 包 - （Fedora, Redhat及类似系统）"></a>RPM 包 - （Fedora, Redhat及类似系统）</h2><pre><code>rpm -ivh package.rpm 安装一个rpm包 rpm -ivh --nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告 rpm -U package.rpm 更新一个rpm包但不改变其配置文件 rpm -F package.rpm 更新一个确定已经安装的rpm包 rpm -e package_name.rpm 删除一个rpm包 rpm -qa 显示系统中所有已经安装的rpm包 rpm -qa | grep httpd 显示所有名称中包含 &quot;httpd&quot; 字样的rpm包 rpm -qi package_name 获取一个已安装包的特殊信息 rpm -qg &quot;System Environment/Daemons&quot; 显示一个组件的rpm包 rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表 rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表 rpm -q package_name --whatrequires 显示与一个rpm包存在依赖关系的列表 rpm -q package_name --whatprovides 显示一个rpm包所占的体积 rpm -q package_name --scripts 显示在安装/删除期间所执行的脚本l rpm -q package_name --changelog 显示一个rpm包的修改历史 rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供 rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表 rpm --import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书 rpm --checksig package.rpm 确认一个rpm包的完整性 rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性 rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间 rpm -Va 检查系统中所有已安装的rpm包- 小心使用 rpm -Vp package.rpm 确认一个rpm包还未安装 rpm2cpio package.rpm | cpio --extract --make-directories *bin* 从一个rpm包运行可执行文件 rpm -ivh /usr/src/redhat/RPMS/`arch`/package.rpm 从一个rpm源码安装一个构建好的包 rpmbuild --rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包 </code></pre><h2 id="YUM-软件包升级器-（Fedora-RedHat及类似系统）"><a href="#YUM-软件包升级器-（Fedora-RedHat及类似系统）" class="headerlink" title="YUM 软件包升级器 - （Fedora, RedHat及类似系统）"></a>YUM 软件包升级器 - （Fedora, RedHat及类似系统）</h2><pre><code>yum install package_name 下载并安装一个rpm包 yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系 yum update package_name.rpm 更新当前系统中所有安装的rpm包 yum update package_name 更新一个rpm包 yum remove package_name 删除一个rpm包 yum list 列出当前系统中安装的所有包 yum search package_name 在rpm仓库中搜寻软件包 yum clean packages 清理rpm缓存删除下载的包 yum clean headers 删除所有头文件 yum clean all 删除所有缓存的包和头文件 </code></pre><h2 id="DEB-包-Debian-Ubuntu-以及类似系统"><a href="#DEB-包-Debian-Ubuntu-以及类似系统" class="headerlink" title="DEB 包 (Debian, Ubuntu 以及类似系统)"></a>DEB 包 (Debian, Ubuntu 以及类似系统)</h2><pre><code>dpkg -i package.deb 安装/更新一个 deb 包 dpkg -r package_name 从系统删除一个 deb 包 dpkg -l 显示系统中所有已经安装的 deb 包 dpkg -l | grep httpd 显示所有名称中包含 &quot;httpd&quot; 字样的deb包 dpkg -s package_name 获得已经安装在系统中一个特殊包的信息 dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表 dpkg --contents package.deb 显示尚未安装的一个包所提供的文件列表 dpkg -S /bin/ping 确认所给的文件由哪个deb包提供 </code></pre><h2 id="APT-软件工具-Debian-Ubuntu-以及类似系统"><a href="#APT-软件工具-Debian-Ubuntu-以及类似系统" class="headerlink" title="APT 软件工具 (Debian, Ubuntu 以及类似系统)"></a>APT 软件工具 (Debian, Ubuntu 以及类似系统)</h2><pre><code>apt-get install package_name 安装/更新一个 deb 包 apt-cdrom install package_name 从光盘安装/更新一个 deb 包 apt-get update 升级列表中的软件包 apt-get upgrade 升级所有已安装的软件 apt-get remove package_name 从系统删除一个deb包 apt-get check 确认依赖的软件仓库正确 apt-get clean 从下载的软件包中清理缓存 apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 </code></pre><h2 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h2><pre><code>cat file1 从第一个字节开始正向查看文件的内容 tac file1 从最后一行开始反向查看一个文件的内容 more file1 查看一个长文件的内容 less file1 类似于 &apos;more&apos; 命令，但是它允许在文件中和正向操作一样的反向操作 head -2 file1 查看一个文件的前两行 tail -2 file1 查看一个文件的最后两行 tail -f /var/log/messages 实时查看被添加到一个文件中的内容 </code></pre><h2 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h2><pre><code>cat file1 file2 ... | command &lt;&gt; file1_in.txt_or_file1_out.txt general syntax for text manipulation using PIPE, STDIN and STDOUT cat file1 | command( sed, grep, awk, grep, etc...) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中 cat file1 | command( sed, grep, awk, grep, etc...) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中 grep Aug /var/log/messages 在文件 &apos;/var/log/messages&apos;中查找关键词&quot;Aug&quot; grep ^Aug /var/log/messages 在文件 &apos;/var/log/messages&apos;中查找以&quot;Aug&quot;开始的词汇 grep [0-9] /var/log/messages 选择 &apos;/var/log/messages&apos; 文件中所有包含数字的行 grep Aug -R /var/log/* 在目录 &apos;/var/log&apos; 及随后的目录中搜索字符串&quot;Aug&quot; sed &apos;s/stringa1/stringa2/g&apos; example.txt 将example.txt文件中的 &quot;string1&quot; 替换成 &quot;string2&quot; sed &apos;/^$/d&apos; example.txt 从example.txt文件中删除所有空白行 sed &apos;/ *#/d; /^$/d&apos; example.txt 从example.txt文件中删除所有注释和空白行 echo &apos;esempio&apos; | tr &apos;[:lower:]&apos; &apos;[:upper:]&apos; 合并上下单元格内容 sed -e &apos;1d&apos; result.txt 从文件example.txt 中排除第一行 sed -n &apos;/stringa1/p&apos; 查看只包含词汇 &quot;string1&quot;的行 sed -e &apos;s/ *$//&apos; example.txt 删除每一行最后的空白字符 sed -e &apos;s/stringa1//g&apos; example.txt 从文档中只删除词汇 &quot;string1&quot; 并保留剩余全部 sed -n &apos;1,5p;5q&apos; example.txt 查看从第一行到第5行内容 sed -n &apos;5p;5q&apos; example.txt 查看第5行 sed -e &apos;s/00*/0/g&apos; example.txt 用单个零替换多个零 cat -n file1 标示文件的行数 cat example.txt | awk &apos;NR%2==1&apos; 删除example.txt文件中的所有偶数行 echo a b c | awk &apos;{print $1}&apos; 查看一行第一栏 echo a b c | awk &apos;{print $1,$3}&apos; 查看一行的第一和第三栏 paste file1 file2 合并两个文件或两栏的内容 paste -d &apos;+&apos; file1 file2 合并两个文件或两栏的内容，中间用&quot;+&quot;区分 sort file1 file2 排序两个文件的内容 sort file1 file2 | uniq 取出两个文件的并集(重复的行只保留一份) sort file1 file2 | uniq -u 删除交集，留下其他的行 sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件) comm -1 file1 file2 比较两个文件的内容只删除 &apos;file1&apos; 所包含的内容 comm -2 file1 file2 比较两个文件的内容只删除 &apos;file2&apos; 所包含的内容 comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分 </code></pre><h2 id="字符设置和文件格式转换"><a href="#字符设置和文件格式转换" class="headerlink" title="字符设置和文件格式转换"></a>字符设置和文件格式转换</h2><pre><code>dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIX unix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOS recode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成html recode -l | more 显示所有允许的转换格式 </code></pre><h2 id="文件系统分析"><a href="#文件系统分析" class="headerlink" title="文件系统分析"></a>文件系统分析</h2><pre><code>badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块 fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性 fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性 e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性 fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性 fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 </code></pre><h2 id="初始化一个文件系统"><a href="#初始化一个文件系统" class="headerlink" title="初始化一个文件系统"></a>初始化一个文件系统</h2><pre><code>mkfs /dev/hda1 在hda1分区创建一个文件系统 mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统 mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统 mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统 fdformat -n /dev/fd0 格式化一个软盘 mkswap /dev/hda3 创建一个swap文件系统 </code></pre><h2 id="SWAP文件系统"><a href="#SWAP文件系统" class="headerlink" title="SWAP文件系统"></a>SWAP文件系统</h2><pre><code>mkswap /dev/hda3 创建一个swap文件系统 swapon /dev/hda3 启用一个新的swap文件系统 swapon /dev/hda2 /dev/hdb3 启用两个swap分区 </code></pre><h2 id="备份"><a href="#备份" class="headerlink" title="备份"></a>备份</h2><pre><code>dump -0aj -f /tmp/home0.bak /home 制作一个 &apos;/home&apos; 目录的完整备份 dump -1aj -f /tmp/home0.bak /home 制作一个 &apos;/home&apos; 目录的交互式备份 restore -if /tmp/home0.bak 还原一个交互式备份 rsync -rogpav --delete /home /tmp 同步两边的目录 rsync -rogpav -e ssh --delete /home ip_address:/tmp 通过SSH通道rsync rsync -az -e ssh --delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录 rsync -az -e ssh --delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录 dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr &apos;dd of=hda.gz&apos; 通过ssh在远程主机上执行一次备份本地磁盘的操作 dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件 tar -Puf backup.tar /home/user 执行一次对 &apos;/home/user&apos; 目录的交互式备份操作 ( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr &apos;cd /home/share/ &amp;&amp; tar x -p&apos; 通过ssh在远程目录中复制一个目录内容 ( tar c /home ) | ssh -C user@ip_addr &apos;cd /home/backup-home &amp;&amp; tar x -p&apos; 通过ssh在远程目录中复制一个本地目录 tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接 find /home/user1 -name &apos;*.txt&apos; | xargs cp -av --target-directory=/home/backup/ --parents 从一个目录查找并复制所有以 &apos;.txt&apos; 结尾的文件到另一个目录 find /var/log -name &apos;*.log&apos; | tar cv --files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 &apos;.log&apos; 结尾的文件并做成一个bzip包 dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作 dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容 </code></pre><h2 id="光盘"><a href="#光盘" class="headerlink" title="光盘"></a>光盘</h2><pre><code>cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容 mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件 mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件 mkisofs -J -allow-leading-dots -R -V &quot;Label CD&quot; -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件 cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件 gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件 mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件 cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中 cd-paranoia -- &quot;-3&quot; 从一个CD光盘转录音轨到 wav 文件中（参数-3） cdrecord --scanbus 扫描总线以识别scsi通道 dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD </code></pre><h2 id="网络-（以太网和WIFI无线）"><a href="#网络-（以太网和WIFI无线）" class="headerlink" title="网络 - （以太网和WIFI无线）"></a>网络 - （以太网和WIFI无线）</h2><pre><code>ifconfig eth0 显示一个以太网卡的配置 ifup eth0 启用一个 &apos;eth0&apos; 网络设备 ifdown eth0 禁用一个 &apos;eth0&apos; 网络设备 ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址 ifconfig eth0 promisc 设置 &apos;eth0&apos; 成混杂模式以嗅探数据包 (sniffing) dhclient eth0 以dhcp模式启用 &apos;eth0&apos; route -n show routing table route add -net 0/0 gw IP_Gateway configura default gateway route add -net 192.168.0.0 netmask 255.255.0.0 gw 192.168.1.1 configure static route to reach network &apos;192.168.0.0/16&apos; route del 0/0 gw IP_gateway remove static route echo &quot;1&quot; &gt; /proc/sys/net/ipv4/ip_forward activate ip routing hostname show hostname of system host www.example.com lookup hostname to resolve name to ip address and viceversa(1) nslookup www.example.com lookup hostname to resolve name to ip address and viceversa(2) ip link show show link status of all interfaces mii-tool eth0 show link status of &apos;eth0&apos; ethtool eth0 show statistics of network card &apos;eth0&apos; netstat -tup show all active network connections and their PID netstat -tupl show all network services listening on the system and their PID tcpdump tcp port 80 show all HTTP traffic iwlist scan show wireless networks iwconfig eth1 show configuration of a wireless network card hostname show hostname host www.example.com lookup hostname to resolve name to ip address and viceversa nslookup www.example.com lookup hostname to resolve name to ip address and viceversa whois www.example.com lookup on Whois database </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Linux命令行&quot;&gt;&lt;a href=&quot;#Linux命令行&quot; class=&quot;headerlink&quot; title=&quot;Linux命令行&quot;&gt;&lt;/a&gt;Linux命令行&lt;/h2&gt;&lt;p&gt;大多是互联网企业在安装系统甚至不会安装图形管理软件包，而是直接使用文本模式安装，因此登陆后直
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>BootStrap框架</title>
    <link href="http://yoursite.com/2017/10/22/BootStrap%E6%A1%86%E6%9E%B6/"/>
    <id>http://yoursite.com/2017/10/22/BootStrap框架/</id>
    <published>2017-10-22T11:14:38.000Z</published>
    <updated>2019-02-07T07:05:36.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是BootStrap"><a href="#什么是BootStrap" class="headerlink" title="什么是BootStrap"></a>什么是BootStrap</h2><ul><li>bootstrap 是当下非常经典且流行的前端框架（界面工具集）很多公司的前后端项目都有继承bootstrap</li><li>bootstrap的特点：灵活借简洁，代码优雅，美观大方，直观强悍的前端开发框架</li><li>GitHub：<a href="https://github.com/twbs/boostrap" target="_blank" rel="noopener">https://github.com/twbs/boostrap</a></li><li>官网：<ul><li><a href="http://www.bootcss/com/" target="_blank" rel="noopener">http://www.bootcss/com/</a></li><li><a href="http://getbootstrap.com/" target="_blank" rel="noopener">http://getbootstrap.com/</a></li></ul></li></ul><h2 id="使用Bootstrap"><a href="#使用Bootstrap" class="headerlink" title="使用Bootstrap"></a>使用Bootstrap</h2><ul><li><p>npminstall bootstrap –save<br>  (通过npm进行安装，适合工程化开发，比如集成到react或者Node项目中)</p></li><li><p>gitHub直接下载<br>  (适合起步，全面学习)</p></li></ul><h3 id="Bootstrap初始化模板"><a href="#Bootstrap初始化模板" class="headerlink" title="Bootstrap初始化模板"></a>Bootstrap初始化模板</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"IE=edge"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 上述3个meta标签*必须*放在最前面，任何其他内容都*必须*跟随其后！ --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>test1<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"utlise/bootstrap-3.3.7-dist/css/bootstrap.min.css"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">href</span>=<span class="string">"css/index.css"</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- &lt;script src="https://cdn.staticfile.org/jquery/2.1.1/jquery.min.js"&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"utlise/jquery-3.3.1.js"</span> &gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"utlise/bootstrap-3.3.7-dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>你好，世界！<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- jQuery (Bootstrap 的所有 JavaScript 插件都依赖 jQuery，所以必须放在前边) --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/jquery@1.12.4/dist/jquery.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 加载 Bootstrap 的所有 JavaScript 插件。你也可以根据需要只加载单个插件。 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/bootstrap@3.3.7/dist/js/bootstrap.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/2Z1W4tR.png" alt=""></p><pre><code>自己的定义的css和js一定要在bootstrap定义的css和js之后，以免bootstrap定义的东西覆盖了我们定义的</code></pre><h2 id="使用Boosstrap"><a href="#使用Boosstrap" class="headerlink" title="使用Boosstrap"></a>使用Boosstrap</h2><pre><code>在官网中查看信息即可</code></pre><ul><li><a href="https://v3.bootcss.com/components/#glyphicons" target="_blank" rel="noopener">https://v3.bootcss.com/components/#glyphicons</a></li><li><a href="https://v3.bootcss.com/css/#overview" target="_blank" rel="noopener">https://v3.bootcss.com/css/#overview</a></li></ul><h3 id="例如"><a href="#例如" class="headerlink" title="例如"></a>例如</h3><h4 id="字体图标"><a href="#字体图标" class="headerlink" title="字体图标"></a>字体图标</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-envelope"</span> <span class="attr">style</span>=<span class="string">"font-size:40px"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样的一个文字信息图标就出来了</p><h4 id="进图条"><a href="#进图条" class="headerlink" title="进图条"></a>进图条</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"progress-bar"</span> <span class="attr">role</span>=<span class="string">"progressbar"</span> <span class="attr">aria-valuenow</span>=<span class="string">"60"</span> <span class="attr">aria-valuemin</span>=<span class="string">"0"</span> <span class="attr">aria-valuemax</span>=<span class="string">"100"</span> <span class="attr">style</span>=<span class="string">"width: 60%;"</span>&gt;</span></span><br><span class="line">60%</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="面板-panel"><a href="#面板-panel" class="headerlink" title="面板 panel"></a>面板 panel</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel panel-default panel-success"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 面板类似于一个栏目框，heading为标题，panel-success 只可以改变标题颜色  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-heading"</span>&gt;</span>面板标题<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-body"</span>&gt;</span>面板内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"panel-footer"</span>&gt;</span>面板脚注<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="模态框"><a href="#模态框" class="headerlink" title="模态框"></a>模态框</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Button trigger modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-lg"</span> <span class="attr">data-toggle</span>=<span class="string">"modal"</span> <span class="attr">data-target</span>=<span class="string">"#myModal"</span>&gt;</span></span><br><span class="line">  Launch demo modal</span><br><span class="line"><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Modal --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal fade"</span> <span class="attr">id</span>=<span class="string">"myModal"</span> <span class="attr">tabindex</span>=<span class="string">"-1"</span> <span class="attr">role</span>=<span class="string">"dialog"</span> <span class="attr">aria-labelledby</span>=<span class="string">"myModalLabel"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-dialog"</span> <span class="attr">role</span>=<span class="string">"document"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-content"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-header"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"close"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span> <span class="attr">aria-label</span>=<span class="string">"Close"</span>&gt;</span><span class="tag">&lt;<span class="name">span</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span>&amp;times;<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">class</span>=<span class="string">"modal-title"</span> <span class="attr">id</span>=<span class="string">"myModalLabel"</span>&gt;</span>Modal title<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-body"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"modal-footer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-default"</span> <span class="attr">data-dismiss</span>=<span class="string">"modal"</span>&gt;</span>Close<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary"</span>&gt;</span>Save changes<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="轮播图Carousel"><a href="#轮播图Carousel" class="headerlink" title="轮播图Carousel"></a>轮播图Carousel</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"carousel-example-generic"</span> <span class="attr">class</span>=<span class="string">"carousel slide"</span> <span class="attr">data-ride</span>=<span class="string">"carousel"</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- Indicators --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span> <span class="attr">class</span>=<span class="string">"carousel-indicators"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"0"</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"1"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">li</span> <span class="attr">data-target</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">data-slide-to</span>=<span class="string">"2"</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Wrapper for slides --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-inner"</span> <span class="attr">role</span>=<span class="string">"listbox"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item active"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"item"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"..."</span> <span class="attr">alt</span>=<span class="string">"..."</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"carousel-caption"</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">...</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- Controls --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"left carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"prev"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-left"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Previous<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"right carousel-control"</span> <span class="attr">href</span>=<span class="string">"#carousel-example-generic"</span> <span class="attr">role</span>=<span class="string">"button"</span> <span class="attr">data-slide</span>=<span class="string">"next"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"glyphicon glyphicon-chevron-right"</span> <span class="attr">aria-hidden</span>=<span class="string">"true"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"sr-only"</span>&gt;</span>Next<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="其他的自行学习"><a href="#其他的自行学习" class="headerlink" title="其他的自行学习"></a>其他的自行学习</h4><h2 id="综合案例"><a href="#综合案例" class="headerlink" title="综合案例"></a>综合案例</h2><h3 id="响应式页面"><a href="#响应式页面" class="headerlink" title="响应式页面"></a>响应式页面</h3><pre><code>因为页面不仅要跑到pc端，还要跑到手机端，所以页面要做成响应式的页面</code></pre><p><code>开启视口模式</code></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=decice-witdth, initial-scalse=1.0"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="https://i.imgur.com/hkXJ8WL.png" alt=""></p><p><img src="https://i.imgur.com/usYXan5.png" alt=""></p><h4 id="自己写自适应"><a href="#自己写自适应" class="headerlink" title="自己写自适应"></a>自己写自适应</h4><h5 id="css"><a href="#css" class="headerlink" title="css"></a>css</h5><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">768px</span>)&#123;</span><br><span class="line"><span class="selector-class">.contariner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">760</span>) and (max-width: <span class="number">992px</span>)&#123;</span><br><span class="line"><span class="selector-class">.contariner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">750px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (max-width: <span class="number">992</span>) and (max-width: <span class="number">1200px</span>)&#123;</span><br><span class="line"><span class="selector-class">.contariner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">970px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">media</span> screen and (min-width: <span class="number">1200</span>)&#123;</span><br><span class="line"><span class="selector-class">.contariner</span>&#123;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">1170px</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><pre><code>这些参数值都是根据上面的 栅格参数 制定的</code></pre><h5 id="js"><a href="#js" class="headerlink" title="js"></a>js</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"load"</span>, functino()&#123;</span><br><span class="line"><span class="comment">//获取常量 类 和 屏幕宽高</span></span><br><span class="line"><span class="keyword">let</span> contariner = <span class="built_in">document</span>.querySelector(<span class="string">".container"</span>);</span><br><span class="line"><span class="keyword">let</span> clientw = <span class="number">0</span>;</span><br><span class="line"><span class="comment">// 监听窗口的大小变化</span></span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">"resize"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">clientw = <span class="built_in">window</span>.innerWidth;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(clientw &gt;= <span class="number">1200</span>) &#123;<span class="comment">//超大屏幕</span></span><br><span class="line">container.styler.width = <span class="string">"1170px"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(client &gt;= <span class="number">992</span>) &#123;<span class="comment">//大屏幕</span></span><br><span class="line">container.styler.width = <span class="string">"970px"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(client &gt;= <span class="number">760</span>) &#123; <span class="comment">//小屏幕</span></span><br><span class="line">container.styler.width = <span class="string">"750px"</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">container.styler.width = <span class="string">"100%"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h3 id="设计页面"><a href="#设计页面" class="headerlink" title="设计页面"></a>设计页面</h3><pre><code>栅格布局，bootstrap 把一行分成12列，可以通过自由组合，去组成12列</code></pre><p><img src="https://i.imgur.com/pDedAyZ.png" alt=""></p><pre><code>bootstrap 也帮你定义好了这 12 种去实现</code></pre><p><img src="https://i.imgur.com/1BV65wQ.png" alt=""></p><pre><code>如果想要某些模块在小屏幕不显示 可用：</code></pre><p><img src="https://i.imgur.com/iy5kQej.png" alt=""></p><h3 id="文字样式"><a href="#文字样式" class="headerlink" title="文字样式"></a>文字样式</h3><p><img src="https://i.imgur.com/DvEDqx3.png" alt=""></p><p><img src="https://i.imgur.com/hKhXyao.png" alt=""></p><pre><code>之后选择下载，解压，导入到工程种</code></pre><p><img src="https://i.imgur.com/yRrzEuu.png" alt=""></p><pre><code>其中 icon-wifi 的 content 的值 来自于 网页demo中注意 content 中 &quot; \ &quot;的方向，切忌写反然后就可以直接在 &lt;span class=&quot;icon-wifi&quot;&gt;&lt;/span&gt;中使用即可</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是BootStrap&quot;&gt;&lt;a href=&quot;#什么是BootStrap&quot; class=&quot;headerlink&quot; title=&quot;什么是BootStrap&quot;&gt;&lt;/a&gt;什么是BootStrap&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;bootstrap 是当下非常经典且流行的前端框
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kali Linux 基础</title>
    <link href="http://yoursite.com/2017/10/16/Kali-Linux-%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/10/16/Kali-Linux-基础/</id>
    <published>2017-10-16T15:01:46.000Z</published>
    <updated>2019-02-07T07:05:12.628Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Proxy基本原理"><a href="#Proxy基本原理" class="headerlink" title="Proxy基本原理"></a>Proxy基本原理</h2><h3 id="正向代理"><a href="#正向代理" class="headerlink" title="正向代理"></a>正向代理</h3><p><img src="https://i.imgur.com/zwl1iCN.png" alt=""></p><pre><code>终端机访问外部互联网资源，并不是直接连接到互联网上，而是通过一个代理主机，或者代理软件可能是在一个路由器中，网关上，或者在某个终端机中数据回来的时候也是通过代理返回的</code></pre><h4 id="访问本无法访问的服务器"><a href="#访问本无法访问的服务器" class="headerlink" title="访问本无法访问的服务器"></a>访问本无法访问的服务器</h4><pre><code>通过在香港的主机的代理服务，访问Google官网</code></pre><h4 id="Cache作用"><a href="#Cache作用" class="headerlink" title="Cache作用"></a>Cache作用</h4><pre><code>把一些请求直接缓存到代理服务器上</code></pre><h4 id="客户端访问授权"><a href="#客户端访问授权" class="headerlink" title="客户端访问授权"></a>客户端访问授权</h4><pre><code>对某些资源只允许代理服务器访问，而不允许终端机访问，从而禁止终端用户直接连接服务器上的资源</code></pre><h4 id="隐藏访问者的行踪"><a href="#隐藏访问者的行踪" class="headerlink" title="隐藏访问者的行踪"></a>隐藏访问者的行踪</h4><pre><code>配置代理服务用到的ip或者Cookie信息，来隐藏访问者的行踪</code></pre><h3 id="反向代理"><a href="#反向代理" class="headerlink" title="反向代理"></a>反向代理</h3><h3 id="透明代理"><a href="#透明代理" class="headerlink" title="透明代理"></a>透明代理</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Proxy基本原理&quot;&gt;&lt;a href=&quot;#Proxy基本原理&quot; class=&quot;headerlink&quot; title=&quot;Proxy基本原理&quot;&gt;&lt;/a&gt;Proxy基本原理&lt;/h2&gt;&lt;h3 id=&quot;正向代理&quot;&gt;&lt;a href=&quot;#正向代理&quot; class=&quot;headerli
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>从0开始的JavaWeb---java篇</title>
    <link href="http://yoursite.com/2017/10/13/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%9A%84JavaWeb-java%E7%AF%87/"/>
    <id>http://yoursite.com/2017/10/13/从0开始的JavaWeb-java篇/</id>
    <published>2017-10-13T02:12:37.000Z</published>
    <updated>2019-02-07T07:04:16.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="软件系统体系结构"><a href="#软件系统体系结构" class="headerlink" title="软件系统体系结构"></a>软件系统体系结构</h2><h3 id="B-S"><a href="#B-S" class="headerlink" title="B/S"></a>B/S</h3><pre><code>1. B/S结构即浏览器/服务器（Browser/Server）</code></pre><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><pre><code>只需要编写服务器端程序</code></pre><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><pre><code>安全性差</code></pre><h3 id="C-S"><a href="#C-S" class="headerlink" title="C/S"></a>C/S</h3><pre><code>1. C/S 结构即 客户端/服务器（Client/Server），例如QQ2. 需要编写服务器程序，以及客户端程序，例如我们安装的就是QQ的客户端</code></pre><h4 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h4><pre><code>软件更新时需要同时更新客户端和服务器两端，比较麻烦</code></pre><h4 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h4><pre><code>安全性比较好</code></pre><h3 id="Web资源"><a href="#Web资源" class="headerlink" title="Web资源"></a>Web资源</h3><h4 id="Web资源介绍"><a href="#Web资源介绍" class="headerlink" title="Web资源介绍"></a>Web资源介绍</h4><pre><code>1. html：静态资源2. Jsp/Servlet：动态资源当然除了JavaWeb程序，还有其他Web程序，例如：ASP，PHP等。</code></pre><h4 id="静态资源和动态资源的区别"><a href="#静态资源和动态资源的区别" class="headerlink" title="静态资源和动态资源的区别"></a>静态资源和动态资源的区别</h4><p><img src="https://i.imgur.com/6CCQ2RM.png" alt=""></p><h4 id="访问Web资源"><a href="#访问Web资源" class="headerlink" title="访问Web资源"></a>访问Web资源</h4><pre><code>打开浏览器，输入URL：    协议名：//域名：端口/路径，例如：https://www.baidu.com:8080/index.html</code></pre><h3 id="Web服务器"><a href="#Web服务器" class="headerlink" title="Web服务器"></a>Web服务器</h3><pre><code>Web服务器的作用时接收客户端的请求，给客户端做出响应。对于JavaWeb程序而言，还需要有Jsp/Servlet容器，Jsp/Servlet容器的基本功能是把动态资源转会为静态资源，当然Jsp/Servlet容器不知这些功能。我们需要使用的是Web服务器和Jsp/Servlet容器，通常这两者会集于一身。下面是对JavaWeb的服务器：    1. Tomcat(Apache):当前应用最广的JavaWeb服务器    2. JBoss(RedHat红帽):支持JavaEE，应用比较广    3. GlassFlsh(Orcale):ORacle开发JavaWeb服务器，应用不是很广    4. Resin(Caucho)：支持JavaEE，应用越来越广    5. Weblogic(Orcale):要钱的！支持JavaEE，适合大型项目    6. Websphere（IBM）：要钱的！支持JavaEE，适合大型项目</code></pre><h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><h4 id="Tomcat简述"><a href="#Tomcat简述" class="headerlink" title="Tomcat简述"></a>Tomcat简述</h4><pre><code>Tomcat服务器由Apache提供，开源免费。由于Sun和其他公司参与到了Tomcat的开放中，所以最新的Jsp/Servlet规范总是能在Tomcat中体现出来。</code></pre><h4 id="配置Tomcat"><a href="#配置Tomcat" class="headerlink" title="配置Tomcat"></a>配置Tomcat</h4><h5 id="tomcat的安装"><a href="#tomcat的安装" class="headerlink" title="tomcat的安装"></a>tomcat的安装</h5><pre><code>自行百度</code></pre><h5 id="tomcat端口改变"><a href="#tomcat端口改变" class="headerlink" title="tomcat端口改变"></a>tomcat端口改变</h5><pre><code>自行百度</code></pre><h5 id="tomcat配置"><a href="#tomcat配置" class="headerlink" title="tomcat配置"></a>tomcat配置</h5><pre><code>自行百度</code></pre><h5 id="Tomcat目录结构"><a href="#Tomcat目录结构" class="headerlink" title="Tomcat目录结构"></a>Tomcat目录结构</h5><p><img src="https://i.imgur.com/J24crxY.png" alt=""></p><pre><code>/work    tomcat把由jsp生成的servlet放于目录下/webapps    当发布web应用时，默认情况下把web应用文件放于次目录下/logs    存放tomcat的日志文件/share/lib    存放所有web应用都可以访问的jar文件/common/lib    存放tomcat服务器以及所有web应用都可以访问的jar应用/server/webapps    存放tomcat自带的两个web应用：admin应用和manager应用/server/lib        存放tomcat服务器所需的jar文件/server        包含三个子目录：classes。lib和webapps/conf    存放tomcat服务器的各种配置文件，其中最重要的文件是server.xml/bin    存放Windows平台以及linux平台上启动和关闭tomcat的脚本文件</code></pre><h3 id="Web应用"><a href="#Web应用" class="headerlink" title="Web应用"></a>Web应用</h3><h4 id="创建一个静态网站"><a href="#创建一个静态网站" class="headerlink" title="创建一个静态网站"></a>创建一个静态网站</h4><pre><code>1. 在webapps目录下创建一个目录（命名必须不包含中文和空格），这个目录则为项目目录2. 在项目目录下创建一个html文件</code></pre><h4 id="创建一个动态网站"><a href="#创建一个动态网站" class="headerlink" title="创建一个动态网站"></a>创建一个动态网站</h4><pre><code>1. 在webapps目录下创建一个项目目录2. 在项目目录下创建如下内容    1. WEB-INF目录        1. WEB-INF目录下创建web.xml文件            1. xml文件中的内容，可以从其他的项目中复制        2. 创建一个lib目录，用户存放jar包        3. classes目录，用于存放自己写的class    2. 创建静态或动态页面WEB-INF下的项目，浏览器是不能访问的，所以为了安全起见，所以一些文件必须放到WEB-INF文件</code></pre><h4 id="配置外部应用"><a href="#配置外部应用" class="headerlink" title="配置外部应用"></a>配置外部应用</h4><h5 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h5><pre><code>conf/server.xml:打开server.xml文件，找到&lt;Host&gt;元素，在其中添加&lt;Context&gt;元素：    &lt;Host name=&quot;localhost&quot; appBase=&quot;webapps&quot;            unpackWARs=&quot;true&quot; autoDeplay=&quot;true&quot;&gt;        &lt;Context path=&quot;hello&quot; docBase=&quot;C:/hello&quot;/&gt;    &lt;/Host&gt;1. path：制定当前应用的名称2. docBase：指定应用的物理位置3. 浏览器访问路径：http://localhost:8080/hello/index.xml</code></pre><p>​    </p><h5 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h5><pre><code>conf/catalana/localhost：在该目录下创建hello.xml文件，在该文件编写&lt;Context&gt;元素    &lt;Context docBase=&quot;C:/hello&quot;&gt;1. 文件名：指定当前应用的名称2. docBase：指定应用的物理位置3. 浏览器访问路径：http://localhost:8080/hello/index.xml</code></pre><h4 id="servet-xml的配置"><a href="#servet-xml的配置" class="headerlink" title="servet.xml的配置"></a>servet.xml的配置</h4><pre><code>1. &lt;Service name=&quot;Catalina&quot;&gt;    服务，名字为catalina服务中又有很多连接 &lt;Connector&gt;2. &lt;Connector port=&quot;80&quot; protocol=&quot;HTTP/1.1&quot;    connectionTimeout=&quot;20000&quot; redirectPort=&quot;8443&quot;/&gt;    用于接待HTTP/1.1的服务，端口是80端口，不处理请求3. &lt;Engine&gt; 引擎，用于处理请求，引擎下又分很多主机&lt;Host&gt;4. &lt;Host name=&quot;主机名&quot; appBase=&quot;基础目录&quot;        unpackWARs=&quot;true&quot; autoDeploy=&quot;true&quot;&gt;主机下又有&lt;Context&gt;上下文5. &lt;Context&gt; 上下文，对应的就是一个项目6. servet.xml中还有很多监听器7. 引擎唯一的，Service唯一的，Host可以多个，Context可以多个</code></pre><h2 id="Servlet"><a href="#Servlet" class="headerlink" title="Servlet"></a>Servlet</h2><h3 id="什么是Servlet"><a href="#什么是Servlet" class="headerlink" title="什么是Servlet"></a>什么是Servlet</h3><pre><code>Servlet是javaWeb的三大组件之一，它属于动态资源。Servlet的作用是处理请求，服务器会把接收到的请求交给Servlet来处理，在Servlet中通常需要：    1. 接收请求数据    2. 处理请求    3. 完成响应例如客户端发出登陆亲求，或者输出注册请求，这些请求都应该由Servlet来完成处理！Servlet需要我们自己来编写，每个Servlet必须实现javax.servlet.Servlet接口</code></pre><p><img src="https://i.imgur.com/uJbkkiR.png" alt=""></p><h3 id="实现Servlet的方式"><a href="#实现Servlet的方式" class="headerlink" title="实现Servlet的方式"></a>实现Servlet的方式</h3><pre><code>实现Servlet的三种方式：    1. 实现javax.servlet.Servket接口    2. 继承javax.servlet.GenericServlet类    3. 继承javax.servlet.http.HttpServlet类我们通常会去继承HttpServlet类来完成我们的Servlet，但学习Servlet还要从javax.servlet.Servlet接口开始</code></pre><h3 id="使用Servlet"><a href="#使用Servlet" class="headerlink" title="使用Servlet"></a>使用Servlet</h3><p><img src="https://i.imgur.com/TGsdd4W.png" alt=""></p><h4 id="servlet的方法"><a href="#servlet的方法" class="headerlink" title="servlet的方法"></a>servlet的方法</h4><pre><code>是由tomcat调用的方法1. init()    1. 在Servlet对象创建之后马上执行，并且只执行一次2. service()    1. 会被调用多次，每次处理请求都是调用这个方法3. destroy()    1. 在Servlet被销毁之前调用，并且它只会被调用一次4. getServletConfig()    1. 获取Servlet的配置信息（从init函数中，可以获得Servlet的配置信息）5. getServletInfo()    1. 获取Servlet的信息（没什么用）</code></pre><h4 id="浏览器访问Servlet"><a href="#浏览器访问Servlet" class="headerlink" title="浏览器访问Servlet"></a>浏览器访问Servlet</h4><pre><code>1. 给Servlet指定一个Servlet路径（让Servlet与一个路径绑定在一起）    1. 需要在web.xml中对Servlet配置    2.  &lt;servlet&gt;               &lt;servlet-name&gt;XXX随意&lt;/servlet-name&gt;            &lt;servlet-class&gt;Servlet的路径&lt;servlet-class&gt;        &lt;/servlet&gt;    3.  &lt;servlet-mapping&gt;            &lt;servlet-name&gt;与上面的name相同&lt;/servlet-name&gt;            &lt;url-pattern&gt;/虚拟路径 例如：/aa/b/c&lt;/url-pattern&gt;        &lt;/servlet-mapping&gt;2. 浏览器访问Servlet路径    1. localhost:8080/项目名/虚拟路径名</code></pre><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><pre><code>1. 单例，一个类只有一个对象；当然可能存在多个Servlet类2. 线程不安全的，效率高3. Servlet由程序员写，但对象由服务器创建，调用响应的方法</code></pre><p><img src="https://i.imgur.com/nMe2CKX.png" alt=""></p><p><img src="https://i.imgur.com/XTD10M9.png" alt=""></p><p><img src="https://i.imgur.com/E6X43Wh.png" alt=""></p><h3 id="Servlet细节"><a href="#Servlet细节" class="headerlink" title="Servlet细节"></a>Servlet细节</h3><h4 id="Servlet与线程安全"><a href="#Servlet与线程安全" class="headerlink" title="Servlet与线程安全"></a>Servlet与线程安全</h4><pre><code>因为一个类型的Servlet只有一个实例对象，那么就有可能会出现同一个时间一个Servlet同属处理多个请求 那么Servlet是否为线程安全呢？ 答案是“不是线程安全的”这说明Servlet的工作效率很高，但也存在线程安全问题所以我们不应该在Servlet中随意创建成员变量因为可能会存在一个线程这个成员变量进行写操作，另一个线程对这个成员变量进行读操作1. 不要在Servlet中创建成员！创建局部变量即可2. 可创建无状态成员3. 可以创建有状态成员，但是状态必须为只读的</code></pre><h4 id="让服务器在启动时就创建Servlet"><a href="#让服务器在启动时就创建Servlet" class="headerlink" title="让服务器在启动时就创建Servlet"></a>让服务器在启动时就创建Servlet</h4><pre><code>默认情况下，服务器在某个Servlet第一次收到请求时创建它，也可以在web.xml中进行配置，使服务器启动的时候就创建Servlet&lt;servlet&gt;    &lt;servlet-name&gt;hello1&lt;/servlet-name&gt;    &lt;servlet-class&gt;cn.itcast.servlet.HelloWorld&lt;servlet-class&gt;    &lt;load-on-startup&gt;非负整数&lt;/load-on-startup&gt;    &lt;!-- 非负数，越小越先创建 --&gt;&lt;servlet&gt;</code></pre><h4 id=""><a href="#" class="headerlink" title=""></a><url-pattern></url-pattern></h4><pre><code>&lt;url-pattern&gt;是&lt;servlet-mapping&gt;的子元素，用来指定Servlet的访问路径，即URL它必须是以 &quot;/&quot; 开头&lt;servlet-mapping&gt;    &lt;servlet-name&gt;text&lt;/servlet-name&gt;    &lt;url-pattern&gt;/a&lt;/url-pattern&gt;    &lt;url-pattern&gt;/b&lt;/url-pattern&gt;    &lt;url-pattern&gt;/c&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;那么说明这个Servlet绑定了多个url，一般也就一个，你设置多个也没什么用</code></pre><h3 id="ServletContext"><a href="#ServletContext" class="headerlink" title="ServletContext"></a>ServletContext</h3><pre><code>一个项目只有一个ServletContext对象！application我们可以在N个Servlet中获取这个唯一的对象，使用它可以给多个Servlet传递数据Servlet之间互不一般是互不联系的，所以信息传递只能通过ServletContext</code></pre><h4 id="servletContext概述"><a href="#servletContext概述" class="headerlink" title="servletContext概述"></a>servletContext概述</h4><pre><code>服务器会为每个应用创建一个ServletContext对象：1. ServletContext 对象的创建时在服务器启动时完成2. ServletContext 对象的销毁时在服务器关闭时完成ServletContext对象的作用是在整个Web应用的动态资源之间共享数据！例如：    在A_Servlet中项 ServletContext对象中保存一个值，然后再B_Servlet中就可以获取这个值，这就是共享数据</code></pre><h4 id="获取ServletContext"><a href="#获取ServletContext" class="headerlink" title="获取ServletContext"></a>获取ServletContext</h4><pre><code>在Servlet获取ServletContext对象：1. 在 void init(ServletConfig config)中：ServletContext context = config.getServletContext();在GenericeServlet 或 HttpServlet 中获取ServletContext对象：1. GenericSeriet类中由getServletContext()方法，所以可以直接使用this.getServletContext()来获取2. HttpServlet中有getServletContext()方法获取在ServletContextEvent中1. getServletContext()方法获取在HttpSession中1. getServletContext()方法获取</code></pre><h4 id="设置，获取对象"><a href="#设置，获取对象" class="headerlink" title="设置，获取对象"></a>设置，获取对象</h4><pre><code>1. void serAttribute(String name,Objcet value):    这是一个键值对，name与value对应2. Object getAttribute(String name):    通过名为name 的键，去获得object类型的值3. void removeAttribute(String name):    移除名为name 的键值对4. Enumeration getAttributeNames():    获取所有域属性的名称</code></pre><h4 id="获取资源"><a href="#获取资源" class="headerlink" title="获取资源"></a>获取资源</h4><h5 id="获取真实路径"><a href="#获取真实路径" class="headerlink" title="获取真实路径"></a>获取真实路径</h5><pre><code>使用ServletContext对象来获取web应用下的资源例如在hello应用的根目录下出创建a.txt文件，获取方法：    String realpath = servletContext.getRealPath(&quot;/a,txt&quot;),realpath的为a.txt的绝对路径</code></pre><h5 id="获取资源流"><a href="#获取资源流" class="headerlink" title="获取资源流"></a>获取资源流</h5><pre><code>可以通过ServletContext获取资源流，即把资源以输入流的方式获取：1. 获取a.txt资源流 InputStream in = ServletContext.getResourceAsStream(&quot;/a.txt&quot;);</code></pre><h5 id="获取指定目录下所有资源路径"><a href="#获取指定目录下所有资源路径" class="headerlink" title="获取指定目录下所有资源路径"></a>获取指定目录下所有资源路径</h5><pre><code>通过ServletContext获取指定目下所有资源路径例如获取/WEB-INF下所有的资源路径：    Set set = context.getResourcePaths(&quot;/WEB-INF&quot;);</code></pre><h2 id="Java画图（可用于验证码）"><a href="#Java画图（可用于验证码）" class="headerlink" title="Java画图（可用于验证码）"></a>Java画图（可用于验证码）</h2><pre><code>BufferedImage bi = new BufferedImage(150, 35, BufferedImage.TYPE_INT_RGB);//得到图片缓冲区，这是长宽，图片格式RGB还是RGBA//得到它的绘制环境（画这张图片的笔）Graphics2D g2 = (Graphics2D) bi.getGraphics();g2.setColor(Color.WHITE);//设置颜色g2.fillRect(0,0,79,35);//填充图片，就是设置背景色g2.setFont(new Font(&quot;宋体&quot;, Font.BOLD, 25));//设置字体//Font.BLOD 为字体格式，比如blod就是粗体g2.setColor(Color.BLACK);//设置颜色ge.drawString(&quot;hell0&quot;, point.x, point.y);//向图片区域中写String的内容ImageIO.write(bi, &quot;JPEG&quot;, new FileOutputStream(&quot;F:/a.jpg&quot;));//输出流，bi为图片缓冲区，&quot;JPEG&quot;为图片格式</code></pre><h2 id="response和request"><a href="#response和request" class="headerlink" title="response和request"></a>response和request</h2><pre><code>都是由服务器产生</code></pre><p><img src="https://i.imgur.com/KpOSoD7.png" alt=""></p><pre><code>服务器每次收到请求时，都会为这个请求开辟一个新的线程服务器会把客户端的请求数据封装到request对象中，request就是请求数据的载体服务器还会创建response对象，这个对象和客户端连接在一起，他可以用来向客户端发送响应</code></pre><h3 id="response"><a href="#response" class="headerlink" title="response"></a>response</h3><pre><code>ServletResponse ---&gt; 与协议无关的类型HtppServletResponse ----&gt; 与http协议相关的类型二者无关，传入到Servlet中的时HttpServletResponse，所以可以强转为responsehttp协议中响应内容包括什么呢？</code></pre><h4 id="状态码"><a href="#状态码" class="headerlink" title="状态码"></a>状态码</h4><pre><code>200 表示成功， 302 表示重定向， 404 表示客户端错误， 500表示服务器端错误1. sendError(int sc)2. sendError(int sc, String msg)3. setStatus(int sc)例如：    发送404    response.sendError(404, &quot;您访问的资源存在，就是不给你看&quot;);</code></pre><h4 id="响应头"><a href="#响应头" class="headerlink" title="响应头"></a>响应头</h4><pre><code>响应头：Content-Type,Refresh,Location等1. setHeader(String name, String value):适用于单值的响应头2. addHeader(String name, String value):适用于多值的响应头3. setIntHeader(String name, String Value):适用于单值的int类型的响应头4. addIntHeader(String name, String value):适用于多值int类型的响应头5. setDateHeader(String name, long value):适用于单值的毫秒类型的响应头6. addDaTeHeader(String name, long value):适用于多值的毫秒类型的响应头；long型值为 毫秒值，代表过期时间，例如：    发送302，设置location头，完成重定向            response.setHeader(&quot;Location&quot;,&quot;/项目名/servlet路径&quot;);        response.setStatus(302);    定时刷新，设置Refresh头，其实就是定时重定向        PrintWriter write = rsponse.getWriter();        writer.print(&quot;欢迎登陆，5秒后自动跳转到主页&quot;);        response.setHeader(&quot;Redresh&quot;, &quot;5;URL=/项目名/重定向的servlet或jsp&quot;);    禁用浏览器缓存：Cache-Control, prama, expires        response.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);        response.setHeader(&quot;prame&quot;,&quot;no-cache&quot;);        response.setDateHeader(&quot;expires&quot;,-1);//过期时间-1，立马过期    &lt;meta&gt;标签可以代替响应头</code></pre><h4 id="响应体"><a href="#响应体" class="headerlink" title="响应体"></a>响应体</h4><pre><code>通常是html，也可以是图片response的两个流：    1. ServletOutPutStream,用来向客户端发送字节数据        ServletOutputStream out = response.getOutputStream();    2. PrintWriter,用来向客户端发送字符数据!需要设置编码        PrintWriter writer = response.getWriter();    两个流不能同时使用发送字节流：    String s = &quot;hello world&quot;;    byte[] bytes = s.getBytes();    response.getOutputStream().write(bytes);发送字节图片：    //运用commons-io库    String path = &quot;a.jpg&quot;;    FileInputStream in = new FileInputStream();    //读取输入流内容的字节到字节数组中    byte[] bytes = IOUtils.toByteArray(int);    response.getOutputStream().write(bytes);</code></pre><h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><pre><code>这个重定向不同与上面的重定向，这个更快sendRedirect(String location)方法response.sendRedirect(&quot;/项目名/servlet虚拟路径或jsp名&quot;);</code></pre><h3 id="request"><a href="#request" class="headerlink" title="request"></a>request</h3><pre><code>封装了客户端所有的请求数据Http协议中的数据都可以通过request对象来获取</code></pre><h4 id="获取常用信息"><a href="#获取常用信息" class="headerlink" title="获取常用信息"></a>获取常用信息</h4><pre><code>获取客户端Ip，请求方式Ip：request.getRemoteAddr();请求方式：request.getMethod();</code></pre><h4 id="获取请求头"><a href="#获取请求头" class="headerlink" title="获取请求头"></a>获取请求头</h4><pre><code>String getHeader(String name),适用于单值头int getIntHeader(String name),适用于单值int类型的请求头long getDateHeader(String name),适用于单值毫秒类型的请求头Enumeration&lt;String&gt; getHeaders(String name),适用于多值请求头例如：    通过user-agent识别用户浏览器类型        request.getHeader(&quot;User-Agent&quot;);    防盗链：如果请求不是通过本站发出的超链接发出的，发送错误状态码404        Refere这个请求头，表示请求的来源        String referer = req.getHeader(&quot;Rederer&quot;);        if(referer == null || referer.contains(&quot;localhost&quot;)){            resp.sendRedirect(&quot;https://www.baidu.com&quot;);            System.out.println(&quot;baidu&quot;);        } else{            System.out.println(&quot;hello&quot;);        }</code></pre><h4 id="获取请求URL"><a href="#获取请求URL" class="headerlink" title="获取请求URL"></a>获取请求URL</h4><pre><code>String getScheme();获取协议String getServerName();获取服务器名String getServerPort();获取服务器端口String getContextPath();获取项目名String getServletPath();获取Servlet路径String getQueryString();获取参数部分，即问好后面的部分String getRequestURI();获取请求URI，等于项目名+Servlet路径String getRequestURL();获取请求URL，等于不包含参数的整个请求路径</code></pre><p><img src="https://i.imgur.com/moO8HuU.png" alt=""></p><h4 id="获取请求参数"><a href="#获取请求参数" class="headerlink" title="获取请求参数"></a>获取请求参数</h4><pre><code>请求参数时由客户端发送给服务器的    1. 有可能在请求体中（post）    2. 可能在URL中（get）1. String getParameter(String name):获取指定名称的请求参数值，适用于单值请求2. String[] getParameterValues(String name);获取指定名称的请求参数值，适用于多值请求参数3. Map&lt;String, String[]&gt; getParameterMap():获取所有请i去参数，其中key为参数名，value为参数值，例如：    超链接参数    表单数据</code></pre><h4 id="请求转发和请求包含"><a href="#请求转发和请求包含" class="headerlink" title="请求转发和请求包含"></a>请求转发和请求包含</h4><pre><code>RequestDispatcher rd = request.getRequestDispatcher(&quot;/MyServlet&quot;);//参数是被包含或被转发的Servlet虚拟路径请求转发：rd.forward(request,response);（常用）请求包含：rd.include(request,response);有时一个请求需要多个Servlet协作才能完成，所以需要一个Servlet跳到另一个Servlet1. 一个请求跨多个Servlet，需要使用转发和包含2. 请求转发：由下一个Servlet完成相应体，当前Servlet可以设置响应头（留头不留体）    1. 即request.setHeader()中的内容，可以传递到第二个servlet    2. response.write()这类的内容不会传递回去，即第一个Servlet的内容不会输出浏览器3. 请求包含：由两个Servlet共同完成相应体（都留）4. 物理是请求转发还是请求包含，都在一个请求范围内，使用同一个resquest和response</code></pre><h4 id="请求转发与重定向不同"><a href="#请求转发与重定向不同" class="headerlink" title="请求转发与重定向不同"></a>请求转发与重定向不同</h4><pre><code>1. 请求转发是一次请求，重定向是两次转发2. 请求转发地址栏不变，重定向后会显示一个请求的地址3. 请求转发只能转发到本项目其他servet，而重定向哪都能去4. 请求转发为服务端行为，重定向是客户端行为</code></pre><h4 id="request域"><a href="#request域" class="headerlink" title="request域"></a>request域</h4><pre><code>Servlet中三大域对象：request,session,application,1. void setAttribute(String name);2. Object getAttribute(String name);3. void removeAttribute(String name);同一个请求范围内使用request.getAttribute()和request.setAttribute()可以使用但是如果是重定向则不能获取，因为不是同一个请求</code></pre><p><img src="https://i.imgur.com/ntAKbGY.png" alt=""></p><h2 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h2><pre><code>常见字符编码：iso-8859-1（不支持中文），gbk（系统默认编码，中国的国标码），utf-8（万国码，支持全世界的编码，所以我们要使用这个）</code></pre><p><img src="https://i.imgur.com/ix3MrnG.png" alt=""></p><h3 id="响应编码"><a href="#响应编码" class="headerlink" title="响应编码"></a>响应编码</h3><pre><code>1. 当使用response.getWriter()来向客户端发送字符数据时   如果在之前没有设置编码，那么默认使用iso，以为不支持中文，所以一定是乱码2. 在使用response.getWriter()之前可以使用response.setCharaceterEncoding()   来设置字符流的编码为gbk或utf-83. 在使用response.getWriter()之前可以使用resonse.setHeader(&quot;Content-type&quot;,&quot;text/html;charset=utf-8&quot;)   来设置响应头，通知浏览器服务器这边使用的utf-84. serHeader(&quot;Content-Type&quot;,&quot;text/html;charset=utf-8&quot;)的快捷方式是:setContentType(&quot;text/html;charset=utf-8&quot;);</code></pre><h3 id="请求编码"><a href="#请求编码" class="headerlink" title="请求编码"></a>请求编码</h3><pre><code>1. 客户端发送给服务器的请求参数是什么编码：    请求页面时，服务器响应的编码是什么，那么客户端发送请求时的编码就是是什么2. 服务器默认使用ISO-8859-1来解码，所以中文肯定出现乱码3. 请求编码处理分为两种：get，post：get请求参数不再请求体中，而post请求参数在请求体中，所以处理方式不同</code></pre><h5 id="GET请求编码处理"><a href="#GET请求编码处理" class="headerlink" title="GET请求编码处理"></a>GET请求编码处理</h5><pre><code>1. Sting username = request.getParameter(&quot;name&quot;);2. byte[] bytes = name.getBytes(&quot;ISO-8859-1&quot;);3. name = new String(bytes, &quot;utf-8&quot;);4. 在server.xml中配置URIEncoding=utf-8</code></pre><h5 id="POST请求编码处理"><a href="#POST请求编码处理" class="headerlink" title="POST请求编码处理"></a>POST请求编码处理</h5><pre><code>1. String usernmae = new String(request.getParameter(&quot;iso-8859-1&quot;),&quot;utf-8&quot;);2. 在获取参数之前调用request.setCharacterEncoding(&quot;utf-8&quot;);</code></pre><h3 id="URL编码"><a href="#URL编码" class="headerlink" title="URL编码"></a>URL编码</h3><pre><code>表单的类型：Content-Type:application/x-www-form-urlencoded    就是把中文转换为%后面跟随两位16进制1. 他不是字符编码2. 它是用来在客户端和服务器之间传递参数用的一种方式3. URL编码需要先指定一种字符编码，把字符串解码后得到byte[],   然后把小于0的字节+256，再转换为16进制，前面再加%4. POST请求默认就是使用URL编码，tomcat会自动使用URL编码5. URL编码：String name = URLEncoder.encode(name, &quot;utf-8&quot;);6. URL解码：String name = URLDecoder.decode(name,&quot;utf-8&quot;);</code></pre><h2 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h2><pre><code>1. web.xml中&lt;url-pattern&gt;路径    要么以“*”开头要么以&quot;/&quot;开头2. 转发和包含路径    1. 以&quot;/&quot;开头：相对当前项目路径    2. 不以&quot;/&quot;开头：相对当前Servlet路径3. 重定向路径（客户端路径）    1. 以&quot;/&quot;开头：相对当前主机，所以必须后面自己加上项目名4. 页面中超链接和表单路径    1. 与重定向相同，都是客户端路径，需要添加项目名    2. &lt;form action=&quot;/项目/servlet&quot;&gt;    3. 如果不已&quot;/&quot;开头，那么相对当前页面所在路径    4. 建议使用以&quot;/&quot;开头的路径，因为如果页面路径改变，那么servlet就找不到了5. ServletContext获取资源路径    1. 相对于当前项目目录，即index.jsp所在路径6. ClassLoader获取资源路径    1. 相对classes目录7. Class获取资源路径    1. 以&quot;/&quot;开头，相对Classes目录    2. 不以&quot;/&quot;开头，相对当前.class文件所在目录</code></pre><h2 id="JSP"><a href="#JSP" class="headerlink" title="JSP"></a>JSP</h2><pre><code>jsp程序是java为了适应web开发而扩展的一种程序形式，是java程序针对web开发进行的简化。用户通过浏览器向服务器发送指定页面的请求，接下来web服务器读取jsp文件，jsp文件会被转换为一个普通java文件，java文件进行编译，得到一个class文件，web服务器装在解释执行class文件，并将执行结果响应至客户端。tomcat把为每个jsp页面创建的java文件和class 文件，放在安装目录下的 \work\Catalina\localhost\同名文件夹内。</code></pre><h3 id="JSP的作用"><a href="#JSP的作用" class="headerlink" title="JSP的作用"></a>JSP的作用</h3><pre><code>Servlet：1. 缺点：不适合设置html响应体，需要大量的response.getWriter().print(html);2. 优点：动态资源，可以编程html:1. 缺点：html是静态页面，不能包含动态信息2. 优点：不用为输出html标签而发愁JSP：1. 优点：在原有html的基础上添加java脚本，构成jsp页面</code></pre><h3 id="JSP和Servlet的分工"><a href="#JSP和Servlet的分工" class="headerlink" title="JSP和Servlet的分工"></a>JSP和Servlet的分工</h3><pre><code>JSP：1. 作为请求发起页面，例如显示表单，超链接2. 作为请求结束页面，例如显示数据Servlet：1. 作为请求中处理数据的环节</code></pre><h3 id="JSP的组成"><a href="#JSP的组成" class="headerlink" title="JSP的组成"></a>JSP的组成</h3><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. JSP = html + java脚本 + jsp标签（指令）</span><br><span class="line"><span class="number">2</span>. jsp中无创建既可使用的对象有<span class="number">9</span>个，被称为<span class="number">9</span>大内置对象，例如：request,out等</span><br><span class="line"><span class="number">3</span>. <span class="number">3</span>中java脚本：</span><br><span class="line"><span class="number">1</span>. &lt;% .... %&gt;：Java片段，用于定义<span class="number">0</span>~N条Java语句</span><br><span class="line"><span class="number">2</span>. &lt;%=....%&gt;：java表达式，用于输出，用于输出一条表达式的结果</span><br><span class="line"><span class="number">3</span>. &lt;%!....%&gt;：声明，用来创建类的成员变量和成员方法(基本不用)</span><br></pre></td></tr></table></figure><h4 id="jsp声明语法："><a href="#jsp声明语法：" class="headerlink" title="jsp声明语法："></a>jsp声明语法：</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;%! </span><br><span class="line">       String str = <span class="string">"hello world"</span>; </span><br><span class="line">       <span class="function">String <span class="title">getStr</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="string">"hello world2"</span>;</span><br><span class="line">       &#125;</span><br><span class="line">%&gt;</span><br><span class="line">声明必须再<span class="string">"&lt;%!"</span> 和 <span class="string">"%&gt;"</span> 之间进行。声明部分只能定义成员方法（函数）和成员变量，不能直接包含程序域。这里定义了一个str变量</span><br><span class="line">在jsp文件中使用， 例：</span><br><span class="line">&lt;hr&gt;<span class="comment">// &lt;hr&gt; 是分割线的意思</span></span><br><span class="line">&lt;%   out.println(<span class="keyword">this</span>.str)   %&gt;<span class="comment">//通过this 的方法调用变量或者方法（函数）</span></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;% = <span class="keyword">this</span>.getStr()%&gt;<span class="comment">//注意加了一个“=”</span></span><br></pre></td></tr></table></figure><h4 id="jsp程序脚本："><a href="#jsp程序脚本：" class="headerlink" title="jsp程序脚本："></a>jsp程序脚本：</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">包括变量的声明，表达式和程序逻辑</span><br><span class="line">声明的变量转换为_service 方法中的变量，因而是局部变量</span><br><span class="line">语句块可以自由的与页面代码组合使用</span><br><span class="line">&lt;% <span class="keyword">int</span> i = <span class="number">100</span>; %&gt;<span class="comment">// 这里的 i 是脚本变量  上面的 加了 “!”的是成员变量</span></span><br><span class="line">&lt;% <span class="keyword">if</span> (i &gt; <span class="number">10</span>) </span><br><span class="line">&#123;  %&gt;</span><br><span class="line">    &lt;h1&gt;i &gt; 10 &lt;/h1&gt;</span><br><span class="line">&lt;% &#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123; %&gt;</span><br><span class="line">    &lt;h1&gt; i &lt;= 10 &lt;/h1&gt;</span><br><span class="line">&lt;% &#125; %&gt;  <span class="comment">// 这里就是 java 和 jsp 的交叉写法。当然而可以直接用out.prinln 但是正常网页中，显示的不会是单调的黑字输出，而是有样式的输出。</span></span><br><span class="line"></span><br><span class="line">从下面的例子中可以看出 脚本变量 与 成员变量 的区别：</span><br><span class="line">&lt;!% <span class="keyword">int</span> global = <span class="number">0</span> %&gt;</span><br><span class="line">&lt;% <span class="keyword">int</span> test = <span class="number">0</span> </span><br><span class="line">       global ++;</span><br><span class="line">       test ++;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">      out.println(global);</span><br><span class="line">      out.println(<span class="string">"&lt;br&gt;"</span>);</span><br><span class="line">      out.printlin(test);</span><br><span class="line">%&gt;</span><br><span class="line">将其在加载到eclipse的工程中，然后不断刷新页面，会发现global的值会每次刷新都“+<span class="number">1</span>”，但是test的值总是从<span class="number">0</span> 加到 <span class="number">1</span></span><br><span class="line">就像是全局变量与局部变量的区别。</span><br></pre></td></tr></table></figure><h4 id="jsp注释："><a href="#jsp注释：" class="headerlink" title="jsp注释："></a>jsp注释：</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;%--你要注释的内容--%&gt;</span><br><span class="line">有点像html 的注释写法，就是多了两个%。</span><br><span class="line">但是，jsp既然嵌套了java语言，那么java的注释写法依然是可用的。</span><br><span class="line">“<span class="comment">//”  单行注释</span></span><br><span class="line">“<span class="comment">/*  */</span>”多行注释</span><br><span class="line">java注释一般多用于 <span class="string">"&lt;%%&gt;"</span> 中</span><br></pre></td></tr></table></figure><h4 id="jsp内容输出表达式"><a href="#jsp内容输出表达式" class="headerlink" title="jsp内容输出表达式"></a>jsp内容输出表达式</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;% = 输出的变量名 %&gt;</span><br><span class="line">例如：</span><br><span class="line">&lt;% <span class="keyword">int</span> i = <span class="number">10</span> %&gt;</span><br><span class="line">i 的值是 ：&lt;% = i %&gt;</span><br><span class="line">当然你也可以直接用 &lt;% out.println(i) %&gt;，但是嘛 写得多还不好控制格式</span><br></pre></td></tr></table></figure><h4 id="jsp包引入语法"><a href="#jsp包引入语法" class="headerlink" title="jsp包引入语法"></a>jsp包引入语法</h4><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">语法格式：</span><br><span class="line">&lt;% @ page <span class="keyword">import</span> = <span class="string">"java.util.Date"</span> %&gt; <span class="comment">// 引入一个 java.util.Date 的包</span></span><br><span class="line">&lt;% @ page <span class="keyword">import</span> = <span class="string">"java.io.*"</span> %&gt; <span class="comment">//一次进入多个 java.io. 的包</span></span><br><span class="line">&lt;% @ page <span class="keyword">import</span> = <span class="string">"java.util.Date,  java.io.* "</span>%&gt; <span class="comment">//一次引入多个包，用逗号隔开。</span></span><br></pre></td></tr></table></figure><h3 id="JSP的内置对象"><a href="#JSP的内置对象" class="headerlink" title="JSP的内置对象"></a>JSP的内置对象</h3><ul><li><p>out对象</p><ul><li>用于向客户端浏览器输出各种数据</li></ul></li><li><p>request对象</p><ul><li>封装了来自客户端浏览器的各种信息</li></ul></li><li><p>response对象</p><ul><li>封装了服务器的响应信息</li></ul></li><li><p>exception对象</p><ul><li>封装了程序执行中的异常和错误信息</li></ul></li><li><p>config对象</p><ul><li>封装了引用程序的配置信息</li></ul></li><li><p>page对象</p><ul><li>指向当前程序本身</li></ul></li><li><p>session对象</p><ul><li>用来保存回话信息，保存同一用户不同请求之间可以共享数据</li></ul></li><li><p>application对象</p><ul><li>代表当前应用程序的上下文，在不同的用户之间共享信息</li></ul></li><li>pageContext对象<ul><li>提供了对jsp所有命名空间以及对象的访问</li></ul></li></ul><h4 id="out对象"><a href="#out对象" class="headerlink" title="out对象"></a>out对象</h4><ul><li>out对象输出</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"文本1"</span>);<span class="comment">//向客户端浏览器输出一行文本，最后输出一个换行</span></span><br><span class="line">out.print(<span class="string">"文本2"</span>);<span class="comment">//想客户端浏览器输出一行文本</span></span><br><span class="line">out.newLine();<span class="comment">//输出一个换行效果</span></span><br></pre></td></tr></table></figure><ul><li>out对象对输出缓冲区进行管理</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">out.println(<span class="string">"获取当前缓冲区大小："</span> + out.getBufferSize());</span><br><span class="line">out.printlb(<span class="string">"当前缓冲区剩余字节数目："</span> + out.getRemaining());</span><br></pre></td></tr></table></figure><blockquote><p><code>out.flush()方法</code>，用于强制刷新服务器缓冲区里的数据，也就是说可以手工将缓冲区里的数据输出到浏览器<br><code>out.clearBuffer()方法</code>，用于清空缓冲区的数据<br><code>out.clear()方法</code>，用于清空缓冲区的数据，但是（不同于clearBuffer()）如果之前调用过.flush()方法，那么clear()方法则会抛出异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">out.println(<span class="string">"文本1"</span>);<span class="comment">//向客户端浏览器输出一行文本，最后输出一个换行</span></span><br><span class="line">out.print(<span class="string">"文本2"</span>);<span class="comment">//想客户端浏览器输出一行文本</span></span><br><span class="line">out.newLine();<span class="comment">//输出一个换行效果</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//out.flush();</span></span><br><span class="line">out.clearBuffer()l</span><br></pre></td></tr></table></figure><blockquote><p>上述情况中，如果注释了out.flush()方法，那么上述print 将没有输出，因为被clearBuffer了<br>但是如果 放开了注释out.flush()，那么将print到页面中，因为先强制输出了，再清空就没有意义了</p></blockquote><h4 id="request对象"><a href="#request对象" class="headerlink" title="request对象"></a>request对象</h4><ul><li><p>Web 应用程序应该是双向的，不仅仅是服务器向客户端展示数据，同时也有客户端向服务器提交信息</p></li><li><p>request对象</p><ul><li>封装了从客户端到服务器发出的请求信息<ul><li>客户端ip</li><li>用户提交的表单信息</li><li>cookie</li><li>主机名</li><li>……</li></ul></li></ul></li><li>服务器通过.getParameter 方法获取用户提交的表单数据</li><li>request的大部分方法都是用于处理客户端提交请求中的各种参数和选项</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">""</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"提交"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">请求方法名：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getMethod</span>() %&gt;</span></span><br><span class="line">获取请求URI字符串，请求的资源：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getRequestURI</span>() %&gt;</span>(从请求的主机名之后的第一个字符开始，到查询字符串结束的字符串)</span><br><span class="line">请求所使用的协议：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getProtocol</span>() %&gt;</span></span><br><span class="line">获取服务器的名称：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getServerName</span>() %&gt;</span></span><br><span class="line">请求的服务器端口：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getServerPost</span>() %&gt;</span></span><br><span class="line">获取客户端的IP地址：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getRemoteAddr</span>() %&gt;</span></span><br><span class="line">获取客户端的主机名：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getRemoteHost</span>() %&gt;</span></span><br><span class="line">获取提交的表单数据：<span class="tag">&lt;<span class="name">%=</span> <span class="attr">request.getParameter</span>("<span class="attr">username</span>") %&gt;</span></span><br></pre></td></tr></table></figure><h4 id="response对象"><a href="#response对象" class="headerlink" title="response对象"></a>response对象</h4><ul><li>用于服务器对客服端的请求进行回应，负责处理http连接信息<ul><li>设置文件头</li><li>cookie信息</li><li>……</li></ul></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;% </span><br><span class="line">    response.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-cache"</span>); <span class="comment">//设置网页缓存策略为no-cache</span></span><br><span class="line">    response.setIntHeader(<span class="string">"Refresh"</span>, <span class="number">2</span>);<span class="comment">//设置int类型的信息，这里是设置2s刷新一次网页</span></span><br><span class="line">    response.sendRedirect(<span class="string">"http://www.baidu.com"</span>);<span class="comment">//设置跳转</span></span><br><span class="line">Coolie myCookie = <span class="keyword">new</span> Cookie(<span class="string">"darkmi"</span>,<span class="string">"Test"</span>);<span class="comment">//设置键值对</span></span><br><span class="line">    myCookie.setMaxAge(<span class="number">3600</span>);<span class="comment">//Cookie的最大存活时间3600s</span></span><br><span class="line">    response.addCookie(myCookie);<span class="comment">//添加Cookie</span></span><br><span class="line">    %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><p>​    </p><h4 id="application对象"><a href="#application对象" class="headerlink" title="application对象"></a>application对象</h4><ul><li>代表当前的应用程序，存在于服务器的内存空间中，应用一旦启动，就会自动生成一个application对象</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">application.getServerInfo();<span class="comment">//返回当前服务器的详细信息</span></span><br><span class="line">application.getServletContextName();<span class="comment">//放回当前应用的名称</span></span><br><span class="line">application.getVirtualServerName();<span class="comment">//获取主机名称</span></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="config对象"><a href="#config对象" class="headerlink" title="config对象"></a>config对象</h4><ul><li>代表当前jsp程序的配置信息</li><li>config对象是servletConfig类的一个实例</li></ul><blockquote><p>在web.xml文件中添加如下信息</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">jsp-file</span>&gt;</span>/13/config.jsp<span class="tag">&lt;/<span class="name">jsp-file</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>username<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>darkmi<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>password<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>Testroot<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>config<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/13/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上述代码，添加了两个配置信息 username 和 password</li><li>在如下的代码中可以获得config数据</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%= config.getInitParameter(<span class="string">"username"</span>) %&gt;</span><br><span class="line">&lt;%= config.getInitParameter(<span class="string">"password"</span>) %&gt;</span><br></pre></td></tr></table></figure><h4 id="session对象"><a href="#session对象" class="headerlink" title="session对象"></a>session对象</h4><ul><li>服务器本身不会记录之前客户端请求的任何信息</li><li>用session进行辅助则可以<code>记录客户端之前的信息</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">    获取session的ID（唯一标识符）：&lt;%= session.getID() %&gt;</span><br><span class="line">    session的创建时间：&lt;%= <span class="keyword">new</span> java.util.Date(session.getCreationTime().toString()) %&gt;</span><br><span class="line">    session的最后访问时间：&lt;%= <span class="keyword">new</span> java.util.Date(session.getLastAccessedTime()) %&gt;</span><br><span class="line">    session的失效时间(单位为s)：&lt;%= session.getMaxInactiveInterval() %&gt;</span><br><span class="line">    判断session是否是新创建：&lt;%= session.isNew()%&gt;</span><br><span class="line">    清除session对象：&lt;%= session.invalidate() %&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure><ul><li>上述代码中，创建时间和访问时间都是long 型，所以需要通过java的Date 类来转换为 可读的时间</li></ul><h4 id="exception对象"><a href="#exception对象" class="headerlink" title="exception对象"></a>exception对象</h4><ul><li>JSP引擎在执行编译好的代码的时候，可能会抛出异常</li><li>exception表示jsp引擎在执行的时候抛出的异常</li><li>exception对象需要配置</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;%@ page errorPage=<span class="string">"handle_error.jsp"</span> %&gt; &lt;!-- 设置处理异常的jsp --&gt;</span><br><span class="line">&lt;%@ page isErrorPage=<span class="string">"true"</span> %&gt;&lt;!-- 在处理异常的jsp中配置 --&gt;</span><br></pre></td></tr></table></figure><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">exception.getMessage()方法用于返回描述异常的信息：out.println(exception.getMessage())</span><br><span class="line">exception对象的字符串描述：exception.toString()</span><br><span class="line">打印异常的堆栈轨迹：exception.printStackTrace()</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><h4 id="page对象"><a href="#page对象" class="headerlink" title="page对象"></a>page对象</h4><ul><li>有点类似Java中的this指针，因为page对象指向当前jsp本身</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">page对象的字符串描述：out.println(page.toString()) <span class="comment">// 字符串 @ 之前是 jsp的完全限定名 之后是HashCode值</span></span><br><span class="line">返回当前的Object类：page.getClass()</span><br><span class="line">返回page对象的hashcode值：page.hashCode()</span><br><span class="line">比较是否相等：page.equals(object)</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><ul><li>还有一些与线程相关的方法</li></ul><h4 id="pageContext"><a href="#pageContext" class="headerlink" title="pageContext"></a>pageContext</h4><ul><li>是jsp中所有对象最大的集成者</li></ul><figure class="highlight jsp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;% </span><br><span class="line">JspWriter myout = pageContext.getOut()</span><br><span class="line"><span class="comment">// 其他八个内置对象同理</span></span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;软件系统体系结构&quot;&gt;&lt;a href=&quot;#软件系统体系结构&quot; class=&quot;headerlink&quot; title=&quot;软件系统体系结构&quot;&gt;&lt;/a&gt;软件系统体系结构&lt;/h2&gt;&lt;h3 id=&quot;B-S&quot;&gt;&lt;a href=&quot;#B-S&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
    
  </entry>
  
</feed>
