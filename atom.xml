<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>lc_love_myh</title>
  
  <subtitle>往后余生 心底温柔是你，目光所至也是你。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-09-25T05:42:59.196Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>lc_love_myh</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ACM-Icpc 徐州网络赛</title>
    <link href="http://yoursite.com/2018/09/25/ACM-Icpc-%E5%BE%90%E5%B7%9E%E7%BD%91%E7%BB%9C%E8%B5%9B/"/>
    <id>http://yoursite.com/2018/09/25/ACM-Icpc-徐州网络赛/</id>
    <published>2018-09-25T05:38:47.000Z</published>
    <updated>2018-09-25T05:42:59.196Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Time Limit: 1000ms       Memory Limit: 262144KB</span><br></pre></td></tr></table></figure><p>###Description<br> Mur loves hash algorithm, and he sometimes encrypt another one’s name, and call him with that encrypted value. For instance, he calls Kimura KMR, and calls Suzuki YJSNPI. One day he read a book about SHA-256, which can transit a string into just 256 bits. Mur thought that is really cool, and he came up with a new algorithm to do the similar work. The algorithm works this way: first we choose a single letter L as the seed, and for the input(you can regard the input as a string s, s[i] represents the i th character in the string)we calculates the value(|(int) L – s[i]|), and write down the number(keeping leading zero. The length of each answer equals to 2 because the string only contains letters and numbers). Numbers writes from left to right, finally transfer all digits into a single integer(without leading zero(s)). For instance, if we choose ‘z’ as the seed, the string “oMl” becomes “11 45 14”.  It’s easy to find out that the algorithm cannot transfer any input string into the same length. Though in despair, Mur still wants to know the length of the answer the algorithm produces. Due to the silliness of Mur, he can even not figure out this, so you are assigned with the work to calculate the answer. </p><p>###Input<br> First line a integer T, the number of test cases(T &lt;= 10)  For each test case:  First line contains a integer N and a character z, (N &lt;= 1000000)  Second line contains a string with length N. Problem makes sure that all characters referred in the problem are only letters. </p><p>###Output<br> A single number which gives the answer. </p><p>###Sample input<br>2<br>3 z<br>oMl<br>6 Y<br>YJSNPI </p><p>###Sample output<br>6<br>10 </p><h2 id="翻译"><a href="#翻译" class="headerlink" title="翻译"></a>翻译</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Mur喜欢哈希算法，他有时加密另一个人的名字，然后用加密值给他打电话。例如，他打电</span><br><span class="line">话给Kimura KMR，并打电话给Suzuki YJSNPI。有一天，他读了一本关于SHA-256的</span><br><span class="line">书，它可以将字符串转换成256位。 Mur认为这很酷，他想出了一个新的算法来完成类似的</span><br><span class="line">工作。算法以这种方式工作：首先我们选择单个字母L作为种子，对于输入（您可以将输入</span><br><span class="line">视为字符串s，s [i]表示字符串中的第i个字符）我们计算值（ |（int）L - s [i] </span><br><span class="line">|），并记下数字（保持前导零。每个答案的长度等于2，因为字符串只包含字母和数字）。</span><br><span class="line">数字从左到右写入，最后将所有数字转换为单个整数（不带前导零）。例如，如果我们选</span><br><span class="line">择&apos;z&apos;作为种子，则字符串“oMl”变为“11 45 14”。很容易发现该算法无法将任何输入字</span><br><span class="line">符串转换为相同的长度。虽然在绝望中，Mur仍然想知道算法产生的答案的长度。由于穆尔</span><br><span class="line">的愚蠢，他甚至无法弄清楚这一点，所以你被分配了计算答案的工作。</span><br></pre></td></tr></table></figure><p>###输入<br> 第一行是整数T，测试用例数（T &lt;= 10）对于每个测试用例：第一行包含整数N和字符z，（N &lt;= 1000000）第二行包含长度为N的字符串。确保问题中提到的所有字符都只是字母。</p><p>###输出<br> 一个数字给出了答案。</p><p>###样本输入<br>2<br>3 z<br>oMl<br>6 Y<br>YJSNPI</p><p>###样本输出<br>6<br>10</p><blockquote><p>水题，但是特别坑。<br>这里先讲第二个样例： 减出来的结果是  00  15  06  11  09  16<br>这样去除前面的0，得出来的结果就是1506110916，这10位<br>如果全部都是0呢 比如 <br>4 z<br>zzzz<br> 这个时候就要输出 1 而不是 0</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;cstring&gt;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;set&gt;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &lt;cstdlib&gt;</span><br><span class="line">#include &lt;functional&gt;</span><br><span class="line">#include &lt;cmath&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">int T;</span><br><span class="line">cin &gt;&gt; T;</span><br><span class="line">while(T--)&#123;</span><br><span class="line">int sum = 0;</span><br><span class="line">int len;</span><br><span class="line">char Seed, s;</span><br><span class="line">cin &gt;&gt; len &gt;&gt; Seed;</span><br><span class="line">        bool flag = false, fir = true;</span><br><span class="line">for(int i=0; i&lt;len; i++)&#123;</span><br><span class="line">cin &gt;&gt; s;</span><br><span class="line">int t = Seed - s;</span><br><span class="line">t = abs(t);</span><br><span class="line">            if(t != 0)</span><br><span class="line">                flag = true;</span><br><span class="line">        if(flag)&#123;</span><br><span class="line">                if(fir)&#123;</span><br><span class="line">                    if(t &gt;= 1 &amp;&amp; t &lt;= 9)</span><br><span class="line">                        sum += 1;</span><br><span class="line">                    else </span><br><span class="line">                        sum += 2;</span><br><span class="line">                    fir = false;</span><br><span class="line">                &#125;</span><br><span class="line">                else sum += 2;</span><br><span class="line">            &#125;</span><br><span class="line">&#125;</span><br><span class="line">        if(flag == false)</span><br><span class="line">            sum = 1;</span><br><span class="line">cout &lt;&lt; sum &lt;&lt; endl;</span><br><span class="line">&#125; </span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>###Description<br> Ryuji is not a good student, and he doesn’t want to study. But there are n books he should learn, each book has its knowledge a[i]. Unfortunately, the longer he learns, the fewer he gets. That means, if he reads books from l to r, he will get a[l]<em>L+a[l+1]</em>(L-1)+…+a[r1]*2+a[r] (L is the length of [l, r] that equals to r-l+1).  Now Ryuji has q questions, you should answer him: 1. If the question type is 1, you should answer how much knowledge he will get after he reads books [l, r] 2. If the question type is 2, Ryuji will change the ith book’s knowledge to a new value. </p><p>###Input<br> First line contains two integers n and q (n, q &lt;= 100000).  The next line contains n integers represent a<a href="a[i] &lt;= 1e9">i</a>  Then in next q line each line contains three integers a, b, c, if a = 1, it means question type is 1, and b, c represents [l, r]. if a = 2, it means question type is 2, and b, c means Ryuji changes the bth book’ knowledge to c. </p><p>###Output<br> For each question, output one line with one integer represent the answer.<br>Sample Input<br>5 3<br>1 2 3 4 5<br>1 1 3<br>2 5 0<br>1 4 5 </p><p>###Sample Output<br>10<br>8 </p><p>##翻译<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">  Ryuji不是一个好学生，他不想学习。 但他应该学习n本书，每本书都有自己的知识[i]。 不幸的是，他学的越久，得到的就越少。</span><br><span class="line">   这意味着，如果他从l到r读书，他将获得a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]（L 是[l，r]的长度，等于r-l + 1）。 现在Ryuji有q问题.</span><br><span class="line">   你应该回答他： </span><br><span class="line">    1。如果问题类型是1，你应该回答他读书后会得到多少知识[l，r]</span><br><span class="line">    2.如果问题类型是2，Ryuji会改变 ith书对新价值的认识。</span><br><span class="line"> </span><br><span class="line">输入</span><br><span class="line">  第一行包含两个整数n和q（n，q &lt;= 100000）。 </span><br><span class="line">  下一行包含n个整数表示a [i]（a [i] &lt;= 1e9） </span><br><span class="line">  然后在下一个q行中每行包含三个整数a，b，c， </span><br><span class="line">  如果a = 1，则表示问题类型为1，b ，c代表[l，r]。 </span><br><span class="line">  如果a = 2，则表示问题类型为2，b，c表示Ryuji将bth book的知识更改为c。</span><br></pre></td></tr></table></figure></p><p>这里我维护的两个数组。一个是输入的数组x，另一个是数组z。<br>定义数组<code>z[i] = x[i] * (n-i+1)（i从1开始）</code><br>然后定义两个数组 y 和 shu。其中 y数组用于维护x，shu数组用于维护z。<br>这个解释一下z数组的用途，以及如何维护z数组。<br>题目求的是<code>a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]</code>，如果暴力求解绝对超时。所以有个z数组。<br>用样例来说：<br>输入的 1 2 3 4 5<br>那么 x 数组中就是  1 2 3 4 5<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;z 数组中就是 5 8 9 8 5<br>求 1~3 的和。那么如果直接加上 z[1~3] ，那么就是a[1]<em>5 + a[2]</em>4 + a[3]<em>3。但是题目要求的是  a[1]</em>3+a[2]<em>2+a[3]</em>1，也就是减去2倍的(a[1]+a[2]+a[3])。而这个2倍其实就是 区间 （l，r）中r距离尾部的单位值。这里是5 - 3 = 2。<br>上面的例子很容易发现 z 数组的用途，提前预处理了题目要求的<code>a[l] * L + a [l + 1] *（L-1）+ ... + a [r1] * 2 + a [r]</code>。如此一来就可以用0（1）的时间求出要求的值，而不需要遍历。<br>再来看，题目有两种状态一个是区间求和，另一个是修改值。碰到这种题目很容易想到的就是树状数组或者线段树，我这里用的是树状数组。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;cstdio&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int sm = 400000+10;</span><br><span class="line">long long int x[sm];</span><br><span class="line">long long int n, q;</span><br><span class="line">long long int z[sm];// x存n个数，z ai*(n-i) i 从0 开始 </span><br><span class="line">long long int y[sm], shu[sm];// y 求区间和， 树状数组</span><br><span class="line"></span><br><span class="line">long long int lowbit(int x)&#123;</span><br><span class="line">return x&amp;(-x);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">long long find_sum(long long int i, long long zu[])&#123;//区间求和 </span><br><span class="line">long long int ret =0 ;</span><br><span class="line">for(; i&gt;0 ; ret += zu[i], i -= lowbit(i));</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void update(long long int i, long long int val, long long zu[])&#123;//建树, 更新值 </span><br><span class="line">for(;i &lt;= n; zu[i] += val, i += lowbit(i));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">for(int i =1 ; i&lt;=n; i++)</span><br><span class="line">cin &gt;&gt; x[i];</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">update(i, x[i], y);//建立y，维护x数组</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">z[i] = x[i] * (n-i+1);</span><br><span class="line">for(int i=1; i&lt;=n; i++)</span><br><span class="line">update(i, z[i], shu);//建立shu，维护z数组</span><br><span class="line"></span><br><span class="line">for(int i=1; i&lt;=q; i++)</span><br><span class="line">&#123;</span><br><span class="line">long long int t;</span><br><span class="line">cin &gt;&gt; t;</span><br><span class="line">if(t == 1)&#123;</span><br><span class="line">long long int l, r, suml, sumr;</span><br><span class="line">cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">long long int s1 = find_sum(r, shu) - find_sum(l-1, shu);//获得z数组的区间和</span><br><span class="line">long long int s2 = find_sum(r, y) - find_sum(l-1, y);//获取x数组的区间和</span><br><span class="line">cout &lt;&lt; s1 - s2*(n-r) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">if(t == 2)&#123;</span><br><span class="line">long long int new_num, where;</span><br><span class="line">cin &gt;&gt; where &gt;&gt; new_num;//where代表位置，new_num代表值</span><br><span class="line">long long int mid = new_num - x[where]; </span><br><span class="line">update(where, mid, y);//更新y数组</span><br><span class="line">update(where, mid*(n - where + 1), shu);//更新shu数组</span><br><span class="line">x[where] = new_num;//更新x数组中的值</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>！！！！着重强调，如果用我这种方法做的人，一定要用`</code>long long<code></code> ！！！！`<br>本来觉得部分数据不大可以部分不用long long，结果不知道那块就是卡住了死交不过去，wa了四五发都是因为这个。</p><p>ACM本就是逆天而行，死在路上很正常。真的，看到别人大佬一队AK了，我才做了两题，就感觉对不起队友，对不起老师。天赋上的差距没办法，自己还是很菜，再加上最近在搭建服务器，导致算法上面没用心，最后一年了，好好搞。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>cocos 2dx</title>
    <link href="http://yoursite.com/2018/09/25/cocos2dx/"/>
    <id>http://yoursite.com/2018/09/25/cocos2dx/</id>
    <published>2018-09-25T03:13:41.577Z</published>
    <updated>2018-09-25T05:32:41.289Z</updated>
    
    <content type="html"><![CDATA[<h2 style="text-align: center;">基于cocos-2dx的游戏制作——I wanna save the princess</h2><p><b>在进行了两周的cocos学习之后，可以开始进行游戏的创作了。<br>I wanna主要复杂的地方在于地图的设计以及逻辑实现。下面依次进行介绍。（使用c++）</b></p><p></p><h3 style="text-align: left">一．    瓦片地图——tile map</h3><p></p><h4 style="text-align: left">1.    地图整体的大小。</h4><p>配合电脑可以全屏显示，设置为1080X1920的大小。<br><img src="https://i.imgur.com/nxXJgh7.png" alt=""></p><h4 style="text-align: left">2.    图块的大小。</h4><br><img src="https://i.imgur.com/PIXpNM7.png" alt=""><br>使用Tile map制作地图，因为它非常方便，可以将图片素材直接放到图块中，并且大小可以随意调节。<br><img src="https://i.imgur.com/XM4Csd9.png" alt=""><br><br><br><br>比如：所有的地图图块设置为30X30像素，因此普通的土块和草地都是30X30的大小。<br><img src="https://i.imgur.com/ApNK9MW.png" alt=""><br><br>但是在下面的场景中，因为水是直接在tile map中显示的，所以设置为了1920X900的大小。<br><img src="https://i.imgur.com/wUayzYq.png" alt=""><br><br><br><h4 style="text-align: left">3.    图层的设置。</h4><p>在这个界面中，可以新建多个图层，将不同属性的图块放入。<br><img src="https://i.imgur.com/yWCTAQL.png" alt=""></p><p>比如：土块和刺是分开的两个图层。<br><img src="https://i.imgur.com/ZdfvPzJ.png" alt=""></p><p><img src="https://i.imgur.com/XNNeWdU.png" alt=""><br>每一个形状的刺分别的一个图层。<br>向上的刺。<br><img src="https://i.imgur.com/F1SWGPV.png" alt=""></p><p>向左的刺。<br><img src="https://i.imgur.com/9ExyVbC.png" alt=""></p><p>隐藏的刺与可以触发的刺也是不同的图层。<br>地图上直接可见的，向上的刺。<br><img src="https://i.imgur.com/c439TCn.png" alt=""><br>并非直接可见，需要触发条件的，向上的刺。<br><img src="https://i.imgur.com/ADV21xM.png" alt=""></p><p>在图层的设置中，可以将同一属性的图层用一个新的图层覆盖，并且设置不可穿透的属性，这样在导入图层的时候会比较方便。<br><img src="https://i.imgur.com/P0Z1Y5h.png" alt=""><br>在所有不可穿透的图层中，覆盖了一层红色图层，在vs中导入的同时，设置为不可穿透。<br><img src="https://i.imgur.com/DSlwma2.png" alt=""><br>（不可穿透是利用下文中掩码的作用。）</p><h4 style="text-align: left">4.    人物图层。</h4><p>在建立图层的时候，选择添加对象层，然后选择建立矩形，在地图上的任一个地方画出任意大小的矩形，代表人物。<br><img src="https://i.imgur.com/tsLqFmW.png" alt=""><br>（相应操作在图上用红色方框表示。）</p><h4 style="text-align: left">5.    特殊图层。</h4><p>因为I wanna游戏的特殊，经常有不同的隐藏刺。这个部分首先需要在不同的图层中实现，然后需要一个对应的触发图层。</p><p>观察红色方框中图层的顺序，现在的位置是游戏地图中正常图层的位置，即土块将隐藏刺遮住了。<br><img src="https://i.imgur.com/2GKSLCB.png" alt=""></p><p>调整顺序后可以看到隐藏刺。<br><img src="https://i.imgur.com/zQZWbdh.png" alt=""></p><p>地图中红色图层的作用是，判断人物当前的位置x坐标是否与此图层中的某一个相同，相同则触发刺向上飞的事件。<br><img src="https://i.imgur.com/yf5xcJK.png" alt=""></p><p>这个触发图层的作用是，在地图中，人物在触碰到这个图层的同时，触发对应tag中的事件，比如让刺飞出，或是在踩到触发图层时冒出。</p><p><img src="https://i.imgur.com/gGIJNJK.png" alt=""><br>导入的图层为上一张图片中的yincang图层，设置tag为4。<br><img src="https://i.imgur.com/8UA4TaN.png" alt=""></p><p>人物的tag为1，当两个物体的tag分别为1和4的时候，触发事件。<br><img src="https://i.imgur.com/Tjxnvns.png" alt=""></p><p>在导入隐藏刺的同时设置冒出的移动，当人物与刺所在的图块接触，刺冒出。<br><img src="https://i.imgur.com/LSQgR0s.png" alt=""></p><p>触发刺飞出的事件。<br><img src="https://i.imgur.com/cUsSdHQ.png" alt=""></p><p></p><h3 style="text-align: left">二．    物理引擎</h3><p></p><h4 style="text-align: left">1．    建立物理世界。</h4><br><img src="https://i.imgur.com/I2FgNHO.png" alt=""><br><br><br><br><h4 style="text-align: left">2．    重力的添加以及改变。</h4><p>添加在创建物理世界时写入。<br>在第三个场景的水中，需要更改重力的大小。<br><img src="https://i.imgur.com/U22rqfa.png" alt=""></p><h4 style="text-align: left">3．    添加不同的刚体。</h4><p>普通的刚体，是矩形的。<br><img src="https://i.imgur.com/mHgHJV6.png" alt=""></p><p>因为刺是三角形的，所以需要建立一个数组存储三角形的三个顶点坐标，然后再附给物体，这样就是一个三角形的刚体。<br><img src="https://i.imgur.com/lAvxPE3.png" alt=""></p><h4 style="text-align: left">4．    介绍三种掩码。</h4><p>类别掩码setCategoryBitMask，接触检测掩码setContactTestBitmask，碰撞掩码setCollisionBitmask。<br>分别将两个物体的类别掩码与接触检测掩码进行逻辑与运算，可以判断是否触发接触事件，类似的，可以判断是否穿透或者碰撞。</p><p>人物的三种掩码。<br><img src="https://i.imgur.com/Osfqstw.png" alt=""></p><h4 style="text-align: left">5．    重新开始。</h4><p>将当前场景舍弃，重新生成一个新的场景，进行替换。<br><img src="https://i.imgur.com/X5PN8wP.png" alt=""></p><h4 style="text-align: left">6．    键盘事件。</h4><p>人物可以进行向左前进，向右前进，跳跃这三种动作，在此函数中，按下不同的键实现不同的事件。<br><img src="https://i.imgur.com/HsIWwV6.png" alt=""></p><p><img src="https://i.imgur.com/TUX2A2C.png" alt=""></p><h4 style="text-align: left">7．    标签的添加。</h4><p>在导入图层的时候就分别设置不同的tag，以便于在函数中进行相应的判断。<br><img src="https://i.imgur.com/lSDe7rU.png" alt=""></p><p>人物与刺碰撞，触发游戏结束的事件，在界面中添加游戏结束的图片，并且取消键盘事件，但可以按R键重新开始。（所有的刺tag都为3）<br><img src="https://i.imgur.com/k7Cmekz.png" alt=""></p><p>在最后切换场景时，有一个被隐藏了的触发图层，在人物接触到的同时进行tag的比较，从而可以切换场景。<br><img src="https://i.imgur.com/FONa3EU.png" alt=""><br><img src="https://i.imgur.com/uuU7qTS.png" alt=""><br><img src="https://i.imgur.com/MmH6mhx.png" alt=""></p><h4 style="text-align: left">8．    计时器函数</h4><p>进行场景中物理引擎的手动更新。<br><img src="https://i.imgur.com/lVQVhFL.png" alt=""></p><h4 style="text-align: left">9．    碰撞检测。</h4><p>利用三种掩码进行判断。<br>人物与土块。（人物的掩码在上方，三个都是7）<br><img src="https://i.imgur.com/dCYH27I.png" alt=""><br>（这个图层就是上方介绍过的覆盖图层）<br>进行判断后为不可穿透。</p><p>人物与水。<br><img src="https://i.imgur.com/VYZNULt.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 style=&quot;text-align: center;&quot;&gt;基于cocos-2dx的游戏制作——I wanna save the princess&lt;/h2&gt;

&lt;p&gt;&lt;b&gt;在进行了两周的cocos学习之后，可以开始进行游戏的创作了。&lt;br&gt;I wanna主要复杂的地方在于地图
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/09/25/hello-world/"/>
    <id>http://yoursite.com/2018/09/25/hello-world/</id>
    <published>2018-09-25T00:51:53.263Z</published>
    <updated>2018-09-25T00:51:53.263Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
